

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Dec 13 22:02:02 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1788
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	maintext_split_1,global,class=CODE,merge=1,split=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001C                     	;# 
    77  008C                     	;# 
    78  008D                     	;# 
    79  008E                     	;# 
    80  0090                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0093                     	;# 
    84  0094                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  010E                     	;# 
   100  0111                     	;# 
   101  0112                     	;# 
   102  0113                     	;# 
   103  0114                     	;# 
   104  0115                     	;# 
   105  0116                     	;# 
   106  0117                     	;# 
   107  0118                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011B                     	;# 
   111  011C                     	;# 
   112  011D                     	;# 
   113  011D                     	;# 
   114  011D                     	;# 
   115  011E                     	;# 
   116  011F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  018E                     	;# 
   120  0191                     	;# 
   121  0191                     	;# 
   122  0192                     	;# 
   123  0193                     	;# 
   124  0193                     	;# 
   125  0193                     	;# 
   126  0194                     	;# 
   127  0195                     	;# 
   128  0196                     	;# 
   129  0197                     	;# 
   130  0199                     	;# 
   131  0199                     	;# 
   132  0199                     	;# 
   133  019A                     	;# 
   134  019A                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019D                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019E                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  019F                     	;# 
   152  019F                     	;# 
   153  019F                     	;# 
   154  019F                     	;# 
   155  020C                     	;# 
   156  020D                     	;# 
   157  020E                     	;# 
   158  0210                     	;# 
   159  0211                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0212                     	;# 
   163  0213                     	;# 
   164  0213                     	;# 
   165  0214                     	;# 
   166  0214                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0216                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0217                     	;# 
   175  028C                     	;# 
   176  028D                     	;# 
   177  028E                     	;# 
   178  0291                     	;# 
   179  0291                     	;# 
   180  0292                     	;# 
   181  0293                     	;# 
   182  0298                     	;# 
   183  0298                     	;# 
   184  0299                     	;# 
   185  029A                     	;# 
   186  030C                     	;# 
   187  030D                     	;# 
   188  030E                     	;# 
   189  0311                     	;# 
   190  0311                     	;# 
   191  0312                     	;# 
   192  0313                     	;# 
   193  038C                     	;# 
   194  038D                     	;# 
   195  038E                     	;# 
   196  0390                     	;# 
   197  0391                     	;# 
   198  0392                     	;# 
   199  0393                     	;# 
   200  0394                     	;# 
   201  0395                     	;# 
   202  0396                     	;# 
   203  0397                     	;# 
   204  0398                     	;# 
   205  0399                     	;# 
   206  039D                     	;# 
   207  039E                     	;# 
   208  039F                     	;# 
   209  0511                     	;# 
   210  0513                     	;# 
   211  051A                     	;# 
   212  0591                     	;# 
   213  0592                     	;# 
   214  0593                     	;# 
   215  0594                     	;# 
   216  0595                     	;# 
   217  0596                     	;# 
   218  0E91                     	;# 
   219  0E92                     	;# 
   220  0E93                     	;# 
   221  0E94                     	;# 
   222  0E95                     	;# 
   223  0E96                     	;# 
   224  0E97                     	;# 
   225  0E98                     	;# 
   226  0E99                     	;# 
   227  0E9A                     	;# 
   228  0E9B                     	;# 
   229  0E9C                     	;# 
   230  0E9D                     	;# 
   231  0E9E                     	;# 
   232  0E9F                     	;# 
   233  0EA0                     	;# 
   234  0EA1                     	;# 
   235  0EA1                     	;# 
   236  0EA2                     	;# 
   237  0EA3                     	;# 
   238  0EA3                     	;# 
   239  0EA4                     	;# 
   240  0EA5                     	;# 
   241  0EA5                     	;# 
   242  0EA6                     	;# 
   243  0EA7                     	;# 
   244  0EA7                     	;# 
   245  0EA8                     	;# 
   246  0EA9                     	;# 
   247  0EAA                     	;# 
   248  0EAB                     	;# 
   249  0EAC                     	;# 
   250  0EAD                     	;# 
   251  0EAE                     	;# 
   252  0EAF                     	;# 
   253  0EB1                     	;# 
   254  0EB2                     	;# 
   255  0EB3                     	;# 
   256  0EB4                     	;# 
   257  0EB5                     	;# 
   258  0EB6                     	;# 
   259  0EB7                     	;# 
   260  0EB8                     	;# 
   261  0EB9                     	;# 
   262  0EBA                     	;# 
   263  0EBB                     	;# 
   264  0EBC                     	;# 
   265  0EBD                     	;# 
   266  0EBE                     	;# 
   267  0EBF                     	;# 
   268  0EC0                     	;# 
   269  0EC1                     	;# 
   270  0EC1                     	;# 
   271  0EC2                     	;# 
   272  0EC3                     	;# 
   273  0EC3                     	;# 
   274  0EC4                     	;# 
   275  0EC5                     	;# 
   276  0EC5                     	;# 
   277  0EC6                     	;# 
   278  0EC7                     	;# 
   279  0EC7                     	;# 
   280  0EC8                     	;# 
   281  0EC9                     	;# 
   282  0ECA                     	;# 
   283  0ECB                     	;# 
   284  0ECC                     	;# 
   285  0ECD                     	;# 
   286  0ECE                     	;# 
   287  0ECF                     	;# 
   288  0ED1                     	;# 
   289  0ED2                     	;# 
   290  0ED3                     	;# 
   291  0ED4                     	;# 
   292  0ED5                     	;# 
   293  0ED6                     	;# 
   294  0ED7                     	;# 
   295  0ED8                     	;# 
   296  0ED9                     	;# 
   297  0EDA                     	;# 
   298  0EDB                     	;# 
   299  0EDC                     	;# 
   300  0EDD                     	;# 
   301  0EDE                     	;# 
   302  0EDF                     	;# 
   303  0EE0                     	;# 
   304  0EE1                     	;# 
   305  0EE1                     	;# 
   306  0EE2                     	;# 
   307  0EE3                     	;# 
   308  0EE3                     	;# 
   309  0EE4                     	;# 
   310  0EE5                     	;# 
   311  0EE5                     	;# 
   312  0EE6                     	;# 
   313  0EE7                     	;# 
   314  0EE7                     	;# 
   315  0EE8                     	;# 
   316  0EE9                     	;# 
   317  0EEA                     	;# 
   318  0EEB                     	;# 
   319  0EEC                     	;# 
   320  0EED                     	;# 
   321  0EEE                     	;# 
   322  0EEF                     	;# 
   323  0F11                     	;# 
   324  0F12                     	;# 
   325  0F13                     	;# 
   326  0F14                     	;# 
   327  0F15                     	;# 
   328  0F16                     	;# 
   329  0F17                     	;# 
   330  0F18                     	;# 
   331  0F19                     	;# 
   332  0F1A                     	;# 
   333  0F1B                     	;# 
   334  0F1C                     	;# 
   335  0F1D                     	;# 
   336  0F1E                     	;# 
   337  0F1F                     	;# 
   338  0F20                     	;# 
   339  0F21                     	;# 
   340  0F21                     	;# 
   341  0F22                     	;# 
   342  0F23                     	;# 
   343  0F23                     	;# 
   344  0F24                     	;# 
   345  0F25                     	;# 
   346  0F25                     	;# 
   347  0F26                     	;# 
   348  0F27                     	;# 
   349  0F27                     	;# 
   350  0F28                     	;# 
   351  0F29                     	;# 
   352  0F2A                     	;# 
   353  0F2B                     	;# 
   354  0F2C                     	;# 
   355  0F2D                     	;# 
   356  0F2E                     	;# 
   357  0F2F                     	;# 
   358  0FE4                     	;# 
   359  0FE5                     	;# 
   360  0FE6                     	;# 
   361  0FE7                     	;# 
   362  0FE8                     	;# 
   363  0FE9                     	;# 
   364  0FEA                     	;# 
   365  0FEB                     	;# 
   366  0FED                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  000E                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0014                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  008D                     	;# 
   400  008E                     	;# 
   401  0090                     	;# 
   402  0091                     	;# 
   403  0092                     	;# 
   404  0093                     	;# 
   405  0094                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0097                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009A                     	;# 
   412  009B                     	;# 
   413  009B                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009E                     	;# 
   417  009F                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0111                     	;# 
   422  0112                     	;# 
   423  0113                     	;# 
   424  0114                     	;# 
   425  0115                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  0118                     	;# 
   429  0119                     	;# 
   430  011A                     	;# 
   431  011B                     	;# 
   432  011C                     	;# 
   433  011D                     	;# 
   434  011D                     	;# 
   435  011D                     	;# 
   436  011E                     	;# 
   437  011F                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  0199                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019A                     	;# 
   456  019A                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019C                     	;# 
   465  019D                     	;# 
   466  019D                     	;# 
   467  019D                     	;# 
   468  019E                     	;# 
   469  019E                     	;# 
   470  019E                     	;# 
   471  019F                     	;# 
   472  019F                     	;# 
   473  019F                     	;# 
   474  019F                     	;# 
   475  019F                     	;# 
   476  020C                     	;# 
   477  020D                     	;# 
   478  020E                     	;# 
   479  0210                     	;# 
   480  0211                     	;# 
   481  0211                     	;# 
   482  0212                     	;# 
   483  0212                     	;# 
   484  0213                     	;# 
   485  0213                     	;# 
   486  0214                     	;# 
   487  0214                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0216                     	;# 
   493  0216                     	;# 
   494  0217                     	;# 
   495  0217                     	;# 
   496  028C                     	;# 
   497  028D                     	;# 
   498  028E                     	;# 
   499  0291                     	;# 
   500  0291                     	;# 
   501  0292                     	;# 
   502  0293                     	;# 
   503  0298                     	;# 
   504  0298                     	;# 
   505  0299                     	;# 
   506  029A                     	;# 
   507  030C                     	;# 
   508  030D                     	;# 
   509  030E                     	;# 
   510  0311                     	;# 
   511  0311                     	;# 
   512  0312                     	;# 
   513  0313                     	;# 
   514  038C                     	;# 
   515  038D                     	;# 
   516  038E                     	;# 
   517  0390                     	;# 
   518  0391                     	;# 
   519  0392                     	;# 
   520  0393                     	;# 
   521  0394                     	;# 
   522  0395                     	;# 
   523  0396                     	;# 
   524  0397                     	;# 
   525  0398                     	;# 
   526  0399                     	;# 
   527  039D                     	;# 
   528  039E                     	;# 
   529  039F                     	;# 
   530  0511                     	;# 
   531  0513                     	;# 
   532  051A                     	;# 
   533  0591                     	;# 
   534  0592                     	;# 
   535  0593                     	;# 
   536  0594                     	;# 
   537  0595                     	;# 
   538  0596                     	;# 
   539  0E91                     	;# 
   540  0E92                     	;# 
   541  0E93                     	;# 
   542  0E94                     	;# 
   543  0E95                     	;# 
   544  0E96                     	;# 
   545  0E97                     	;# 
   546  0E98                     	;# 
   547  0E99                     	;# 
   548  0E9A                     	;# 
   549  0E9B                     	;# 
   550  0E9C                     	;# 
   551  0E9D                     	;# 
   552  0E9E                     	;# 
   553  0E9F                     	;# 
   554  0EA0                     	;# 
   555  0EA1                     	;# 
   556  0EA1                     	;# 
   557  0EA2                     	;# 
   558  0EA3                     	;# 
   559  0EA3                     	;# 
   560  0EA4                     	;# 
   561  0EA5                     	;# 
   562  0EA5                     	;# 
   563  0EA6                     	;# 
   564  0EA7                     	;# 
   565  0EA7                     	;# 
   566  0EA8                     	;# 
   567  0EA9                     	;# 
   568  0EAA                     	;# 
   569  0EAB                     	;# 
   570  0EAC                     	;# 
   571  0EAD                     	;# 
   572  0EAE                     	;# 
   573  0EAF                     	;# 
   574  0EB1                     	;# 
   575  0EB2                     	;# 
   576  0EB3                     	;# 
   577  0EB4                     	;# 
   578  0EB5                     	;# 
   579  0EB6                     	;# 
   580  0EB7                     	;# 
   581  0EB8                     	;# 
   582  0EB9                     	;# 
   583  0EBA                     	;# 
   584  0EBB                     	;# 
   585  0EBC                     	;# 
   586  0EBD                     	;# 
   587  0EBE                     	;# 
   588  0EBF                     	;# 
   589  0EC0                     	;# 
   590  0EC1                     	;# 
   591  0EC1                     	;# 
   592  0EC2                     	;# 
   593  0EC3                     	;# 
   594  0EC3                     	;# 
   595  0EC4                     	;# 
   596  0EC5                     	;# 
   597  0EC5                     	;# 
   598  0EC6                     	;# 
   599  0EC7                     	;# 
   600  0EC7                     	;# 
   601  0EC8                     	;# 
   602  0EC9                     	;# 
   603  0ECA                     	;# 
   604  0ECB                     	;# 
   605  0ECC                     	;# 
   606  0ECD                     	;# 
   607  0ECE                     	;# 
   608  0ECF                     	;# 
   609  0ED1                     	;# 
   610  0ED2                     	;# 
   611  0ED3                     	;# 
   612  0ED4                     	;# 
   613  0ED5                     	;# 
   614  0ED6                     	;# 
   615  0ED7                     	;# 
   616  0ED8                     	;# 
   617  0ED9                     	;# 
   618  0EDA                     	;# 
   619  0EDB                     	;# 
   620  0EDC                     	;# 
   621  0EDD                     	;# 
   622  0EDE                     	;# 
   623  0EDF                     	;# 
   624  0EE0                     	;# 
   625  0EE1                     	;# 
   626  0EE1                     	;# 
   627  0EE2                     	;# 
   628  0EE3                     	;# 
   629  0EE3                     	;# 
   630  0EE4                     	;# 
   631  0EE5                     	;# 
   632  0EE5                     	;# 
   633  0EE6                     	;# 
   634  0EE7                     	;# 
   635  0EE7                     	;# 
   636  0EE8                     	;# 
   637  0EE9                     	;# 
   638  0EEA                     	;# 
   639  0EEB                     	;# 
   640  0EEC                     	;# 
   641  0EED                     	;# 
   642  0EEE                     	;# 
   643  0EEF                     	;# 
   644  0F11                     	;# 
   645  0F12                     	;# 
   646  0F13                     	;# 
   647  0F14                     	;# 
   648  0F15                     	;# 
   649  0F16                     	;# 
   650  0F17                     	;# 
   651  0F18                     	;# 
   652  0F19                     	;# 
   653  0F1A                     	;# 
   654  0F1B                     	;# 
   655  0F1C                     	;# 
   656  0F1D                     	;# 
   657  0F1E                     	;# 
   658  0F1F                     	;# 
   659  0F20                     	;# 
   660  0F21                     	;# 
   661  0F21                     	;# 
   662  0F22                     	;# 
   663  0F23                     	;# 
   664  0F23                     	;# 
   665  0F24                     	;# 
   666  0F25                     	;# 
   667  0F25                     	;# 
   668  0F26                     	;# 
   669  0F27                     	;# 
   670  0F27                     	;# 
   671  0F28                     	;# 
   672  0F29                     	;# 
   673  0F2A                     	;# 
   674  0F2B                     	;# 
   675  0F2C                     	;# 
   676  0F2D                     	;# 
   677  0F2E                     	;# 
   678  0F2F                     	;# 
   679  0FE4                     	;# 
   680  0FE5                     	;# 
   681  0FE6                     	;# 
   682  0FE7                     	;# 
   683  0FE8                     	;# 
   684  0FE9                     	;# 
   685  0FEA                     	;# 
   686  0FEB                     	;# 
   687  0FED                     	;# 
   688  0FEE                     	;# 
   689  0FEF                     	;# 
   690  0000                     	;# 
   691  0001                     	;# 
   692  0002                     	;# 
   693  0003                     	;# 
   694  0004                     	;# 
   695  0005                     	;# 
   696  0006                     	;# 
   697  0007                     	;# 
   698  0008                     	;# 
   699  0009                     	;# 
   700  000A                     	;# 
   701  000B                     	;# 
   702  000C                     	;# 
   703  000D                     	;# 
   704  000E                     	;# 
   705  0010                     	;# 
   706  0011                     	;# 
   707  0012                     	;# 
   708  0013                     	;# 
   709  0014                     	;# 
   710  0015                     	;# 
   711  0016                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001C                     	;# 
   719  008C                     	;# 
   720  008D                     	;# 
   721  008E                     	;# 
   722  0090                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0094                     	;# 
   727  0095                     	;# 
   728  0096                     	;# 
   729  0097                     	;# 
   730  0098                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  010C                     	;# 
   740  010D                     	;# 
   741  010E                     	;# 
   742  0111                     	;# 
   743  0112                     	;# 
   744  0113                     	;# 
   745  0114                     	;# 
   746  0115                     	;# 
   747  0116                     	;# 
   748  0117                     	;# 
   749  0118                     	;# 
   750  0119                     	;# 
   751  011A                     	;# 
   752  011B                     	;# 
   753  011C                     	;# 
   754  011D                     	;# 
   755  011D                     	;# 
   756  011D                     	;# 
   757  011E                     	;# 
   758  011F                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  0199                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019A                     	;# 
   777  019A                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019C                     	;# 
   784  019C                     	;# 
   785  019C                     	;# 
   786  019D                     	;# 
   787  019D                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019E                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  019F                     	;# 
   794  019F                     	;# 
   795  019F                     	;# 
   796  019F                     	;# 
   797  020C                     	;# 
   798  020D                     	;# 
   799  020E                     	;# 
   800  0210                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  028C                     	;# 
   818  028D                     	;# 
   819  028E                     	;# 
   820  0291                     	;# 
   821  0291                     	;# 
   822  0292                     	;# 
   823  0293                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  030C                     	;# 
   829  030D                     	;# 
   830  030E                     	;# 
   831  0311                     	;# 
   832  0311                     	;# 
   833  0312                     	;# 
   834  0313                     	;# 
   835  038C                     	;# 
   836  038D                     	;# 
   837  038E                     	;# 
   838  0390                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  0394                     	;# 
   843  0395                     	;# 
   844  0396                     	;# 
   845  0397                     	;# 
   846  0398                     	;# 
   847  0399                     	;# 
   848  039D                     	;# 
   849  039E                     	;# 
   850  039F                     	;# 
   851  0511                     	;# 
   852  0513                     	;# 
   853  051A                     	;# 
   854  0591                     	;# 
   855  0592                     	;# 
   856  0593                     	;# 
   857  0594                     	;# 
   858  0595                     	;# 
   859  0596                     	;# 
   860  0E91                     	;# 
   861  0E92                     	;# 
   862  0E93                     	;# 
   863  0E94                     	;# 
   864  0E95                     	;# 
   865  0E96                     	;# 
   866  0E97                     	;# 
   867  0E98                     	;# 
   868  0E99                     	;# 
   869  0E9A                     	;# 
   870  0E9B                     	;# 
   871  0E9C                     	;# 
   872  0E9D                     	;# 
   873  0E9E                     	;# 
   874  0E9F                     	;# 
   875  0EA0                     	;# 
   876  0EA1                     	;# 
   877  0EA1                     	;# 
   878  0EA2                     	;# 
   879  0EA3                     	;# 
   880  0EA3                     	;# 
   881  0EA4                     	;# 
   882  0EA5                     	;# 
   883  0EA5                     	;# 
   884  0EA6                     	;# 
   885  0EA7                     	;# 
   886  0EA7                     	;# 
   887  0EA8                     	;# 
   888  0EA9                     	;# 
   889  0EAA                     	;# 
   890  0EAB                     	;# 
   891  0EAC                     	;# 
   892  0EAD                     	;# 
   893  0EAE                     	;# 
   894  0EAF                     	;# 
   895  0EB1                     	;# 
   896  0EB2                     	;# 
   897  0EB3                     	;# 
   898  0EB4                     	;# 
   899  0EB5                     	;# 
   900  0EB6                     	;# 
   901  0EB7                     	;# 
   902  0EB8                     	;# 
   903  0EB9                     	;# 
   904  0EBA                     	;# 
   905  0EBB                     	;# 
   906  0EBC                     	;# 
   907  0EBD                     	;# 
   908  0EBE                     	;# 
   909  0EBF                     	;# 
   910  0EC0                     	;# 
   911  0EC1                     	;# 
   912  0EC1                     	;# 
   913  0EC2                     	;# 
   914  0EC3                     	;# 
   915  0EC3                     	;# 
   916  0EC4                     	;# 
   917  0EC5                     	;# 
   918  0EC5                     	;# 
   919  0EC6                     	;# 
   920  0EC7                     	;# 
   921  0EC7                     	;# 
   922  0EC8                     	;# 
   923  0EC9                     	;# 
   924  0ECA                     	;# 
   925  0ECB                     	;# 
   926  0ECC                     	;# 
   927  0ECD                     	;# 
   928  0ECE                     	;# 
   929  0ECF                     	;# 
   930  0ED1                     	;# 
   931  0ED2                     	;# 
   932  0ED3                     	;# 
   933  0ED4                     	;# 
   934  0ED5                     	;# 
   935  0ED6                     	;# 
   936  0ED7                     	;# 
   937  0ED8                     	;# 
   938  0ED9                     	;# 
   939  0EDA                     	;# 
   940  0EDB                     	;# 
   941  0EDC                     	;# 
   942  0EDD                     	;# 
   943  0EDE                     	;# 
   944  0EDF                     	;# 
   945  0EE0                     	;# 
   946  0EE1                     	;# 
   947  0EE1                     	;# 
   948  0EE2                     	;# 
   949  0EE3                     	;# 
   950  0EE3                     	;# 
   951  0EE4                     	;# 
   952  0EE5                     	;# 
   953  0EE5                     	;# 
   954  0EE6                     	;# 
   955  0EE7                     	;# 
   956  0EE7                     	;# 
   957  0EE8                     	;# 
   958  0EE9                     	;# 
   959  0EEA                     	;# 
   960  0EEB                     	;# 
   961  0EEC                     	;# 
   962  0EED                     	;# 
   963  0EEE                     	;# 
   964  0EEF                     	;# 
   965  0F11                     	;# 
   966  0F12                     	;# 
   967  0F13                     	;# 
   968  0F14                     	;# 
   969  0F15                     	;# 
   970  0F16                     	;# 
   971  0F17                     	;# 
   972  0F18                     	;# 
   973  0F19                     	;# 
   974  0F1A                     	;# 
   975  0F1B                     	;# 
   976  0F1C                     	;# 
   977  0F1D                     	;# 
   978  0F1E                     	;# 
   979  0F1F                     	;# 
   980  0F20                     	;# 
   981  0F21                     	;# 
   982  0F21                     	;# 
   983  0F22                     	;# 
   984  0F23                     	;# 
   985  0F23                     	;# 
   986  0F24                     	;# 
   987  0F25                     	;# 
   988  0F25                     	;# 
   989  0F26                     	;# 
   990  0F27                     	;# 
   991  0F27                     	;# 
   992  0F28                     	;# 
   993  0F29                     	;# 
   994  0F2A                     	;# 
   995  0F2B                     	;# 
   996  0F2C                     	;# 
   997  0F2D                     	;# 
   998  0F2E                     	;# 
   999  0F2F                     	;# 
  1000  0FE4                     	;# 
  1001  0FE5                     	;# 
  1002  0FE6                     	;# 
  1003  0FE7                     	;# 
  1004  0FE8                     	;# 
  1005  0FE9                     	;# 
  1006  0FEA                     	;# 
  1007  0FEB                     	;# 
  1008  0FED                     	;# 
  1009  0FEE                     	;# 
  1010  0FEF                     	;# 
  1011  0000                     	;# 
  1012  0001                     	;# 
  1013  0002                     	;# 
  1014  0003                     	;# 
  1015  0004                     	;# 
  1016  0005                     	;# 
  1017  0006                     	;# 
  1018  0007                     	;# 
  1019  0008                     	;# 
  1020  0009                     	;# 
  1021  000A                     	;# 
  1022  000B                     	;# 
  1023  000C                     	;# 
  1024  000D                     	;# 
  1025  000E                     	;# 
  1026  0010                     	;# 
  1027  0011                     	;# 
  1028  0012                     	;# 
  1029  0013                     	;# 
  1030  0014                     	;# 
  1031  0015                     	;# 
  1032  0016                     	;# 
  1033  0016                     	;# 
  1034  0017                     	;# 
  1035  0018                     	;# 
  1036  0019                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001C                     	;# 
  1040  008C                     	;# 
  1041  008D                     	;# 
  1042  008E                     	;# 
  1043  0090                     	;# 
  1044  0091                     	;# 
  1045  0092                     	;# 
  1046  0093                     	;# 
  1047  0094                     	;# 
  1048  0095                     	;# 
  1049  0096                     	;# 
  1050  0097                     	;# 
  1051  0098                     	;# 
  1052  0099                     	;# 
  1053  009A                     	;# 
  1054  009B                     	;# 
  1055  009B                     	;# 
  1056  009C                     	;# 
  1057  009D                     	;# 
  1058  009E                     	;# 
  1059  009F                     	;# 
  1060  010C                     	;# 
  1061  010D                     	;# 
  1062  010E                     	;# 
  1063  0111                     	;# 
  1064  0112                     	;# 
  1065  0113                     	;# 
  1066  0114                     	;# 
  1067  0115                     	;# 
  1068  0116                     	;# 
  1069  0117                     	;# 
  1070  0118                     	;# 
  1071  0119                     	;# 
  1072  011A                     	;# 
  1073  011B                     	;# 
  1074  011C                     	;# 
  1075  011D                     	;# 
  1076  011D                     	;# 
  1077  011D                     	;# 
  1078  011E                     	;# 
  1079  011F                     	;# 
  1080  018C                     	;# 
  1081  018D                     	;# 
  1082  018E                     	;# 
  1083  0191                     	;# 
  1084  0191                     	;# 
  1085  0192                     	;# 
  1086  0193                     	;# 
  1087  0193                     	;# 
  1088  0193                     	;# 
  1089  0194                     	;# 
  1090  0195                     	;# 
  1091  0196                     	;# 
  1092  0197                     	;# 
  1093  0199                     	;# 
  1094  0199                     	;# 
  1095  0199                     	;# 
  1096  019A                     	;# 
  1097  019A                     	;# 
  1098  019A                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019C                     	;# 
  1105  019C                     	;# 
  1106  019C                     	;# 
  1107  019D                     	;# 
  1108  019D                     	;# 
  1109  019D                     	;# 
  1110  019E                     	;# 
  1111  019E                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  019F                     	;# 
  1115  019F                     	;# 
  1116  019F                     	;# 
  1117  019F                     	;# 
  1118  020C                     	;# 
  1119  020D                     	;# 
  1120  020E                     	;# 
  1121  0210                     	;# 
  1122  0211                     	;# 
  1123  0211                     	;# 
  1124  0212                     	;# 
  1125  0212                     	;# 
  1126  0213                     	;# 
  1127  0213                     	;# 
  1128  0214                     	;# 
  1129  0214                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0216                     	;# 
  1135  0216                     	;# 
  1136  0217                     	;# 
  1137  0217                     	;# 
  1138  028C                     	;# 
  1139  028D                     	;# 
  1140  028E                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  030C                     	;# 
  1150  030D                     	;# 
  1151  030E                     	;# 
  1152  0311                     	;# 
  1153  0311                     	;# 
  1154  0312                     	;# 
  1155  0313                     	;# 
  1156  038C                     	;# 
  1157  038D                     	;# 
  1158  038E                     	;# 
  1159  0390                     	;# 
  1160  0391                     	;# 
  1161  0392                     	;# 
  1162  0393                     	;# 
  1163  0394                     	;# 
  1164  0395                     	;# 
  1165  0396                     	;# 
  1166  0397                     	;# 
  1167  0398                     	;# 
  1168  0399                     	;# 
  1169  039D                     	;# 
  1170  039E                     	;# 
  1171  039F                     	;# 
  1172  0511                     	;# 
  1173  0513                     	;# 
  1174  051A                     	;# 
  1175  0591                     	;# 
  1176  0592                     	;# 
  1177  0593                     	;# 
  1178  0594                     	;# 
  1179  0595                     	;# 
  1180  0596                     	;# 
  1181  0E91                     	;# 
  1182  0E92                     	;# 
  1183  0E93                     	;# 
  1184  0E94                     	;# 
  1185  0E95                     	;# 
  1186  0E96                     	;# 
  1187  0E97                     	;# 
  1188  0E98                     	;# 
  1189  0E99                     	;# 
  1190  0E9A                     	;# 
  1191  0E9B                     	;# 
  1192  0E9C                     	;# 
  1193  0E9D                     	;# 
  1194  0E9E                     	;# 
  1195  0E9F                     	;# 
  1196  0EA0                     	;# 
  1197  0EA1                     	;# 
  1198  0EA1                     	;# 
  1199  0EA2                     	;# 
  1200  0EA3                     	;# 
  1201  0EA3                     	;# 
  1202  0EA4                     	;# 
  1203  0EA5                     	;# 
  1204  0EA5                     	;# 
  1205  0EA6                     	;# 
  1206  0EA7                     	;# 
  1207  0EA7                     	;# 
  1208  0EA8                     	;# 
  1209  0EA9                     	;# 
  1210  0EAA                     	;# 
  1211  0EAB                     	;# 
  1212  0EAC                     	;# 
  1213  0EAD                     	;# 
  1214  0EAE                     	;# 
  1215  0EAF                     	;# 
  1216  0EB1                     	;# 
  1217  0EB2                     	;# 
  1218  0EB3                     	;# 
  1219  0EB4                     	;# 
  1220  0EB5                     	;# 
  1221  0EB6                     	;# 
  1222  0EB7                     	;# 
  1223  0EB8                     	;# 
  1224  0EB9                     	;# 
  1225  0EBA                     	;# 
  1226  0EBB                     	;# 
  1227  0EBC                     	;# 
  1228  0EBD                     	;# 
  1229  0EBE                     	;# 
  1230  0EBF                     	;# 
  1231  0EC0                     	;# 
  1232  0EC1                     	;# 
  1233  0EC1                     	;# 
  1234  0EC2                     	;# 
  1235  0EC3                     	;# 
  1236  0EC3                     	;# 
  1237  0EC4                     	;# 
  1238  0EC5                     	;# 
  1239  0EC5                     	;# 
  1240  0EC6                     	;# 
  1241  0EC7                     	;# 
  1242  0EC7                     	;# 
  1243  0EC8                     	;# 
  1244  0EC9                     	;# 
  1245  0ECA                     	;# 
  1246  0ECB                     	;# 
  1247  0ECC                     	;# 
  1248  0ECD                     	;# 
  1249  0ECE                     	;# 
  1250  0ECF                     	;# 
  1251  0ED1                     	;# 
  1252  0ED2                     	;# 
  1253  0ED3                     	;# 
  1254  0ED4                     	;# 
  1255  0ED5                     	;# 
  1256  0ED6                     	;# 
  1257  0ED7                     	;# 
  1258  0ED8                     	;# 
  1259  0ED9                     	;# 
  1260  0EDA                     	;# 
  1261  0EDB                     	;# 
  1262  0EDC                     	;# 
  1263  0EDD                     	;# 
  1264  0EDE                     	;# 
  1265  0EDF                     	;# 
  1266  0EE0                     	;# 
  1267  0EE1                     	;# 
  1268  0EE1                     	;# 
  1269  0EE2                     	;# 
  1270  0EE3                     	;# 
  1271  0EE3                     	;# 
  1272  0EE4                     	;# 
  1273  0EE5                     	;# 
  1274  0EE5                     	;# 
  1275  0EE6                     	;# 
  1276  0EE7                     	;# 
  1277  0EE7                     	;# 
  1278  0EE8                     	;# 
  1279  0EE9                     	;# 
  1280  0EEA                     	;# 
  1281  0EEB                     	;# 
  1282  0EEC                     	;# 
  1283  0EED                     	;# 
  1284  0EEE                     	;# 
  1285  0EEF                     	;# 
  1286  0F11                     	;# 
  1287  0F12                     	;# 
  1288  0F13                     	;# 
  1289  0F14                     	;# 
  1290  0F15                     	;# 
  1291  0F16                     	;# 
  1292  0F17                     	;# 
  1293  0F18                     	;# 
  1294  0F19                     	;# 
  1295  0F1A                     	;# 
  1296  0F1B                     	;# 
  1297  0F1C                     	;# 
  1298  0F1D                     	;# 
  1299  0F1E                     	;# 
  1300  0F1F                     	;# 
  1301  0F20                     	;# 
  1302  0F21                     	;# 
  1303  0F21                     	;# 
  1304  0F22                     	;# 
  1305  0F23                     	;# 
  1306  0F23                     	;# 
  1307  0F24                     	;# 
  1308  0F25                     	;# 
  1309  0F25                     	;# 
  1310  0F26                     	;# 
  1311  0F27                     	;# 
  1312  0F27                     	;# 
  1313  0F28                     	;# 
  1314  0F29                     	;# 
  1315  0F2A                     	;# 
  1316  0F2B                     	;# 
  1317  0F2C                     	;# 
  1318  0F2D                     	;# 
  1319  0F2E                     	;# 
  1320  0F2F                     	;# 
  1321  0FE4                     	;# 
  1322  0FE5                     	;# 
  1323  0FE6                     	;# 
  1324  0FE7                     	;# 
  1325  0FE8                     	;# 
  1326  0FE9                     	;# 
  1327  0FEA                     	;# 
  1328  0FEB                     	;# 
  1329  0FED                     	;# 
  1330  0FEE                     	;# 
  1331  0FEF                     	;# 
  1332  0000                     	;# 
  1333  0001                     	;# 
  1334  0002                     	;# 
  1335  0003                     	;# 
  1336  0004                     	;# 
  1337  0005                     	;# 
  1338  0006                     	;# 
  1339  0007                     	;# 
  1340  0008                     	;# 
  1341  0009                     	;# 
  1342  000A                     	;# 
  1343  000B                     	;# 
  1344  000C                     	;# 
  1345  000D                     	;# 
  1346  000E                     	;# 
  1347  0010                     	;# 
  1348  0011                     	;# 
  1349  0012                     	;# 
  1350  0013                     	;# 
  1351  0014                     	;# 
  1352  0015                     	;# 
  1353  0016                     	;# 
  1354  0016                     	;# 
  1355  0017                     	;# 
  1356  0018                     	;# 
  1357  0019                     	;# 
  1358  001A                     	;# 
  1359  001B                     	;# 
  1360  001C                     	;# 
  1361  008C                     	;# 
  1362  008D                     	;# 
  1363  008E                     	;# 
  1364  0090                     	;# 
  1365  0091                     	;# 
  1366  0092                     	;# 
  1367  0093                     	;# 
  1368  0094                     	;# 
  1369  0095                     	;# 
  1370  0096                     	;# 
  1371  0097                     	;# 
  1372  0098                     	;# 
  1373  0099                     	;# 
  1374  009A                     	;# 
  1375  009B                     	;# 
  1376  009B                     	;# 
  1377  009C                     	;# 
  1378  009D                     	;# 
  1379  009E                     	;# 
  1380  009F                     	;# 
  1381  010C                     	;# 
  1382  010D                     	;# 
  1383  010E                     	;# 
  1384  0111                     	;# 
  1385  0112                     	;# 
  1386  0113                     	;# 
  1387  0114                     	;# 
  1388  0115                     	;# 
  1389  0116                     	;# 
  1390  0117                     	;# 
  1391  0118                     	;# 
  1392  0119                     	;# 
  1393  011A                     	;# 
  1394  011B                     	;# 
  1395  011C                     	;# 
  1396  011D                     	;# 
  1397  011D                     	;# 
  1398  011D                     	;# 
  1399  011E                     	;# 
  1400  011F                     	;# 
  1401  018C                     	;# 
  1402  018D                     	;# 
  1403  018E                     	;# 
  1404  0191                     	;# 
  1405  0191                     	;# 
  1406  0192                     	;# 
  1407  0193                     	;# 
  1408  0193                     	;# 
  1409  0193                     	;# 
  1410  0194                     	;# 
  1411  0195                     	;# 
  1412  0196                     	;# 
  1413  0197                     	;# 
  1414  0199                     	;# 
  1415  0199                     	;# 
  1416  0199                     	;# 
  1417  019A                     	;# 
  1418  019A                     	;# 
  1419  019A                     	;# 
  1420  019B                     	;# 
  1421  019B                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019C                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019D                     	;# 
  1430  019D                     	;# 
  1431  019E                     	;# 
  1432  019E                     	;# 
  1433  019E                     	;# 
  1434  019F                     	;# 
  1435  019F                     	;# 
  1436  019F                     	;# 
  1437  019F                     	;# 
  1438  019F                     	;# 
  1439  020C                     	;# 
  1440  020D                     	;# 
  1441  020E                     	;# 
  1442  0210                     	;# 
  1443  0211                     	;# 
  1444  0211                     	;# 
  1445  0212                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0214                     	;# 
  1451  0215                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0216                     	;# 
  1456  0216                     	;# 
  1457  0217                     	;# 
  1458  0217                     	;# 
  1459  028C                     	;# 
  1460  028D                     	;# 
  1461  028E                     	;# 
  1462  0291                     	;# 
  1463  0291                     	;# 
  1464  0292                     	;# 
  1465  0293                     	;# 
  1466  0298                     	;# 
  1467  0298                     	;# 
  1468  0299                     	;# 
  1469  029A                     	;# 
  1470  030C                     	;# 
  1471  030D                     	;# 
  1472  030E                     	;# 
  1473  0311                     	;# 
  1474  0311                     	;# 
  1475  0312                     	;# 
  1476  0313                     	;# 
  1477  038C                     	;# 
  1478  038D                     	;# 
  1479  038E                     	;# 
  1480  0390                     	;# 
  1481  0391                     	;# 
  1482  0392                     	;# 
  1483  0393                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0397                     	;# 
  1488  0398                     	;# 
  1489  0399                     	;# 
  1490  039D                     	;# 
  1491  039E                     	;# 
  1492  039F                     	;# 
  1493  0511                     	;# 
  1494  0513                     	;# 
  1495  051A                     	;# 
  1496  0591                     	;# 
  1497  0592                     	;# 
  1498  0593                     	;# 
  1499  0594                     	;# 
  1500  0595                     	;# 
  1501  0596                     	;# 
  1502  0E91                     	;# 
  1503  0E92                     	;# 
  1504  0E93                     	;# 
  1505  0E94                     	;# 
  1506  0E95                     	;# 
  1507  0E96                     	;# 
  1508  0E97                     	;# 
  1509  0E98                     	;# 
  1510  0E99                     	;# 
  1511  0E9A                     	;# 
  1512  0E9B                     	;# 
  1513  0E9C                     	;# 
  1514  0E9D                     	;# 
  1515  0E9E                     	;# 
  1516  0E9F                     	;# 
  1517  0EA0                     	;# 
  1518  0EA1                     	;# 
  1519  0EA1                     	;# 
  1520  0EA2                     	;# 
  1521  0EA3                     	;# 
  1522  0EA3                     	;# 
  1523  0EA4                     	;# 
  1524  0EA5                     	;# 
  1525  0EA5                     	;# 
  1526  0EA6                     	;# 
  1527  0EA7                     	;# 
  1528  0EA7                     	;# 
  1529  0EA8                     	;# 
  1530  0EA9                     	;# 
  1531  0EAA                     	;# 
  1532  0EAB                     	;# 
  1533  0EAC                     	;# 
  1534  0EAD                     	;# 
  1535  0EAE                     	;# 
  1536  0EAF                     	;# 
  1537  0EB1                     	;# 
  1538  0EB2                     	;# 
  1539  0EB3                     	;# 
  1540  0EB4                     	;# 
  1541  0EB5                     	;# 
  1542  0EB6                     	;# 
  1543  0EB7                     	;# 
  1544  0EB8                     	;# 
  1545  0EB9                     	;# 
  1546  0EBA                     	;# 
  1547  0EBB                     	;# 
  1548  0EBC                     	;# 
  1549  0EBD                     	;# 
  1550  0EBE                     	;# 
  1551  0EBF                     	;# 
  1552  0EC0                     	;# 
  1553  0EC1                     	;# 
  1554  0EC1                     	;# 
  1555  0EC2                     	;# 
  1556  0EC3                     	;# 
  1557  0EC3                     	;# 
  1558  0EC4                     	;# 
  1559  0EC5                     	;# 
  1560  0EC5                     	;# 
  1561  0EC6                     	;# 
  1562  0EC7                     	;# 
  1563  0EC7                     	;# 
  1564  0EC8                     	;# 
  1565  0EC9                     	;# 
  1566  0ECA                     	;# 
  1567  0ECB                     	;# 
  1568  0ECC                     	;# 
  1569  0ECD                     	;# 
  1570  0ECE                     	;# 
  1571  0ECF                     	;# 
  1572  0ED1                     	;# 
  1573  0ED2                     	;# 
  1574  0ED3                     	;# 
  1575  0ED4                     	;# 
  1576  0ED5                     	;# 
  1577  0ED6                     	;# 
  1578  0ED7                     	;# 
  1579  0ED8                     	;# 
  1580  0ED9                     	;# 
  1581  0EDA                     	;# 
  1582  0EDB                     	;# 
  1583  0EDC                     	;# 
  1584  0EDD                     	;# 
  1585  0EDE                     	;# 
  1586  0EDF                     	;# 
  1587  0EE0                     	;# 
  1588  0EE1                     	;# 
  1589  0EE1                     	;# 
  1590  0EE2                     	;# 
  1591  0EE3                     	;# 
  1592  0EE3                     	;# 
  1593  0EE4                     	;# 
  1594  0EE5                     	;# 
  1595  0EE5                     	;# 
  1596  0EE6                     	;# 
  1597  0EE7                     	;# 
  1598  0EE7                     	;# 
  1599  0EE8                     	;# 
  1600  0EE9                     	;# 
  1601  0EEA                     	;# 
  1602  0EEB                     	;# 
  1603  0EEC                     	;# 
  1604  0EED                     	;# 
  1605  0EEE                     	;# 
  1606  0EEF                     	;# 
  1607  0F11                     	;# 
  1608  0F12                     	;# 
  1609  0F13                     	;# 
  1610  0F14                     	;# 
  1611  0F15                     	;# 
  1612  0F16                     	;# 
  1613  0F17                     	;# 
  1614  0F18                     	;# 
  1615  0F19                     	;# 
  1616  0F1A                     	;# 
  1617  0F1B                     	;# 
  1618  0F1C                     	;# 
  1619  0F1D                     	;# 
  1620  0F1E                     	;# 
  1621  0F1F                     	;# 
  1622  0F20                     	;# 
  1623  0F21                     	;# 
  1624  0F21                     	;# 
  1625  0F22                     	;# 
  1626  0F23                     	;# 
  1627  0F23                     	;# 
  1628  0F24                     	;# 
  1629  0F25                     	;# 
  1630  0F25                     	;# 
  1631  0F26                     	;# 
  1632  0F27                     	;# 
  1633  0F27                     	;# 
  1634  0F28                     	;# 
  1635  0F29                     	;# 
  1636  0F2A                     	;# 
  1637  0F2B                     	;# 
  1638  0F2C                     	;# 
  1639  0F2D                     	;# 
  1640  0F2E                     	;# 
  1641  0F2F                     	;# 
  1642  0FE4                     	;# 
  1643  0FE5                     	;# 
  1644  0FE6                     	;# 
  1645  0FE7                     	;# 
  1646  0FE8                     	;# 
  1647  0FE9                     	;# 
  1648  0FEA                     	;# 
  1649  0FEB                     	;# 
  1650  0FED                     	;# 
  1651  0FEE                     	;# 
  1652  0FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000D                     	;# 
  1667  000E                     	;# 
  1668  0010                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0014                     	;# 
  1673  0015                     	;# 
  1674  0016                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  0019                     	;# 
  1679  001A                     	;# 
  1680  001B                     	;# 
  1681  001C                     	;# 
  1682  008C                     	;# 
  1683  008D                     	;# 
  1684  008E                     	;# 
  1685  0090                     	;# 
  1686  0091                     	;# 
  1687  0092                     	;# 
  1688  0093                     	;# 
  1689  0094                     	;# 
  1690  0095                     	;# 
  1691  0096                     	;# 
  1692  0097                     	;# 
  1693  0098                     	;# 
  1694  0099                     	;# 
  1695  009A                     	;# 
  1696  009B                     	;# 
  1697  009B                     	;# 
  1698  009C                     	;# 
  1699  009D                     	;# 
  1700  009E                     	;# 
  1701  009F                     	;# 
  1702  010C                     	;# 
  1703  010D                     	;# 
  1704  010E                     	;# 
  1705  0111                     	;# 
  1706  0112                     	;# 
  1707  0113                     	;# 
  1708  0114                     	;# 
  1709  0115                     	;# 
  1710  0116                     	;# 
  1711  0117                     	;# 
  1712  0118                     	;# 
  1713  0119                     	;# 
  1714  011A                     	;# 
  1715  011B                     	;# 
  1716  011C                     	;# 
  1717  011D                     	;# 
  1718  011D                     	;# 
  1719  011D                     	;# 
  1720  011E                     	;# 
  1721  011F                     	;# 
  1722  018C                     	;# 
  1723  018D                     	;# 
  1724  018E                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0193                     	;# 
  1731  0194                     	;# 
  1732  0195                     	;# 
  1733  0196                     	;# 
  1734  0197                     	;# 
  1735  0199                     	;# 
  1736  0199                     	;# 
  1737  0199                     	;# 
  1738  019A                     	;# 
  1739  019A                     	;# 
  1740  019A                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019C                     	;# 
  1747  019C                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019D                     	;# 
  1751  019D                     	;# 
  1752  019E                     	;# 
  1753  019E                     	;# 
  1754  019E                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  020C                     	;# 
  1761  020D                     	;# 
  1762  020E                     	;# 
  1763  0210                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  028C                     	;# 
  1781  028D                     	;# 
  1782  028E                     	;# 
  1783  0291                     	;# 
  1784  0291                     	;# 
  1785  0292                     	;# 
  1786  0293                     	;# 
  1787  0298                     	;# 
  1788  0298                     	;# 
  1789  0299                     	;# 
  1790  029A                     	;# 
  1791  030C                     	;# 
  1792  030D                     	;# 
  1793  030E                     	;# 
  1794  0311                     	;# 
  1795  0311                     	;# 
  1796  0312                     	;# 
  1797  0313                     	;# 
  1798  038C                     	;# 
  1799  038D                     	;# 
  1800  038E                     	;# 
  1801  0390                     	;# 
  1802  0391                     	;# 
  1803  0392                     	;# 
  1804  0393                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0397                     	;# 
  1809  0398                     	;# 
  1810  0399                     	;# 
  1811  039D                     	;# 
  1812  039E                     	;# 
  1813  039F                     	;# 
  1814  0511                     	;# 
  1815  0513                     	;# 
  1816  051A                     	;# 
  1817  0591                     	;# 
  1818  0592                     	;# 
  1819  0593                     	;# 
  1820  0594                     	;# 
  1821  0595                     	;# 
  1822  0596                     	;# 
  1823  0E91                     	;# 
  1824  0E92                     	;# 
  1825  0E93                     	;# 
  1826  0E94                     	;# 
  1827  0E95                     	;# 
  1828  0E96                     	;# 
  1829  0E97                     	;# 
  1830  0E98                     	;# 
  1831  0E99                     	;# 
  1832  0E9A                     	;# 
  1833  0E9B                     	;# 
  1834  0E9C                     	;# 
  1835  0E9D                     	;# 
  1836  0E9E                     	;# 
  1837  0E9F                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA1                     	;# 
  1841  0EA2                     	;# 
  1842  0EA3                     	;# 
  1843  0EA3                     	;# 
  1844  0EA4                     	;# 
  1845  0EA5                     	;# 
  1846  0EA5                     	;# 
  1847  0EA6                     	;# 
  1848  0EA7                     	;# 
  1849  0EA7                     	;# 
  1850  0EA8                     	;# 
  1851  0EA9                     	;# 
  1852  0EAA                     	;# 
  1853  0EAB                     	;# 
  1854  0EAC                     	;# 
  1855  0EAD                     	;# 
  1856  0EAE                     	;# 
  1857  0EAF                     	;# 
  1858  0EB1                     	;# 
  1859  0EB2                     	;# 
  1860  0EB3                     	;# 
  1861  0EB4                     	;# 
  1862  0EB5                     	;# 
  1863  0EB6                     	;# 
  1864  0EB7                     	;# 
  1865  0EB8                     	;# 
  1866  0EB9                     	;# 
  1867  0EBA                     	;# 
  1868  0EBB                     	;# 
  1869  0EBC                     	;# 
  1870  0EBD                     	;# 
  1871  0EBE                     	;# 
  1872  0EBF                     	;# 
  1873  0EC0                     	;# 
  1874  0EC1                     	;# 
  1875  0EC1                     	;# 
  1876  0EC2                     	;# 
  1877  0EC3                     	;# 
  1878  0EC3                     	;# 
  1879  0EC4                     	;# 
  1880  0EC5                     	;# 
  1881  0EC5                     	;# 
  1882  0EC6                     	;# 
  1883  0EC7                     	;# 
  1884  0EC7                     	;# 
  1885  0EC8                     	;# 
  1886  0EC9                     	;# 
  1887  0ECA                     	;# 
  1888  0ECB                     	;# 
  1889  0ECC                     	;# 
  1890  0ECD                     	;# 
  1891  0ECE                     	;# 
  1892  0ECF                     	;# 
  1893  0ED1                     	;# 
  1894  0ED2                     	;# 
  1895  0ED3                     	;# 
  1896  0ED4                     	;# 
  1897  0ED5                     	;# 
  1898  0ED6                     	;# 
  1899  0ED7                     	;# 
  1900  0ED8                     	;# 
  1901  0ED9                     	;# 
  1902  0EDA                     	;# 
  1903  0EDB                     	;# 
  1904  0EDC                     	;# 
  1905  0EDD                     	;# 
  1906  0EDE                     	;# 
  1907  0EDF                     	;# 
  1908  0EE0                     	;# 
  1909  0EE1                     	;# 
  1910  0EE1                     	;# 
  1911  0EE2                     	;# 
  1912  0EE3                     	;# 
  1913  0EE3                     	;# 
  1914  0EE4                     	;# 
  1915  0EE5                     	;# 
  1916  0EE5                     	;# 
  1917  0EE6                     	;# 
  1918  0EE7                     	;# 
  1919  0EE7                     	;# 
  1920  0EE8                     	;# 
  1921  0EE9                     	;# 
  1922  0EEA                     	;# 
  1923  0EEB                     	;# 
  1924  0EEC                     	;# 
  1925  0EED                     	;# 
  1926  0EEE                     	;# 
  1927  0EEF                     	;# 
  1928  0F11                     	;# 
  1929  0F12                     	;# 
  1930  0F13                     	;# 
  1931  0F14                     	;# 
  1932  0F15                     	;# 
  1933  0F16                     	;# 
  1934  0F17                     	;# 
  1935  0F18                     	;# 
  1936  0F19                     	;# 
  1937  0F1A                     	;# 
  1938  0F1B                     	;# 
  1939  0F1C                     	;# 
  1940  0F1D                     	;# 
  1941  0F1E                     	;# 
  1942  0F1F                     	;# 
  1943  0F20                     	;# 
  1944  0F21                     	;# 
  1945  0F21                     	;# 
  1946  0F22                     	;# 
  1947  0F23                     	;# 
  1948  0F23                     	;# 
  1949  0F24                     	;# 
  1950  0F25                     	;# 
  1951  0F25                     	;# 
  1952  0F26                     	;# 
  1953  0F27                     	;# 
  1954  0F27                     	;# 
  1955  0F28                     	;# 
  1956  0F29                     	;# 
  1957  0F2A                     	;# 
  1958  0F2B                     	;# 
  1959  0F2C                     	;# 
  1960  0F2D                     	;# 
  1961  0F2E                     	;# 
  1962  0F2F                     	;# 
  1963  0FE4                     	;# 
  1964  0FE5                     	;# 
  1965  0FE6                     	;# 
  1966  0FE7                     	;# 
  1967  0FE8                     	;# 
  1968  0FE9                     	;# 
  1969  0FEA                     	;# 
  1970  0FEB                     	;# 
  1971  0FED                     	;# 
  1972  0FEE                     	;# 
  1973  0FEF                     	;# 
  1974  0000                     	;# 
  1975  0001                     	;# 
  1976  0002                     	;# 
  1977  0003                     	;# 
  1978  0004                     	;# 
  1979  0005                     	;# 
  1980  0006                     	;# 
  1981  0007                     	;# 
  1982  0008                     	;# 
  1983  0009                     	;# 
  1984  000A                     	;# 
  1985  000B                     	;# 
  1986  000C                     	;# 
  1987  000D                     	;# 
  1988  000E                     	;# 
  1989  0010                     	;# 
  1990  0011                     	;# 
  1991  0012                     	;# 
  1992  0013                     	;# 
  1993  0014                     	;# 
  1994  0015                     	;# 
  1995  0016                     	;# 
  1996  0016                     	;# 
  1997  0017                     	;# 
  1998  0018                     	;# 
  1999  0019                     	;# 
  2000  001A                     	;# 
  2001  001B                     	;# 
  2002  001C                     	;# 
  2003  008C                     	;# 
  2004  008D                     	;# 
  2005  008E                     	;# 
  2006  0090                     	;# 
  2007  0091                     	;# 
  2008  0092                     	;# 
  2009  0093                     	;# 
  2010  0094                     	;# 
  2011  0095                     	;# 
  2012  0096                     	;# 
  2013  0097                     	;# 
  2014  0098                     	;# 
  2015  0099                     	;# 
  2016  009A                     	;# 
  2017  009B                     	;# 
  2018  009B                     	;# 
  2019  009C                     	;# 
  2020  009D                     	;# 
  2021  009E                     	;# 
  2022  009F                     	;# 
  2023  010C                     	;# 
  2024  010D                     	;# 
  2025  010E                     	;# 
  2026  0111                     	;# 
  2027  0112                     	;# 
  2028  0113                     	;# 
  2029  0114                     	;# 
  2030  0115                     	;# 
  2031  0116                     	;# 
  2032  0117                     	;# 
  2033  0118                     	;# 
  2034  0119                     	;# 
  2035  011A                     	;# 
  2036  011B                     	;# 
  2037  011C                     	;# 
  2038  011D                     	;# 
  2039  011D                     	;# 
  2040  011D                     	;# 
  2041  011E                     	;# 
  2042  011F                     	;# 
  2043  018C                     	;# 
  2044  018D                     	;# 
  2045  018E                     	;# 
  2046  0191                     	;# 
  2047  0191                     	;# 
  2048  0192                     	;# 
  2049  0193                     	;# 
  2050  0193                     	;# 
  2051  0193                     	;# 
  2052  0194                     	;# 
  2053  0195                     	;# 
  2054  0196                     	;# 
  2055  0197                     	;# 
  2056  0199                     	;# 
  2057  0199                     	;# 
  2058  0199                     	;# 
  2059  019A                     	;# 
  2060  019A                     	;# 
  2061  019A                     	;# 
  2062  019B                     	;# 
  2063  019B                     	;# 
  2064  019B                     	;# 
  2065  019B                     	;# 
  2066  019B                     	;# 
  2067  019C                     	;# 
  2068  019C                     	;# 
  2069  019C                     	;# 
  2070  019D                     	;# 
  2071  019D                     	;# 
  2072  019D                     	;# 
  2073  019E                     	;# 
  2074  019E                     	;# 
  2075  019E                     	;# 
  2076  019F                     	;# 
  2077  019F                     	;# 
  2078  019F                     	;# 
  2079  019F                     	;# 
  2080  019F                     	;# 
  2081  020C                     	;# 
  2082  020D                     	;# 
  2083  020E                     	;# 
  2084  0210                     	;# 
  2085  0211                     	;# 
  2086  0211                     	;# 
  2087  0212                     	;# 
  2088  0212                     	;# 
  2089  0213                     	;# 
  2090  0213                     	;# 
  2091  0214                     	;# 
  2092  0214                     	;# 
  2093  0215                     	;# 
  2094  0215                     	;# 
  2095  0215                     	;# 
  2096  0215                     	;# 
  2097  0216                     	;# 
  2098  0216                     	;# 
  2099  0217                     	;# 
  2100  0217                     	;# 
  2101  028C                     	;# 
  2102  028D                     	;# 
  2103  028E                     	;# 
  2104  0291                     	;# 
  2105  0291                     	;# 
  2106  0292                     	;# 
  2107  0293                     	;# 
  2108  0298                     	;# 
  2109  0298                     	;# 
  2110  0299                     	;# 
  2111  029A                     	;# 
  2112  030C                     	;# 
  2113  030D                     	;# 
  2114  030E                     	;# 
  2115  0311                     	;# 
  2116  0311                     	;# 
  2117  0312                     	;# 
  2118  0313                     	;# 
  2119  038C                     	;# 
  2120  038D                     	;# 
  2121  038E                     	;# 
  2122  0390                     	;# 
  2123  0391                     	;# 
  2124  0392                     	;# 
  2125  0393                     	;# 
  2126  0394                     	;# 
  2127  0395                     	;# 
  2128  0396                     	;# 
  2129  0397                     	;# 
  2130  0398                     	;# 
  2131  0399                     	;# 
  2132  039D                     	;# 
  2133  039E                     	;# 
  2134  039F                     	;# 
  2135  0511                     	;# 
  2136  0513                     	;# 
  2137  051A                     	;# 
  2138  0591                     	;# 
  2139  0592                     	;# 
  2140  0593                     	;# 
  2141  0594                     	;# 
  2142  0595                     	;# 
  2143  0596                     	;# 
  2144  0E91                     	;# 
  2145  0E92                     	;# 
  2146  0E93                     	;# 
  2147  0E94                     	;# 
  2148  0E95                     	;# 
  2149  0E96                     	;# 
  2150  0E97                     	;# 
  2151  0E98                     	;# 
  2152  0E99                     	;# 
  2153  0E9A                     	;# 
  2154  0E9B                     	;# 
  2155  0E9C                     	;# 
  2156  0E9D                     	;# 
  2157  0E9E                     	;# 
  2158  0E9F                     	;# 
  2159  0EA0                     	;# 
  2160  0EA1                     	;# 
  2161  0EA1                     	;# 
  2162  0EA2                     	;# 
  2163  0EA3                     	;# 
  2164  0EA3                     	;# 
  2165  0EA4                     	;# 
  2166  0EA5                     	;# 
  2167  0EA5                     	;# 
  2168  0EA6                     	;# 
  2169  0EA7                     	;# 
  2170  0EA7                     	;# 
  2171  0EA8                     	;# 
  2172  0EA9                     	;# 
  2173  0EAA                     	;# 
  2174  0EAB                     	;# 
  2175  0EAC                     	;# 
  2176  0EAD                     	;# 
  2177  0EAE                     	;# 
  2178  0EAF                     	;# 
  2179  0EB1                     	;# 
  2180  0EB2                     	;# 
  2181  0EB3                     	;# 
  2182  0EB4                     	;# 
  2183  0EB5                     	;# 
  2184  0EB6                     	;# 
  2185  0EB7                     	;# 
  2186  0EB8                     	;# 
  2187  0EB9                     	;# 
  2188  0EBA                     	;# 
  2189  0EBB                     	;# 
  2190  0EBC                     	;# 
  2191  0EBD                     	;# 
  2192  0EBE                     	;# 
  2193  0EBF                     	;# 
  2194  0EC0                     	;# 
  2195  0EC1                     	;# 
  2196  0EC1                     	;# 
  2197  0EC2                     	;# 
  2198  0EC3                     	;# 
  2199  0EC3                     	;# 
  2200  0EC4                     	;# 
  2201  0EC5                     	;# 
  2202  0EC5                     	;# 
  2203  0EC6                     	;# 
  2204  0EC7                     	;# 
  2205  0EC7                     	;# 
  2206  0EC8                     	;# 
  2207  0EC9                     	;# 
  2208  0ECA                     	;# 
  2209  0ECB                     	;# 
  2210  0ECC                     	;# 
  2211  0ECD                     	;# 
  2212  0ECE                     	;# 
  2213  0ECF                     	;# 
  2214  0ED1                     	;# 
  2215  0ED2                     	;# 
  2216  0ED3                     	;# 
  2217  0ED4                     	;# 
  2218  0ED5                     	;# 
  2219  0ED6                     	;# 
  2220  0ED7                     	;# 
  2221  0ED8                     	;# 
  2222  0ED9                     	;# 
  2223  0EDA                     	;# 
  2224  0EDB                     	;# 
  2225  0EDC                     	;# 
  2226  0EDD                     	;# 
  2227  0EDE                     	;# 
  2228  0EDF                     	;# 
  2229  0EE0                     	;# 
  2230  0EE1                     	;# 
  2231  0EE1                     	;# 
  2232  0EE2                     	;# 
  2233  0EE3                     	;# 
  2234  0EE3                     	;# 
  2235  0EE4                     	;# 
  2236  0EE5                     	;# 
  2237  0EE5                     	;# 
  2238  0EE6                     	;# 
  2239  0EE7                     	;# 
  2240  0EE7                     	;# 
  2241  0EE8                     	;# 
  2242  0EE9                     	;# 
  2243  0EEA                     	;# 
  2244  0EEB                     	;# 
  2245  0EEC                     	;# 
  2246  0EED                     	;# 
  2247  0EEE                     	;# 
  2248  0EEF                     	;# 
  2249  0F11                     	;# 
  2250  0F12                     	;# 
  2251  0F13                     	;# 
  2252  0F14                     	;# 
  2253  0F15                     	;# 
  2254  0F16                     	;# 
  2255  0F17                     	;# 
  2256  0F18                     	;# 
  2257  0F19                     	;# 
  2258  0F1A                     	;# 
  2259  0F1B                     	;# 
  2260  0F1C                     	;# 
  2261  0F1D                     	;# 
  2262  0F1E                     	;# 
  2263  0F1F                     	;# 
  2264  0F20                     	;# 
  2265  0F21                     	;# 
  2266  0F21                     	;# 
  2267  0F22                     	;# 
  2268  0F23                     	;# 
  2269  0F23                     	;# 
  2270  0F24                     	;# 
  2271  0F25                     	;# 
  2272  0F25                     	;# 
  2273  0F26                     	;# 
  2274  0F27                     	;# 
  2275  0F27                     	;# 
  2276  0F28                     	;# 
  2277  0F29                     	;# 
  2278  0F2A                     	;# 
  2279  0F2B                     	;# 
  2280  0F2C                     	;# 
  2281  0F2D                     	;# 
  2282  0F2E                     	;# 
  2283  0F2F                     	;# 
  2284  0FE4                     	;# 
  2285  0FE5                     	;# 
  2286  0FE6                     	;# 
  2287  0FE7                     	;# 
  2288  0FE8                     	;# 
  2289  0FE9                     	;# 
  2290  0FEA                     	;# 
  2291  0FEB                     	;# 
  2292  0FED                     	;# 
  2293  0FEE                     	;# 
  2294  0FEF                     	;# 
  2295  0000                     	;# 
  2296  0001                     	;# 
  2297  0002                     	;# 
  2298  0003                     	;# 
  2299  0004                     	;# 
  2300  0005                     	;# 
  2301  0006                     	;# 
  2302  0007                     	;# 
  2303  0008                     	;# 
  2304  0009                     	;# 
  2305  000A                     	;# 
  2306  000B                     	;# 
  2307  000C                     	;# 
  2308  000D                     	;# 
  2309  000E                     	;# 
  2310  0010                     	;# 
  2311  0011                     	;# 
  2312  0012                     	;# 
  2313  0013                     	;# 
  2314  0014                     	;# 
  2315  0015                     	;# 
  2316  0016                     	;# 
  2317  0016                     	;# 
  2318  0017                     	;# 
  2319  0018                     	;# 
  2320  0019                     	;# 
  2321  001A                     	;# 
  2322  001B                     	;# 
  2323  001C                     	;# 
  2324  008C                     	;# 
  2325  008D                     	;# 
  2326  008E                     	;# 
  2327  0090                     	;# 
  2328  0091                     	;# 
  2329  0092                     	;# 
  2330  0093                     	;# 
  2331  0094                     	;# 
  2332  0095                     	;# 
  2333  0096                     	;# 
  2334  0097                     	;# 
  2335  0098                     	;# 
  2336  0099                     	;# 
  2337  009A                     	;# 
  2338  009B                     	;# 
  2339  009B                     	;# 
  2340  009C                     	;# 
  2341  009D                     	;# 
  2342  009E                     	;# 
  2343  009F                     	;# 
  2344  010C                     	;# 
  2345  010D                     	;# 
  2346  010E                     	;# 
  2347  0111                     	;# 
  2348  0112                     	;# 
  2349  0113                     	;# 
  2350  0114                     	;# 
  2351  0115                     	;# 
  2352  0116                     	;# 
  2353  0117                     	;# 
  2354  0118                     	;# 
  2355  0119                     	;# 
  2356  011A                     	;# 
  2357  011B                     	;# 
  2358  011C                     	;# 
  2359  011D                     	;# 
  2360  011D                     	;# 
  2361  011D                     	;# 
  2362  011E                     	;# 
  2363  011F                     	;# 
  2364  018C                     	;# 
  2365  018D                     	;# 
  2366  018E                     	;# 
  2367  0191                     	;# 
  2368  0191                     	;# 
  2369  0192                     	;# 
  2370  0193                     	;# 
  2371  0193                     	;# 
  2372  0193                     	;# 
  2373  0194                     	;# 
  2374  0195                     	;# 
  2375  0196                     	;# 
  2376  0197                     	;# 
  2377  0199                     	;# 
  2378  0199                     	;# 
  2379  0199                     	;# 
  2380  019A                     	;# 
  2381  019A                     	;# 
  2382  019A                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019C                     	;# 
  2389  019C                     	;# 
  2390  019C                     	;# 
  2391  019D                     	;# 
  2392  019D                     	;# 
  2393  019D                     	;# 
  2394  019E                     	;# 
  2395  019E                     	;# 
  2396  019E                     	;# 
  2397  019F                     	;# 
  2398  019F                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020C                     	;# 
  2403  020D                     	;# 
  2404  020E                     	;# 
  2405  0210                     	;# 
  2406  0211                     	;# 
  2407  0211                     	;# 
  2408  0212                     	;# 
  2409  0212                     	;# 
  2410  0213                     	;# 
  2411  0213                     	;# 
  2412  0214                     	;# 
  2413  0214                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0215                     	;# 
  2417  0215                     	;# 
  2418  0216                     	;# 
  2419  0216                     	;# 
  2420  0217                     	;# 
  2421  0217                     	;# 
  2422  028C                     	;# 
  2423  028D                     	;# 
  2424  028E                     	;# 
  2425  0291                     	;# 
  2426  0291                     	;# 
  2427  0292                     	;# 
  2428  0293                     	;# 
  2429  0298                     	;# 
  2430  0298                     	;# 
  2431  0299                     	;# 
  2432  029A                     	;# 
  2433  030C                     	;# 
  2434  030D                     	;# 
  2435  030E                     	;# 
  2436  0311                     	;# 
  2437  0311                     	;# 
  2438  0312                     	;# 
  2439  0313                     	;# 
  2440  038C                     	;# 
  2441  038D                     	;# 
  2442  038E                     	;# 
  2443  0390                     	;# 
  2444  0391                     	;# 
  2445  0392                     	;# 
  2446  0393                     	;# 
  2447  0394                     	;# 
  2448  0395                     	;# 
  2449  0396                     	;# 
  2450  0397                     	;# 
  2451  0398                     	;# 
  2452  0399                     	;# 
  2453  039D                     	;# 
  2454  039E                     	;# 
  2455  039F                     	;# 
  2456  0511                     	;# 
  2457  0513                     	;# 
  2458  051A                     	;# 
  2459  0591                     	;# 
  2460  0592                     	;# 
  2461  0593                     	;# 
  2462  0594                     	;# 
  2463  0595                     	;# 
  2464  0596                     	;# 
  2465  0E91                     	;# 
  2466  0E92                     	;# 
  2467  0E93                     	;# 
  2468  0E94                     	;# 
  2469  0E95                     	;# 
  2470  0E96                     	;# 
  2471  0E97                     	;# 
  2472  0E98                     	;# 
  2473  0E99                     	;# 
  2474  0E9A                     	;# 
  2475  0E9B                     	;# 
  2476  0E9C                     	;# 
  2477  0E9D                     	;# 
  2478  0E9E                     	;# 
  2479  0E9F                     	;# 
  2480  0EA0                     	;# 
  2481  0EA1                     	;# 
  2482  0EA1                     	;# 
  2483  0EA2                     	;# 
  2484  0EA3                     	;# 
  2485  0EA3                     	;# 
  2486  0EA4                     	;# 
  2487  0EA5                     	;# 
  2488  0EA5                     	;# 
  2489  0EA6                     	;# 
  2490  0EA7                     	;# 
  2491  0EA7                     	;# 
  2492  0EA8                     	;# 
  2493  0EA9                     	;# 
  2494  0EAA                     	;# 
  2495  0EAB                     	;# 
  2496  0EAC                     	;# 
  2497  0EAD                     	;# 
  2498  0EAE                     	;# 
  2499  0EAF                     	;# 
  2500  0EB1                     	;# 
  2501  0EB2                     	;# 
  2502  0EB3                     	;# 
  2503  0EB4                     	;# 
  2504  0EB5                     	;# 
  2505  0EB6                     	;# 
  2506  0EB7                     	;# 
  2507  0EB8                     	;# 
  2508  0EB9                     	;# 
  2509  0EBA                     	;# 
  2510  0EBB                     	;# 
  2511  0EBC                     	;# 
  2512  0EBD                     	;# 
  2513  0EBE                     	;# 
  2514  0EBF                     	;# 
  2515  0EC0                     	;# 
  2516  0EC1                     	;# 
  2517  0EC1                     	;# 
  2518  0EC2                     	;# 
  2519  0EC3                     	;# 
  2520  0EC3                     	;# 
  2521  0EC4                     	;# 
  2522  0EC5                     	;# 
  2523  0EC5                     	;# 
  2524  0EC6                     	;# 
  2525  0EC7                     	;# 
  2526  0EC7                     	;# 
  2527  0EC8                     	;# 
  2528  0EC9                     	;# 
  2529  0ECA                     	;# 
  2530  0ECB                     	;# 
  2531  0ECC                     	;# 
  2532  0ECD                     	;# 
  2533  0ECE                     	;# 
  2534  0ECF                     	;# 
  2535  0ED1                     	;# 
  2536  0ED2                     	;# 
  2537  0ED3                     	;# 
  2538  0ED4                     	;# 
  2539  0ED5                     	;# 
  2540  0ED6                     	;# 
  2541  0ED7                     	;# 
  2542  0ED8                     	;# 
  2543  0ED9                     	;# 
  2544  0EDA                     	;# 
  2545  0EDB                     	;# 
  2546  0EDC                     	;# 
  2547  0EDD                     	;# 
  2548  0EDE                     	;# 
  2549  0EDF                     	;# 
  2550  0EE0                     	;# 
  2551  0EE1                     	;# 
  2552  0EE1                     	;# 
  2553  0EE2                     	;# 
  2554  0EE3                     	;# 
  2555  0EE3                     	;# 
  2556  0EE4                     	;# 
  2557  0EE5                     	;# 
  2558  0EE5                     	;# 
  2559  0EE6                     	;# 
  2560  0EE7                     	;# 
  2561  0EE7                     	;# 
  2562  0EE8                     	;# 
  2563  0EE9                     	;# 
  2564  0EEA                     	;# 
  2565  0EEB                     	;# 
  2566  0EEC                     	;# 
  2567  0EED                     	;# 
  2568  0EEE                     	;# 
  2569  0EEF                     	;# 
  2570  0F11                     	;# 
  2571  0F12                     	;# 
  2572  0F13                     	;# 
  2573  0F14                     	;# 
  2574  0F15                     	;# 
  2575  0F16                     	;# 
  2576  0F17                     	;# 
  2577  0F18                     	;# 
  2578  0F19                     	;# 
  2579  0F1A                     	;# 
  2580  0F1B                     	;# 
  2581  0F1C                     	;# 
  2582  0F1D                     	;# 
  2583  0F1E                     	;# 
  2584  0F1F                     	;# 
  2585  0F20                     	;# 
  2586  0F21                     	;# 
  2587  0F21                     	;# 
  2588  0F22                     	;# 
  2589  0F23                     	;# 
  2590  0F23                     	;# 
  2591  0F24                     	;# 
  2592  0F25                     	;# 
  2593  0F25                     	;# 
  2594  0F26                     	;# 
  2595  0F27                     	;# 
  2596  0F27                     	;# 
  2597  0F28                     	;# 
  2598  0F29                     	;# 
  2599  0F2A                     	;# 
  2600  0F2B                     	;# 
  2601  0F2C                     	;# 
  2602  0F2D                     	;# 
  2603  0F2E                     	;# 
  2604  0F2F                     	;# 
  2605  0FE4                     	;# 
  2606  0FE5                     	;# 
  2607  0FE6                     	;# 
  2608  0FE7                     	;# 
  2609  0FE8                     	;# 
  2610  0FE9                     	;# 
  2611  0FEA                     	;# 
  2612  0FEB                     	;# 
  2613  0FED                     	;# 
  2614  0FEE                     	;# 
  2615  0FEF                     	;# 
  2616  0000                     	;# 
  2617  0001                     	;# 
  2618  0002                     	;# 
  2619  0003                     	;# 
  2620  0004                     	;# 
  2621  0005                     	;# 
  2622  0006                     	;# 
  2623  0007                     	;# 
  2624  0008                     	;# 
  2625  0009                     	;# 
  2626  000A                     	;# 
  2627  000B                     	;# 
  2628  000C                     	;# 
  2629  000D                     	;# 
  2630  000E                     	;# 
  2631  0010                     	;# 
  2632  0011                     	;# 
  2633  0012                     	;# 
  2634  0013                     	;# 
  2635  0014                     	;# 
  2636  0015                     	;# 
  2637  0016                     	;# 
  2638  0016                     	;# 
  2639  0017                     	;# 
  2640  0018                     	;# 
  2641  0019                     	;# 
  2642  001A                     	;# 
  2643  001B                     	;# 
  2644  001C                     	;# 
  2645  008C                     	;# 
  2646  008D                     	;# 
  2647  008E                     	;# 
  2648  0090                     	;# 
  2649  0091                     	;# 
  2650  0092                     	;# 
  2651  0093                     	;# 
  2652  0094                     	;# 
  2653  0095                     	;# 
  2654  0096                     	;# 
  2655  0097                     	;# 
  2656  0098                     	;# 
  2657  0099                     	;# 
  2658  009A                     	;# 
  2659  009B                     	;# 
  2660  009B                     	;# 
  2661  009C                     	;# 
  2662  009D                     	;# 
  2663  009E                     	;# 
  2664  009F                     	;# 
  2665  010C                     	;# 
  2666  010D                     	;# 
  2667  010E                     	;# 
  2668  0111                     	;# 
  2669  0112                     	;# 
  2670  0113                     	;# 
  2671  0114                     	;# 
  2672  0115                     	;# 
  2673  0116                     	;# 
  2674  0117                     	;# 
  2675  0118                     	;# 
  2676  0119                     	;# 
  2677  011A                     	;# 
  2678  011B                     	;# 
  2679  011C                     	;# 
  2680  011D                     	;# 
  2681  011D                     	;# 
  2682  011D                     	;# 
  2683  011E                     	;# 
  2684  011F                     	;# 
  2685  018C                     	;# 
  2686  018D                     	;# 
  2687  018E                     	;# 
  2688  0191                     	;# 
  2689  0191                     	;# 
  2690  0192                     	;# 
  2691  0193                     	;# 
  2692  0193                     	;# 
  2693  0193                     	;# 
  2694  0194                     	;# 
  2695  0195                     	;# 
  2696  0196                     	;# 
  2697  0197                     	;# 
  2698  0199                     	;# 
  2699  0199                     	;# 
  2700  0199                     	;# 
  2701  019A                     	;# 
  2702  019A                     	;# 
  2703  019A                     	;# 
  2704  019B                     	;# 
  2705  019B                     	;# 
  2706  019B                     	;# 
  2707  019B                     	;# 
  2708  019B                     	;# 
  2709  019C                     	;# 
  2710  019C                     	;# 
  2711  019C                     	;# 
  2712  019D                     	;# 
  2713  019D                     	;# 
  2714  019D                     	;# 
  2715  019E                     	;# 
  2716  019E                     	;# 
  2717  019E                     	;# 
  2718  019F                     	;# 
  2719  019F                     	;# 
  2720  019F                     	;# 
  2721  019F                     	;# 
  2722  019F                     	;# 
  2723  020C                     	;# 
  2724  020D                     	;# 
  2725  020E                     	;# 
  2726  0210                     	;# 
  2727  0211                     	;# 
  2728  0211                     	;# 
  2729  0212                     	;# 
  2730  0212                     	;# 
  2731  0213                     	;# 
  2732  0213                     	;# 
  2733  0214                     	;# 
  2734  0214                     	;# 
  2735  0215                     	;# 
  2736  0215                     	;# 
  2737  0215                     	;# 
  2738  0215                     	;# 
  2739  0216                     	;# 
  2740  0216                     	;# 
  2741  0217                     	;# 
  2742  0217                     	;# 
  2743  028C                     	;# 
  2744  028D                     	;# 
  2745  028E                     	;# 
  2746  0291                     	;# 
  2747  0291                     	;# 
  2748  0292                     	;# 
  2749  0293                     	;# 
  2750  0298                     	;# 
  2751  0298                     	;# 
  2752  0299                     	;# 
  2753  029A                     	;# 
  2754  030C                     	;# 
  2755  030D                     	;# 
  2756  030E                     	;# 
  2757  0311                     	;# 
  2758  0311                     	;# 
  2759  0312                     	;# 
  2760  0313                     	;# 
  2761  038C                     	;# 
  2762  038D                     	;# 
  2763  038E                     	;# 
  2764  0390                     	;# 
  2765  0391                     	;# 
  2766  0392                     	;# 
  2767  0393                     	;# 
  2768  0394                     	;# 
  2769  0395                     	;# 
  2770  0396                     	;# 
  2771  0397                     	;# 
  2772  0398                     	;# 
  2773  0399                     	;# 
  2774  039D                     	;# 
  2775  039E                     	;# 
  2776  039F                     	;# 
  2777  0511                     	;# 
  2778  0513                     	;# 
  2779  051A                     	;# 
  2780  0591                     	;# 
  2781  0592                     	;# 
  2782  0593                     	;# 
  2783  0594                     	;# 
  2784  0595                     	;# 
  2785  0596                     	;# 
  2786  0E91                     	;# 
  2787  0E92                     	;# 
  2788  0E93                     	;# 
  2789  0E94                     	;# 
  2790  0E95                     	;# 
  2791  0E96                     	;# 
  2792  0E97                     	;# 
  2793  0E98                     	;# 
  2794  0E99                     	;# 
  2795  0E9A                     	;# 
  2796  0E9B                     	;# 
  2797  0E9C                     	;# 
  2798  0E9D                     	;# 
  2799  0E9E                     	;# 
  2800  0E9F                     	;# 
  2801  0EA0                     	;# 
  2802  0EA1                     	;# 
  2803  0EA1                     	;# 
  2804  0EA2                     	;# 
  2805  0EA3                     	;# 
  2806  0EA3                     	;# 
  2807  0EA4                     	;# 
  2808  0EA5                     	;# 
  2809  0EA5                     	;# 
  2810  0EA6                     	;# 
  2811  0EA7                     	;# 
  2812  0EA7                     	;# 
  2813  0EA8                     	;# 
  2814  0EA9                     	;# 
  2815  0EAA                     	;# 
  2816  0EAB                     	;# 
  2817  0EAC                     	;# 
  2818  0EAD                     	;# 
  2819  0EAE                     	;# 
  2820  0EAF                     	;# 
  2821  0EB1                     	;# 
  2822  0EB2                     	;# 
  2823  0EB3                     	;# 
  2824  0EB4                     	;# 
  2825  0EB5                     	;# 
  2826  0EB6                     	;# 
  2827  0EB7                     	;# 
  2828  0EB8                     	;# 
  2829  0EB9                     	;# 
  2830  0EBA                     	;# 
  2831  0EBB                     	;# 
  2832  0EBC                     	;# 
  2833  0EBD                     	;# 
  2834  0EBE                     	;# 
  2835  0EBF                     	;# 
  2836  0EC0                     	;# 
  2837  0EC1                     	;# 
  2838  0EC1                     	;# 
  2839  0EC2                     	;# 
  2840  0EC3                     	;# 
  2841  0EC3                     	;# 
  2842  0EC4                     	;# 
  2843  0EC5                     	;# 
  2844  0EC5                     	;# 
  2845  0EC6                     	;# 
  2846  0EC7                     	;# 
  2847  0EC7                     	;# 
  2848  0EC8                     	;# 
  2849  0EC9                     	;# 
  2850  0ECA                     	;# 
  2851  0ECB                     	;# 
  2852  0ECC                     	;# 
  2853  0ECD                     	;# 
  2854  0ECE                     	;# 
  2855  0ECF                     	;# 
  2856  0ED1                     	;# 
  2857  0ED2                     	;# 
  2858  0ED3                     	;# 
  2859  0ED4                     	;# 
  2860  0ED5                     	;# 
  2861  0ED6                     	;# 
  2862  0ED7                     	;# 
  2863  0ED8                     	;# 
  2864  0ED9                     	;# 
  2865  0EDA                     	;# 
  2866  0EDB                     	;# 
  2867  0EDC                     	;# 
  2868  0EDD                     	;# 
  2869  0EDE                     	;# 
  2870  0EDF                     	;# 
  2871  0EE0                     	;# 
  2872  0EE1                     	;# 
  2873  0EE1                     	;# 
  2874  0EE2                     	;# 
  2875  0EE3                     	;# 
  2876  0EE3                     	;# 
  2877  0EE4                     	;# 
  2878  0EE5                     	;# 
  2879  0EE5                     	;# 
  2880  0EE6                     	;# 
  2881  0EE7                     	;# 
  2882  0EE7                     	;# 
  2883  0EE8                     	;# 
  2884  0EE9                     	;# 
  2885  0EEA                     	;# 
  2886  0EEB                     	;# 
  2887  0EEC                     	;# 
  2888  0EED                     	;# 
  2889  0EEE                     	;# 
  2890  0EEF                     	;# 
  2891  0F11                     	;# 
  2892  0F12                     	;# 
  2893  0F13                     	;# 
  2894  0F14                     	;# 
  2895  0F15                     	;# 
  2896  0F16                     	;# 
  2897  0F17                     	;# 
  2898  0F18                     	;# 
  2899  0F19                     	;# 
  2900  0F1A                     	;# 
  2901  0F1B                     	;# 
  2902  0F1C                     	;# 
  2903  0F1D                     	;# 
  2904  0F1E                     	;# 
  2905  0F1F                     	;# 
  2906  0F20                     	;# 
  2907  0F21                     	;# 
  2908  0F21                     	;# 
  2909  0F22                     	;# 
  2910  0F23                     	;# 
  2911  0F23                     	;# 
  2912  0F24                     	;# 
  2913  0F25                     	;# 
  2914  0F25                     	;# 
  2915  0F26                     	;# 
  2916  0F27                     	;# 
  2917  0F27                     	;# 
  2918  0F28                     	;# 
  2919  0F29                     	;# 
  2920  0F2A                     	;# 
  2921  0F2B                     	;# 
  2922  0F2C                     	;# 
  2923  0F2D                     	;# 
  2924  0F2E                     	;# 
  2925  0F2F                     	;# 
  2926  0FE4                     	;# 
  2927  0FE5                     	;# 
  2928  0FE6                     	;# 
  2929  0FE7                     	;# 
  2930  0FE8                     	;# 
  2931  0FE9                     	;# 
  2932  0FEA                     	;# 
  2933  0FEB                     	;# 
  2934  0FED                     	;# 
  2935  0FEE                     	;# 
  2936  0FEF                     	;# 
  2937  0000                     	;# 
  2938  0001                     	;# 
  2939  0002                     	;# 
  2940  0003                     	;# 
  2941  0004                     	;# 
  2942  0005                     	;# 
  2943  0006                     	;# 
  2944  0007                     	;# 
  2945  0008                     	;# 
  2946  0009                     	;# 
  2947  000A                     	;# 
  2948  000B                     	;# 
  2949  000C                     	;# 
  2950  000D                     	;# 
  2951  000E                     	;# 
  2952  0010                     	;# 
  2953  0011                     	;# 
  2954  0012                     	;# 
  2955  0013                     	;# 
  2956  0014                     	;# 
  2957  0015                     	;# 
  2958  0016                     	;# 
  2959  0016                     	;# 
  2960  0017                     	;# 
  2961  0018                     	;# 
  2962  0019                     	;# 
  2963  001A                     	;# 
  2964  001B                     	;# 
  2965  001C                     	;# 
  2966  008C                     	;# 
  2967  008D                     	;# 
  2968  008E                     	;# 
  2969  0090                     	;# 
  2970  0091                     	;# 
  2971  0092                     	;# 
  2972  0093                     	;# 
  2973  0094                     	;# 
  2974  0095                     	;# 
  2975  0096                     	;# 
  2976  0097                     	;# 
  2977  0098                     	;# 
  2978  0099                     	;# 
  2979  009A                     	;# 
  2980  009B                     	;# 
  2981  009B                     	;# 
  2982  009C                     	;# 
  2983  009D                     	;# 
  2984  009E                     	;# 
  2985  009F                     	;# 
  2986  010C                     	;# 
  2987  010D                     	;# 
  2988  010E                     	;# 
  2989  0111                     	;# 
  2990  0112                     	;# 
  2991  0113                     	;# 
  2992  0114                     	;# 
  2993  0115                     	;# 
  2994  0116                     	;# 
  2995  0117                     	;# 
  2996  0118                     	;# 
  2997  0119                     	;# 
  2998  011A                     	;# 
  2999  011B                     	;# 
  3000  011C                     	;# 
  3001  011D                     	;# 
  3002  011D                     	;# 
  3003  011D                     	;# 
  3004  011E                     	;# 
  3005  011F                     	;# 
  3006  018C                     	;# 
  3007  018D                     	;# 
  3008  018E                     	;# 
  3009  0191                     	;# 
  3010  0191                     	;# 
  3011  0192                     	;# 
  3012  0193                     	;# 
  3013  0193                     	;# 
  3014  0193                     	;# 
  3015  0194                     	;# 
  3016  0195                     	;# 
  3017  0196                     	;# 
  3018  0197                     	;# 
  3019  0199                     	;# 
  3020  0199                     	;# 
  3021  0199                     	;# 
  3022  019A                     	;# 
  3023  019A                     	;# 
  3024  019A                     	;# 
  3025  019B                     	;# 
  3026  019B                     	;# 
  3027  019B                     	;# 
  3028  019B                     	;# 
  3029  019B                     	;# 
  3030  019C                     	;# 
  3031  019C                     	;# 
  3032  019C                     	;# 
  3033  019D                     	;# 
  3034  019D                     	;# 
  3035  019D                     	;# 
  3036  019E                     	;# 
  3037  019E                     	;# 
  3038  019E                     	;# 
  3039  019F                     	;# 
  3040  019F                     	;# 
  3041  019F                     	;# 
  3042  019F                     	;# 
  3043  019F                     	;# 
  3044  020C                     	;# 
  3045  020D                     	;# 
  3046  020E                     	;# 
  3047  0210                     	;# 
  3048  0211                     	;# 
  3049  0211                     	;# 
  3050  0212                     	;# 
  3051  0212                     	;# 
  3052  0213                     	;# 
  3053  0213                     	;# 
  3054  0214                     	;# 
  3055  0214                     	;# 
  3056  0215                     	;# 
  3057  0215                     	;# 
  3058  0215                     	;# 
  3059  0215                     	;# 
  3060  0216                     	;# 
  3061  0216                     	;# 
  3062  0217                     	;# 
  3063  0217                     	;# 
  3064  028C                     	;# 
  3065  028D                     	;# 
  3066  028E                     	;# 
  3067  0291                     	;# 
  3068  0291                     	;# 
  3069  0292                     	;# 
  3070  0293                     	;# 
  3071  0298                     	;# 
  3072  0298                     	;# 
  3073  0299                     	;# 
  3074  029A                     	;# 
  3075  030C                     	;# 
  3076  030D                     	;# 
  3077  030E                     	;# 
  3078  0311                     	;# 
  3079  0311                     	;# 
  3080  0312                     	;# 
  3081  0313                     	;# 
  3082  038C                     	;# 
  3083  038D                     	;# 
  3084  038E                     	;# 
  3085  0390                     	;# 
  3086  0391                     	;# 
  3087  0392                     	;# 
  3088  0393                     	;# 
  3089  0394                     	;# 
  3090  0395                     	;# 
  3091  0396                     	;# 
  3092  0397                     	;# 
  3093  0398                     	;# 
  3094  0399                     	;# 
  3095  039D                     	;# 
  3096  039E                     	;# 
  3097  039F                     	;# 
  3098  0511                     	;# 
  3099  0513                     	;# 
  3100  051A                     	;# 
  3101  0591                     	;# 
  3102  0592                     	;# 
  3103  0593                     	;# 
  3104  0594                     	;# 
  3105  0595                     	;# 
  3106  0596                     	;# 
  3107  0E91                     	;# 
  3108  0E92                     	;# 
  3109  0E93                     	;# 
  3110  0E94                     	;# 
  3111  0E95                     	;# 
  3112  0E96                     	;# 
  3113  0E97                     	;# 
  3114  0E98                     	;# 
  3115  0E99                     	;# 
  3116  0E9A                     	;# 
  3117  0E9B                     	;# 
  3118  0E9C                     	;# 
  3119  0E9D                     	;# 
  3120  0E9E                     	;# 
  3121  0E9F                     	;# 
  3122  0EA0                     	;# 
  3123  0EA1                     	;# 
  3124  0EA1                     	;# 
  3125  0EA2                     	;# 
  3126  0EA3                     	;# 
  3127  0EA3                     	;# 
  3128  0EA4                     	;# 
  3129  0EA5                     	;# 
  3130  0EA5                     	;# 
  3131  0EA6                     	;# 
  3132  0EA7                     	;# 
  3133  0EA7                     	;# 
  3134  0EA8                     	;# 
  3135  0EA9                     	;# 
  3136  0EAA                     	;# 
  3137  0EAB                     	;# 
  3138  0EAC                     	;# 
  3139  0EAD                     	;# 
  3140  0EAE                     	;# 
  3141  0EAF                     	;# 
  3142  0EB1                     	;# 
  3143  0EB2                     	;# 
  3144  0EB3                     	;# 
  3145  0EB4                     	;# 
  3146  0EB5                     	;# 
  3147  0EB6                     	;# 
  3148  0EB7                     	;# 
  3149  0EB8                     	;# 
  3150  0EB9                     	;# 
  3151  0EBA                     	;# 
  3152  0EBB                     	;# 
  3153  0EBC                     	;# 
  3154  0EBD                     	;# 
  3155  0EBE                     	;# 
  3156  0EBF                     	;# 
  3157  0EC0                     	;# 
  3158  0EC1                     	;# 
  3159  0EC1                     	;# 
  3160  0EC2                     	;# 
  3161  0EC3                     	;# 
  3162  0EC3                     	;# 
  3163  0EC4                     	;# 
  3164  0EC5                     	;# 
  3165  0EC5                     	;# 
  3166  0EC6                     	;# 
  3167  0EC7                     	;# 
  3168  0EC7                     	;# 
  3169  0EC8                     	;# 
  3170  0EC9                     	;# 
  3171  0ECA                     	;# 
  3172  0ECB                     	;# 
  3173  0ECC                     	;# 
  3174  0ECD                     	;# 
  3175  0ECE                     	;# 
  3176  0ECF                     	;# 
  3177  0ED1                     	;# 
  3178  0ED2                     	;# 
  3179  0ED3                     	;# 
  3180  0ED4                     	;# 
  3181  0ED5                     	;# 
  3182  0ED6                     	;# 
  3183  0ED7                     	;# 
  3184  0ED8                     	;# 
  3185  0ED9                     	;# 
  3186  0EDA                     	;# 
  3187  0EDB                     	;# 
  3188  0EDC                     	;# 
  3189  0EDD                     	;# 
  3190  0EDE                     	;# 
  3191  0EDF                     	;# 
  3192  0EE0                     	;# 
  3193  0EE1                     	;# 
  3194  0EE1                     	;# 
  3195  0EE2                     	;# 
  3196  0EE3                     	;# 
  3197  0EE3                     	;# 
  3198  0EE4                     	;# 
  3199  0EE5                     	;# 
  3200  0EE5                     	;# 
  3201  0EE6                     	;# 
  3202  0EE7                     	;# 
  3203  0EE7                     	;# 
  3204  0EE8                     	;# 
  3205  0EE9                     	;# 
  3206  0EEA                     	;# 
  3207  0EEB                     	;# 
  3208  0EEC                     	;# 
  3209  0EED                     	;# 
  3210  0EEE                     	;# 
  3211  0EEF                     	;# 
  3212  0F11                     	;# 
  3213  0F12                     	;# 
  3214  0F13                     	;# 
  3215  0F14                     	;# 
  3216  0F15                     	;# 
  3217  0F16                     	;# 
  3218  0F17                     	;# 
  3219  0F18                     	;# 
  3220  0F19                     	;# 
  3221  0F1A                     	;# 
  3222  0F1B                     	;# 
  3223  0F1C                     	;# 
  3224  0F1D                     	;# 
  3225  0F1E                     	;# 
  3226  0F1F                     	;# 
  3227  0F20                     	;# 
  3228  0F21                     	;# 
  3229  0F21                     	;# 
  3230  0F22                     	;# 
  3231  0F23                     	;# 
  3232  0F23                     	;# 
  3233  0F24                     	;# 
  3234  0F25                     	;# 
  3235  0F25                     	;# 
  3236  0F26                     	;# 
  3237  0F27                     	;# 
  3238  0F27                     	;# 
  3239  0F28                     	;# 
  3240  0F29                     	;# 
  3241  0F2A                     	;# 
  3242  0F2B                     	;# 
  3243  0F2C                     	;# 
  3244  0F2D                     	;# 
  3245  0F2E                     	;# 
  3246  0F2F                     	;# 
  3247  0FE4                     	;# 
  3248  0FE5                     	;# 
  3249  0FE6                     	;# 
  3250  0FE7                     	;# 
  3251  0FE8                     	;# 
  3252  0FE9                     	;# 
  3253  0FEA                     	;# 
  3254  0FEB                     	;# 
  3255  0FED                     	;# 
  3256  0FEE                     	;# 
  3257  0FEF                     	;# 
  3258  0000                     	;# 
  3259  0001                     	;# 
  3260  0002                     	;# 
  3261  0003                     	;# 
  3262  0004                     	;# 
  3263  0005                     	;# 
  3264  0006                     	;# 
  3265  0007                     	;# 
  3266  0008                     	;# 
  3267  0009                     	;# 
  3268  000A                     	;# 
  3269  000B                     	;# 
  3270  000C                     	;# 
  3271  000D                     	;# 
  3272  000E                     	;# 
  3273  0010                     	;# 
  3274  0011                     	;# 
  3275  0012                     	;# 
  3276  0013                     	;# 
  3277  0014                     	;# 
  3278  0015                     	;# 
  3279  0016                     	;# 
  3280  0016                     	;# 
  3281  0017                     	;# 
  3282  0018                     	;# 
  3283  0019                     	;# 
  3284  001A                     	;# 
  3285  001B                     	;# 
  3286  001C                     	;# 
  3287  008C                     	;# 
  3288  008D                     	;# 
  3289  008E                     	;# 
  3290  0090                     	;# 
  3291  0091                     	;# 
  3292  0092                     	;# 
  3293  0093                     	;# 
  3294  0094                     	;# 
  3295  0095                     	;# 
  3296  0096                     	;# 
  3297  0097                     	;# 
  3298  0098                     	;# 
  3299  0099                     	;# 
  3300  009A                     	;# 
  3301  009B                     	;# 
  3302  009B                     	;# 
  3303  009C                     	;# 
  3304  009D                     	;# 
  3305  009E                     	;# 
  3306  009F                     	;# 
  3307  010C                     	;# 
  3308  010D                     	;# 
  3309  010E                     	;# 
  3310  0111                     	;# 
  3311  0112                     	;# 
  3312  0113                     	;# 
  3313  0114                     	;# 
  3314  0115                     	;# 
  3315  0116                     	;# 
  3316  0117                     	;# 
  3317  0118                     	;# 
  3318  0119                     	;# 
  3319  011A                     	;# 
  3320  011B                     	;# 
  3321  011C                     	;# 
  3322  011D                     	;# 
  3323  011D                     	;# 
  3324  011D                     	;# 
  3325  011E                     	;# 
  3326  011F                     	;# 
  3327  018C                     	;# 
  3328  018D                     	;# 
  3329  018E                     	;# 
  3330  0191                     	;# 
  3331  0191                     	;# 
  3332  0192                     	;# 
  3333  0193                     	;# 
  3334  0193                     	;# 
  3335  0193                     	;# 
  3336  0194                     	;# 
  3337  0195                     	;# 
  3338  0196                     	;# 
  3339  0197                     	;# 
  3340  0199                     	;# 
  3341  0199                     	;# 
  3342  0199                     	;# 
  3343  019A                     	;# 
  3344  019A                     	;# 
  3345  019A                     	;# 
  3346  019B                     	;# 
  3347  019B                     	;# 
  3348  019B                     	;# 
  3349  019B                     	;# 
  3350  019B                     	;# 
  3351  019C                     	;# 
  3352  019C                     	;# 
  3353  019C                     	;# 
  3354  019D                     	;# 
  3355  019D                     	;# 
  3356  019D                     	;# 
  3357  019E                     	;# 
  3358  019E                     	;# 
  3359  019E                     	;# 
  3360  019F                     	;# 
  3361  019F                     	;# 
  3362  019F                     	;# 
  3363  019F                     	;# 
  3364  019F                     	;# 
  3365  020C                     	;# 
  3366  020D                     	;# 
  3367  020E                     	;# 
  3368  0210                     	;# 
  3369  0211                     	;# 
  3370  0211                     	;# 
  3371  0212                     	;# 
  3372  0212                     	;# 
  3373  0213                     	;# 
  3374  0213                     	;# 
  3375  0214                     	;# 
  3376  0214                     	;# 
  3377  0215                     	;# 
  3378  0215                     	;# 
  3379  0215                     	;# 
  3380  0215                     	;# 
  3381  0216                     	;# 
  3382  0216                     	;# 
  3383  0217                     	;# 
  3384  0217                     	;# 
  3385  028C                     	;# 
  3386  028D                     	;# 
  3387  028E                     	;# 
  3388  0291                     	;# 
  3389  0291                     	;# 
  3390  0292                     	;# 
  3391  0293                     	;# 
  3392  0298                     	;# 
  3393  0298                     	;# 
  3394  0299                     	;# 
  3395  029A                     	;# 
  3396  030C                     	;# 
  3397  030D                     	;# 
  3398  030E                     	;# 
  3399  0311                     	;# 
  3400  0311                     	;# 
  3401  0312                     	;# 
  3402  0313                     	;# 
  3403  038C                     	;# 
  3404  038D                     	;# 
  3405  038E                     	;# 
  3406  0390                     	;# 
  3407  0391                     	;# 
  3408  0392                     	;# 
  3409  0393                     	;# 
  3410  0394                     	;# 
  3411  0395                     	;# 
  3412  0396                     	;# 
  3413  0397                     	;# 
  3414  0398                     	;# 
  3415  0399                     	;# 
  3416  039D                     	;# 
  3417  039E                     	;# 
  3418  039F                     	;# 
  3419  0511                     	;# 
  3420  0513                     	;# 
  3421  051A                     	;# 
  3422  0591                     	;# 
  3423  0592                     	;# 
  3424  0593                     	;# 
  3425  0594                     	;# 
  3426  0595                     	;# 
  3427  0596                     	;# 
  3428  0E91                     	;# 
  3429  0E92                     	;# 
  3430  0E93                     	;# 
  3431  0E94                     	;# 
  3432  0E95                     	;# 
  3433  0E96                     	;# 
  3434  0E97                     	;# 
  3435  0E98                     	;# 
  3436  0E99                     	;# 
  3437  0E9A                     	;# 
  3438  0E9B                     	;# 
  3439  0E9C                     	;# 
  3440  0E9D                     	;# 
  3441  0E9E                     	;# 
  3442  0E9F                     	;# 
  3443  0EA0                     	;# 
  3444  0EA1                     	;# 
  3445  0EA1                     	;# 
  3446  0EA2                     	;# 
  3447  0EA3                     	;# 
  3448  0EA3                     	;# 
  3449  0EA4                     	;# 
  3450  0EA5                     	;# 
  3451  0EA5                     	;# 
  3452  0EA6                     	;# 
  3453  0EA7                     	;# 
  3454  0EA7                     	;# 
  3455  0EA8                     	;# 
  3456  0EA9                     	;# 
  3457  0EAA                     	;# 
  3458  0EAB                     	;# 
  3459  0EAC                     	;# 
  3460  0EAD                     	;# 
  3461  0EAE                     	;# 
  3462  0EAF                     	;# 
  3463  0EB1                     	;# 
  3464  0EB2                     	;# 
  3465  0EB3                     	;# 
  3466  0EB4                     	;# 
  3467  0EB5                     	;# 
  3468  0EB6                     	;# 
  3469  0EB7                     	;# 
  3470  0EB8                     	;# 
  3471  0EB9                     	;# 
  3472  0EBA                     	;# 
  3473  0EBB                     	;# 
  3474  0EBC                     	;# 
  3475  0EBD                     	;# 
  3476  0EBE                     	;# 
  3477  0EBF                     	;# 
  3478  0EC0                     	;# 
  3479  0EC1                     	;# 
  3480  0EC1                     	;# 
  3481  0EC2                     	;# 
  3482  0EC3                     	;# 
  3483  0EC3                     	;# 
  3484  0EC4                     	;# 
  3485  0EC5                     	;# 
  3486  0EC5                     	;# 
  3487  0EC6                     	;# 
  3488  0EC7                     	;# 
  3489  0EC7                     	;# 
  3490  0EC8                     	;# 
  3491  0EC9                     	;# 
  3492  0ECA                     	;# 
  3493  0ECB                     	;# 
  3494  0ECC                     	;# 
  3495  0ECD                     	;# 
  3496  0ECE                     	;# 
  3497  0ECF                     	;# 
  3498  0ED1                     	;# 
  3499  0ED2                     	;# 
  3500  0ED3                     	;# 
  3501  0ED4                     	;# 
  3502  0ED5                     	;# 
  3503  0ED6                     	;# 
  3504  0ED7                     	;# 
  3505  0ED8                     	;# 
  3506  0ED9                     	;# 
  3507  0EDA                     	;# 
  3508  0EDB                     	;# 
  3509  0EDC                     	;# 
  3510  0EDD                     	;# 
  3511  0EDE                     	;# 
  3512  0EDF                     	;# 
  3513  0EE0                     	;# 
  3514  0EE1                     	;# 
  3515  0EE1                     	;# 
  3516  0EE2                     	;# 
  3517  0EE3                     	;# 
  3518  0EE3                     	;# 
  3519  0EE4                     	;# 
  3520  0EE5                     	;# 
  3521  0EE5                     	;# 
  3522  0EE6                     	;# 
  3523  0EE7                     	;# 
  3524  0EE7                     	;# 
  3525  0EE8                     	;# 
  3526  0EE9                     	;# 
  3527  0EEA                     	;# 
  3528  0EEB                     	;# 
  3529  0EEC                     	;# 
  3530  0EED                     	;# 
  3531  0EEE                     	;# 
  3532  0EEF                     	;# 
  3533  0F11                     	;# 
  3534  0F12                     	;# 
  3535  0F13                     	;# 
  3536  0F14                     	;# 
  3537  0F15                     	;# 
  3538  0F16                     	;# 
  3539  0F17                     	;# 
  3540  0F18                     	;# 
  3541  0F19                     	;# 
  3542  0F1A                     	;# 
  3543  0F1B                     	;# 
  3544  0F1C                     	;# 
  3545  0F1D                     	;# 
  3546  0F1E                     	;# 
  3547  0F1F                     	;# 
  3548  0F20                     	;# 
  3549  0F21                     	;# 
  3550  0F21                     	;# 
  3551  0F22                     	;# 
  3552  0F23                     	;# 
  3553  0F23                     	;# 
  3554  0F24                     	;# 
  3555  0F25                     	;# 
  3556  0F25                     	;# 
  3557  0F26                     	;# 
  3558  0F27                     	;# 
  3559  0F27                     	;# 
  3560  0F28                     	;# 
  3561  0F29                     	;# 
  3562  0F2A                     	;# 
  3563  0F2B                     	;# 
  3564  0F2C                     	;# 
  3565  0F2D                     	;# 
  3566  0F2E                     	;# 
  3567  0F2F                     	;# 
  3568  0FE4                     	;# 
  3569  0FE5                     	;# 
  3570  0FE6                     	;# 
  3571  0FE7                     	;# 
  3572  0FE8                     	;# 
  3573  0FE9                     	;# 
  3574  0FEA                     	;# 
  3575  0FEB                     	;# 
  3576  0FED                     	;# 
  3577  0FEE                     	;# 
  3578  0FEF                     	;# 
  3579  0000                     	;# 
  3580  0001                     	;# 
  3581  0002                     	;# 
  3582  0003                     	;# 
  3583  0004                     	;# 
  3584  0005                     	;# 
  3585  0006                     	;# 
  3586  0007                     	;# 
  3587  0008                     	;# 
  3588  0009                     	;# 
  3589  000A                     	;# 
  3590  000B                     	;# 
  3591  000C                     	;# 
  3592  000D                     	;# 
  3593  000E                     	;# 
  3594  0010                     	;# 
  3595  0011                     	;# 
  3596  0012                     	;# 
  3597  0013                     	;# 
  3598  0014                     	;# 
  3599  0015                     	;# 
  3600  0016                     	;# 
  3601  0016                     	;# 
  3602  0017                     	;# 
  3603  0018                     	;# 
  3604  0019                     	;# 
  3605  001A                     	;# 
  3606  001B                     	;# 
  3607  001C                     	;# 
  3608  008C                     	;# 
  3609  008D                     	;# 
  3610  008E                     	;# 
  3611  0090                     	;# 
  3612  0091                     	;# 
  3613  0092                     	;# 
  3614  0093                     	;# 
  3615  0094                     	;# 
  3616  0095                     	;# 
  3617  0096                     	;# 
  3618  0097                     	;# 
  3619  0098                     	;# 
  3620  0099                     	;# 
  3621  009A                     	;# 
  3622  009B                     	;# 
  3623  009B                     	;# 
  3624  009C                     	;# 
  3625  009D                     	;# 
  3626  009E                     	;# 
  3627  009F                     	;# 
  3628  010C                     	;# 
  3629  010D                     	;# 
  3630  010E                     	;# 
  3631  0111                     	;# 
  3632  0112                     	;# 
  3633  0113                     	;# 
  3634  0114                     	;# 
  3635  0115                     	;# 
  3636  0116                     	;# 
  3637  0117                     	;# 
  3638  0118                     	;# 
  3639  0119                     	;# 
  3640  011A                     	;# 
  3641  011B                     	;# 
  3642  011C                     	;# 
  3643  011D                     	;# 
  3644  011D                     	;# 
  3645  011D                     	;# 
  3646  011E                     	;# 
  3647  011F                     	;# 
  3648  018C                     	;# 
  3649  018D                     	;# 
  3650  018E                     	;# 
  3651  0191                     	;# 
  3652  0191                     	;# 
  3653  0192                     	;# 
  3654  0193                     	;# 
  3655  0193                     	;# 
  3656  0193                     	;# 
  3657  0194                     	;# 
  3658  0195                     	;# 
  3659  0196                     	;# 
  3660  0197                     	;# 
  3661  0199                     	;# 
  3662  0199                     	;# 
  3663  0199                     	;# 
  3664  019A                     	;# 
  3665  019A                     	;# 
  3666  019A                     	;# 
  3667  019B                     	;# 
  3668  019B                     	;# 
  3669  019B                     	;# 
  3670  019B                     	;# 
  3671  019B                     	;# 
  3672  019C                     	;# 
  3673  019C                     	;# 
  3674  019C                     	;# 
  3675  019D                     	;# 
  3676  019D                     	;# 
  3677  019D                     	;# 
  3678  019E                     	;# 
  3679  019E                     	;# 
  3680  019E                     	;# 
  3681  019F                     	;# 
  3682  019F                     	;# 
  3683  019F                     	;# 
  3684  019F                     	;# 
  3685  019F                     	;# 
  3686  020C                     	;# 
  3687  020D                     	;# 
  3688  020E                     	;# 
  3689  0210                     	;# 
  3690  0211                     	;# 
  3691  0211                     	;# 
  3692  0212                     	;# 
  3693  0212                     	;# 
  3694  0213                     	;# 
  3695  0213                     	;# 
  3696  0214                     	;# 
  3697  0214                     	;# 
  3698  0215                     	;# 
  3699  0215                     	;# 
  3700  0215                     	;# 
  3701  0215                     	;# 
  3702  0216                     	;# 
  3703  0216                     	;# 
  3704  0217                     	;# 
  3705  0217                     	;# 
  3706  028C                     	;# 
  3707  028D                     	;# 
  3708  028E                     	;# 
  3709  0291                     	;# 
  3710  0291                     	;# 
  3711  0292                     	;# 
  3712  0293                     	;# 
  3713  0298                     	;# 
  3714  0298                     	;# 
  3715  0299                     	;# 
  3716  029A                     	;# 
  3717  030C                     	;# 
  3718  030D                     	;# 
  3719  030E                     	;# 
  3720  0311                     	;# 
  3721  0311                     	;# 
  3722  0312                     	;# 
  3723  0313                     	;# 
  3724  038C                     	;# 
  3725  038D                     	;# 
  3726  038E                     	;# 
  3727  0390                     	;# 
  3728  0391                     	;# 
  3729  0392                     	;# 
  3730  0393                     	;# 
  3731  0394                     	;# 
  3732  0395                     	;# 
  3733  0396                     	;# 
  3734  0397                     	;# 
  3735  0398                     	;# 
  3736  0399                     	;# 
  3737  039D                     	;# 
  3738  039E                     	;# 
  3739  039F                     	;# 
  3740  0511                     	;# 
  3741  0513                     	;# 
  3742  051A                     	;# 
  3743  0591                     	;# 
  3744  0592                     	;# 
  3745  0593                     	;# 
  3746  0594                     	;# 
  3747  0595                     	;# 
  3748  0596                     	;# 
  3749  0E91                     	;# 
  3750  0E92                     	;# 
  3751  0E93                     	;# 
  3752  0E94                     	;# 
  3753  0E95                     	;# 
  3754  0E96                     	;# 
  3755  0E97                     	;# 
  3756  0E98                     	;# 
  3757  0E99                     	;# 
  3758  0E9A                     	;# 
  3759  0E9B                     	;# 
  3760  0E9C                     	;# 
  3761  0E9D                     	;# 
  3762  0E9E                     	;# 
  3763  0E9F                     	;# 
  3764  0EA0                     	;# 
  3765  0EA1                     	;# 
  3766  0EA1                     	;# 
  3767  0EA2                     	;# 
  3768  0EA3                     	;# 
  3769  0EA3                     	;# 
  3770  0EA4                     	;# 
  3771  0EA5                     	;# 
  3772  0EA5                     	;# 
  3773  0EA6                     	;# 
  3774  0EA7                     	;# 
  3775  0EA7                     	;# 
  3776  0EA8                     	;# 
  3777  0EA9                     	;# 
  3778  0EAA                     	;# 
  3779  0EAB                     	;# 
  3780  0EAC                     	;# 
  3781  0EAD                     	;# 
  3782  0EAE                     	;# 
  3783  0EAF                     	;# 
  3784  0EB1                     	;# 
  3785  0EB2                     	;# 
  3786  0EB3                     	;# 
  3787  0EB4                     	;# 
  3788  0EB5                     	;# 
  3789  0EB6                     	;# 
  3790  0EB7                     	;# 
  3791  0EB8                     	;# 
  3792  0EB9                     	;# 
  3793  0EBA                     	;# 
  3794  0EBB                     	;# 
  3795  0EBC                     	;# 
  3796  0EBD                     	;# 
  3797  0EBE                     	;# 
  3798  0EBF                     	;# 
  3799  0EC0                     	;# 
  3800  0EC1                     	;# 
  3801  0EC1                     	;# 
  3802  0EC2                     	;# 
  3803  0EC3                     	;# 
  3804  0EC3                     	;# 
  3805  0EC4                     	;# 
  3806  0EC5                     	;# 
  3807  0EC5                     	;# 
  3808  0EC6                     	;# 
  3809  0EC7                     	;# 
  3810  0EC7                     	;# 
  3811  0EC8                     	;# 
  3812  0EC9                     	;# 
  3813  0ECA                     	;# 
  3814  0ECB                     	;# 
  3815  0ECC                     	;# 
  3816  0ECD                     	;# 
  3817  0ECE                     	;# 
  3818  0ECF                     	;# 
  3819  0ED1                     	;# 
  3820  0ED2                     	;# 
  3821  0ED3                     	;# 
  3822  0ED4                     	;# 
  3823  0ED5                     	;# 
  3824  0ED6                     	;# 
  3825  0ED7                     	;# 
  3826  0ED8                     	;# 
  3827  0ED9                     	;# 
  3828  0EDA                     	;# 
  3829  0EDB                     	;# 
  3830  0EDC                     	;# 
  3831  0EDD                     	;# 
  3832  0EDE                     	;# 
  3833  0EDF                     	;# 
  3834  0EE0                     	;# 
  3835  0EE1                     	;# 
  3836  0EE1                     	;# 
  3837  0EE2                     	;# 
  3838  0EE3                     	;# 
  3839  0EE3                     	;# 
  3840  0EE4                     	;# 
  3841  0EE5                     	;# 
  3842  0EE5                     	;# 
  3843  0EE6                     	;# 
  3844  0EE7                     	;# 
  3845  0EE7                     	;# 
  3846  0EE8                     	;# 
  3847  0EE9                     	;# 
  3848  0EEA                     	;# 
  3849  0EEB                     	;# 
  3850  0EEC                     	;# 
  3851  0EED                     	;# 
  3852  0EEE                     	;# 
  3853  0EEF                     	;# 
  3854  0F11                     	;# 
  3855  0F12                     	;# 
  3856  0F13                     	;# 
  3857  0F14                     	;# 
  3858  0F15                     	;# 
  3859  0F16                     	;# 
  3860  0F17                     	;# 
  3861  0F18                     	;# 
  3862  0F19                     	;# 
  3863  0F1A                     	;# 
  3864  0F1B                     	;# 
  3865  0F1C                     	;# 
  3866  0F1D                     	;# 
  3867  0F1E                     	;# 
  3868  0F1F                     	;# 
  3869  0F20                     	;# 
  3870  0F21                     	;# 
  3871  0F21                     	;# 
  3872  0F22                     	;# 
  3873  0F23                     	;# 
  3874  0F23                     	;# 
  3875  0F24                     	;# 
  3876  0F25                     	;# 
  3877  0F25                     	;# 
  3878  0F26                     	;# 
  3879  0F27                     	;# 
  3880  0F27                     	;# 
  3881  0F28                     	;# 
  3882  0F29                     	;# 
  3883  0F2A                     	;# 
  3884  0F2B                     	;# 
  3885  0F2C                     	;# 
  3886  0F2D                     	;# 
  3887  0F2E                     	;# 
  3888  0F2F                     	;# 
  3889  0FE4                     	;# 
  3890  0FE5                     	;# 
  3891  0FE6                     	;# 
  3892  0FE7                     	;# 
  3893  0FE8                     	;# 
  3894  0FE9                     	;# 
  3895  0FEA                     	;# 
  3896  0FEB                     	;# 
  3897  0FED                     	;# 
  3898  0FEE                     	;# 
  3899  0FEF                     	;# 
  3900                           
  3901                           	psect	strings
  3902  0800                     __pstrings:	
  3903  0800                     __stringtab:	
  3904  0800  3400               	retlw	0
  3905  0801                     __end_of__stringtab:	
  3906  0801                     _dpowers:	
  3907  0801  3401               	retlw	1
  3908  0802  3400               	retlw	0
  3909  0803  340A               	retlw	10
  3910  0804  3400               	retlw	0
  3911  0805  3464               	retlw	100
  3912  0806  3400               	retlw	0
  3913  0807  34E8               	retlw	232
  3914  0808  3403               	retlw	3
  3915  0809  3410               	retlw	16
  3916  080A  3427               	retlw	39
  3917  080B                     __end_of_dpowers:	
  3918  000B                     _INTCON	set	11
  3919  0015                     _TMR0	set	21
  3920  008E                     _ADIF	set	142
  3921  0018                     _CARRY	set	24
  3922  0094                     _EEIF	set	148
  3923  005F                     _GIE	set	95
  3924  0067                     _RA7	set	103
  3925  0072                     _RC2	set	114
  3926  008D                     _RCIF	set	141
  3927  005D                     _TMR0IE	set	93
  3928  005A                     _TMR0IF	set	90
  3929  008C                     _TXIF	set	140
  3930  009D                     _ADCON0	set	157
  3931  009E                     _ADCON1	set	158
  3932  009F                     _ADCON2	set	159
  3933  009C                     _ADRESH	set	156
  3934  009B                     _ADRESL	set	155
  3935  0095                     _OPTION_REG	set	149
  3936  0099                     _OSCCON	set	153
  3937  008C                     _TRISA	set	140
  3938  008D                     _TRISB	set	141
  3939  048E                     _ADIE	set	1166
  3940  04E8                     _ADON	set	1256
  3941  04E9                     _DONE	set	1257
  3942  04E9                     _GO	set	1257
  3943  048D                     _RCIE	set	1165
  3944  0462                     _TRISA2	set	1122
  3945  0465                     _TRISA5	set	1125
  3946  0466                     _TRISA6	set	1126
  3947  0467                     _TRISA7	set	1127
  3948  0470                     _TRISC0	set	1136
  3949  0471                     _TRISC1	set	1137
  3950  0472                     _TRISC2	set	1138
  3951  0476                     _TRISC6	set	1142
  3952  0477                     _TRISC7	set	1143
  3953  048C                     _TXIE	set	1164
  3954  0118                     _DAC1CON0	set	280
  3955  0119                     _DAC1CON1	set	281
  3956  08C7                     _DAC1EN	set	2247
  3957  08C0                     _DAC1NSS	set	2240
  3958  08C5                     _DAC1OE1	set	2245
  3959  0191                     _EEADR	set	401
  3960  018C                     _ANSELA	set	396
  3961  018D                     _ANSELB	set	397
  3962  018E                     _ANSELC	set	398
  3963  0195                     _EECON1	set	405
  3964  0196                     _EECON2	set	406
  3965  0193                     _EEDATA	set	403
  3966  0199                     _RCREG	set	409
  3967  019C                     _SPBRGH	set	412
  3968  019B                     _SPBRGL	set	411
  3969  019A                     _TXREG	set	410
  3970  0C62                     _ANSA2	set	3170
  3971  0C65                     _ANSA5	set	3173
  3972  0C67                     _ANSA7	set	3175
  3973  0CFB                     _BRG16	set	3323
  3974  0CF2                     _BRGH	set	3314
  3975  0CAE                     _CFGS	set	3246
  3976  0CEC                     _CREN	set	3308
  3977  0CAF                     _EEPGD	set	3247
  3978  0CA8                     _RD	set	3240
  3979  0CEF                     _SPEN	set	3311
  3980  0CF4                     _SYNC	set	3316
  3981  0CF5                     _TXEN	set	3317
  3982  0CA9                     _WR	set	3241
  3983  0CAA                     _WREN	set	3242
  3984  0293                     _CCP1CON	set	659
  3985  0291                     _CCPR1L	set	657
  3986  0E94                     _PSMC1CLK	set	3732
  3987  0E91                     _PSMC1CON	set	3729
  3988  0EAA                     _PSMC1DBF	set	3754
  3989  0EA9                     _PSMC1DBR	set	3753
  3990  0EA4                     _PSMC1DCH	set	3748
  3991  0EA3                     _PSMC1DCL	set	3747
  3992  0E9B                     _PSMC1DCSbits	set	3739
  3993  0EA0                     _PSMC1INT	set	3744
  3994  0E95                     _PSMC1OEN	set	3733
  3995  0EA2                     _PSMC1PHH	set	3746
  3996  0EA1                     _PSMC1PHL	set	3745
  3997  0E9A                     _PSMC1PHSbits	set	3738
  3998  0E96                     _PSMC1POL	set	3734
  3999  0EA6                     _PSMC1PRH	set	3750
  4000  0EA5                     _PSMC1PRL	set	3749
  4001  0E9C                     _PSMC1PRSbits	set	3740
  4002  0EAE                     _PSMC1STR0	set	3758
  4003  7504                     _P1TPRIE	set	29956
  4004  7500                     _P1TPRIF	set	29952
  4005  748E                     _PSMC1LD	set	29838
  4006  080B                     __stringdata:	
  4007  080B                     STR_2:	
  4008  080B  3425               	retlw	37	;'%'
  4009  080C  3430               	retlw	48	;'0'
  4010  080D  342E               	retlw	46	;'.'
  4011  080E  3434               	retlw	52	;'4'
  4012  080F  3464               	retlw	100	;'d'
  4013  0810  3441               	retlw	65	;'A'
  4014  0811  3425               	retlw	37	;'%'
  4015  0812  3430               	retlw	48	;'0'
  4016  0813  342E               	retlw	46	;'.'
  4017  0814  3434               	retlw	52	;'4'
  4018  0815  3464               	retlw	100	;'d'
  4019  0816  340D               	retlw	13
  4020  0817  340A               	retlw	10
  4021  0818  3400               	retlw	0
  4022  0819                     STR_1:	
  4023  0819  3425               	retlw	37	;'%'
  4024  081A  3464               	retlw	100	;'d'
  4025  081B  340D               	retlw	13
  4026  081C  340A               	retlw	10
  4027  081D  340A               	retlw	10
  4028  081E  3400               	retlw	0
  4029  081F                     __end_of__stringdata:	
  4030                           
  4031                           ; #config settings
  4032  0000                     
  4033                           	psect	cinit
  4034  012A                     start_initialization:	
  4035  012A                     __initialization:	
  4036                           
  4037                           ; Clear objects allocated to BITBANK0
  4038  012A  01E7               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  4039                           
  4040                           ; Clear objects allocated to BANK0
  4041  012B  3054               	movlw	low __pbssBANK0
  4042  012C  0084               	movwf	4
  4043  012D  3000               	movlw	high __pbssBANK0
  4044  012E  0085               	movwf	5
  4045  012F  3013               	movlw	19
  4046  0130  3197  27D5  3181   	fcall	clear_ram0
  4047                           
  4048                           ; Clear objects allocated to BANK1
  4049  0133  30A0               	movlw	low __pbssBANK1
  4050  0134  0084               	movwf	4
  4051  0135  3000               	movlw	high __pbssBANK1
  4052  0136  0085               	movwf	5
  4053  0137  304F               	movlw	79
  4054  0138  3197  27D5  3181   	fcall	clear_ram0
  4055                           
  4056                           ; Clear objects allocated to BANK2
  4057  013B  3020               	movlw	low __pbssBANK2
  4058  013C  0084               	movwf	4
  4059  013D  3001               	movlw	high __pbssBANK2
  4060  013E  0085               	movwf	5
  4061  013F  304A               	movlw	74
  4062  0140  3197  27D5  3181   	fcall	clear_ram0
  4063                           
  4064                           ; Clear objects allocated to BANK3
  4065  0143  30A0               	movlw	low __pbssBANK3
  4066  0144  0084               	movwf	4
  4067  0145  3001               	movlw	high __pbssBANK3
  4068  0146  0085               	movwf	5
  4069  0147  3014               	movlw	20
  4070  0148  3197  27D5         	fcall	clear_ram0
  4071  014A                     end_of_initialization:	
  4072                           ;End of C runtime variable initialization code
  4073                           
  4074  014A                     __end_of__initialization:	
  4075  014A  0020               	movlb	0
  4076  014B  3181  294D         	ljmp	_main	;jump to C main() function
  4077                           
  4078                           	psect	bitbssBANK0
  4079  0338                     __pbitbssBANK0:	
  4080  0338                     _flgADCAryFull:	
  4081  0338                     	ds	1
  4082  0339                     _flgPSMC:	
  4083  0339                     	ds	1
  4084  033A                     _flgTicTac:	
  4085  033A                     	ds	1
  4086                           
  4087                           	psect	bssBANK0
  4088  0054                     __pbssBANK0:	
  4089  0054                     _Vavr:	
  4090  0054                     	ds	2
  4091  0056                     _Vin:	
  4092  0056                     	ds	2
  4093  0058                     _Vin2:	
  4094  0058                     	ds	2
  4095  005A                     _Vin3:	
  4096  005A                     	ds	2
  4097  005C                     _Vin4:	
  4098  005C                     	ds	2
  4099  005E                     _vSenDiff:	
  4100  005E                     	ds	2
  4101  0060                     main@vADCAN9:	
  4102  0060                     	ds	2
  4103  0062                     _UART_cntRxUART:	
  4104  0062                     	ds	1
  4105  0063                     _UART_cntTxUART:	
  4106  0063                     	ds	1
  4107  0064                     _Voff:	
  4108  0064                     	ds	1
  4109  0065                     _vPWM:	
  4110  0065                     	ds	2
  4111                           
  4112                           	psect	bssBANK1
  4113  00A0                     __pbssBANK1:	
  4114  00A0                     SearchingOffSet@uVout:	
  4115  00A0                     	ds	4
  4116  00A4                     _Sum_e:	
  4117  00A4                     	ds	4
  4118  00A8                     _vAvg:	
  4119  00A8                     	ds	4
  4120  00AC                     _vAvg_Old:	
  4121  00AC                     	ds	4
  4122  00B0                     _ADC_vADC:	
  4123  00B0                     	ds	2
  4124  00B2                     _Vavr_max:	
  4125  00B2                     	ds	2
  4126  00B4                     _Vavr_old:	
  4127  00B4                     	ds	2
  4128  00B6                     _Vin5:	
  4129  00B6                     	ds	2
  4130  00B8                     _Vin6:	
  4131  00B8                     	ds	2
  4132  00BA                     _Vin7:	
  4133  00BA                     	ds	2
  4134  00BC                     _Vin8:	
  4135  00BC                     	ds	2
  4136  00BE                     _cntBIAS:	
  4137  00BE                     	ds	2
  4138  00C0                     _cntCur:	
  4139  00C0                     	ds	2
  4140  00C2                     _cntNoPres:	
  4141  00C2                     	ds	2
  4142  00C4                     _cntPWM:	
  4143  00C4                     	ds	2
  4144  00C6                     _cntStepDwn:	
  4145  00C6                     	ds	2
  4146  00C8                     _counter:	
  4147  00C8                     	ds	2
  4148  00CA                     _vADCAN0:	
  4149  00CA                     	ds	2
  4150  00CC                     _vADCANFlt:	
  4151  00CC                     	ds	2
  4152  00CE                     _vADCANOld:	
  4153  00CE                     	ds	2
  4154  00D0                     _vADCANOld1:	
  4155  00D0                     	ds	2
  4156  00D2                     _vPWM_old:	
  4157  00D2                     	ds	2
  4158  00D4                     _vPeakVld:	
  4159  00D4                     	ds	2
  4160  00D6                     _vSenOff:	
  4161  00D6                     	ds	2
  4162  00D8                     _vSenOld:	
  4163  00D8                     	ds	2
  4164  00DA                     main@vADCAN9_Old:	
  4165  00DA                     	ds	2
  4166  00DC                     main@vUART:	
  4167  00DC                     	ds	2
  4168  00DE                     main@vUART_off:	
  4169  00DE                     	ds	2
  4170  00E0                     EEPROMWrite@cntOverTime:	
  4171  00E0                     	ds	1
  4172  00E1                     _ADCON0Tmp:	
  4173  00E1                     	ds	1
  4174  00E2                     _RA7Old:	
  4175  00E2                     	ds	1
  4176  00E3                     _Voff_old:	
  4177  00E3                     	ds	1
  4178  00E4                     _bFlg:	
  4179  00E4                     	ds	1
  4180  00E5                     _cntDiff:	
  4181  00E5                     	ds	1
  4182  00E6                     _cntPerd:	
  4183  00E6                     	ds	1
  4184  00E7                     _cntTurnOnDly_Offset:	
  4185  00E7                     	ds	1
  4186  00E8                     _cntUARTSend:	
  4187  00E8                     	ds	1
  4188  00E9                     _flgOffRls:	
  4189  00E9                     	ds	1
  4190  00EA                     _flgStepDwn:	
  4191  00EA                     	ds	1
  4192  00EB                     _flgTurnOnDly_Offset:	
  4193  00EB                     	ds	1
  4194  00EC                     _idxADC:	
  4195  00EC                     	ds	1
  4196  00ED                     _stLen:	
  4197  00ED                     	ds	1
  4198  00EE                     _stMAX:	
  4199  00EE                     	ds	1
  4200                           
  4201                           	psect	bssBANK2
  4202  0120                     __pbssBANK2:	
  4203  0120                     _ADC_vADCAry:	
  4204  0120                     	ds	20
  4205  0134                     _UART_chTxBuf:	
  4206  0134                     	ds	20
  4207  0148                     SearchingOffSet@error_old:	
  4208  0148                     	ds	4
  4209  014C                     _cntOS:	
  4210  014C                     	ds	4
  4211  0150                     _Voff_Old:	
  4212  0150                     	ds	2
  4213  0152                     _cntBlink:	
  4214  0152                     	ds	2
  4215  0154                     main@vADCAN9_mark:	
  4216  0154                     	ds	2
  4217  0156                     _chBufADC:	
  4218  0156                     	ds	20
  4219                           
  4220                           	psect	bssBANK3
  4221  01A0                     __pbssBANK3:	
  4222  01A0                     _UART_chRxBuf:	
  4223  01A0                     	ds	20
  4224                           
  4225                           	psect	clrtext
  4226  17D5                     clear_ram0:	
  4227                           ;	Called with FSR0 containing the base address, and
  4228                           ;	WREG with the size to clear
  4229                           
  4230  17D5  0064               	clrwdt	;clear the watchdog before getting into this loop
  4231  17D6                     clrloop0:	
  4232  17D6  0180               	clrf	0	;clear RAM location pointed to by FSR
  4233  17D7  3101               	addfsr 0,1
  4234  17D8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4235  17D9  2FD6               	goto	clrloop0	;have we reached the end yet?
  4236  17DA  3400               	retlw	0	;all done for this memory range, return
  4237                           
  4238                           	psect	cstackBANK3
  4239  01B4                     __pcstackBANK3:	
  4240  01B4                     main@stFinish:	
  4241                           
  4242                           ; 1 bytes @ 0x0
  4243  01B4                     	ds	1
  4244  01B5                     main@temp:	
  4245                           
  4246                           ; 2 bytes @ 0x1
  4247  01B5                     	ds	2
  4248  01B7                     main@i:	
  4249                           
  4250                           ; 1 bytes @ 0x3
  4251  01B7                     	ds	1
  4252  01B8                     main@i_335:	
  4253                           
  4254                           ; 1 bytes @ 0x4
  4255  01B8                     	ds	1
  4256  01B9                     main@i_342:	
  4257                           
  4258                           ; 1 bytes @ 0x5
  4259  01B9                     	ds	1
  4260  01BA                     main@i_341:	
  4261                           
  4262                           ; 1 bytes @ 0x6
  4263  01BA                     	ds	1
  4264  01BB                     main@stBlinking:	
  4265                           
  4266                           ; 1 bytes @ 0x7
  4267  01BB                     	ds	1
  4268                           
  4269                           	psect	cstackCOMMON
  4270  0070                     __pcstackCOMMON:	
  4271  0070                     ?_ConfigureOscillator:	
  4272  0070                     ?_InitApp:	
  4273                           ; 0 bytes @ 0x0
  4274                           
  4275  0070                     ?_DACSet:	
  4276                           ; 0 bytes @ 0x0
  4277                           
  4278  0070                     ?_DACInit:	
  4279                           ; 0 bytes @ 0x0
  4280                           
  4281  0070                     ?_DioIni:	
  4282                           ; 0 bytes @ 0x0
  4283                           
  4284  0070                     ?_isdigit:	
  4285                           ; 0 bytes @ 0x0
  4286                           
  4287  0070                     ?_PWMSetConfig:	
  4288                           ; 1 bit 
  4289                           
  4290  0070                     ?_PWMIni:	
  4291                           ; 0 bytes @ 0x0
  4292                           
  4293  0070                     ?_UARTIni:	
  4294                           ; 0 bytes @ 0x0
  4295                           
  4296  0070                     ?_isr:	
  4297                           ; 0 bytes @ 0x0
  4298                           
  4299  0070                     ?_main:	
  4300                           ; 0 bytes @ 0x0
  4301                           
  4302  0070                     ?i1___lmul:	
  4303                           ; 0 bytes @ 0x0
  4304                           
  4305  0070                     i1___lmul@multiplier:	
  4306                           ; 4 bytes @ 0x0
  4307                           
  4308                           
  4309                           ; 4 bytes @ 0x0
  4310  0070                     	ds	4
  4311  0074                     i1___lmul@multiplicand:	
  4312                           
  4313                           ; 4 bytes @ 0x4
  4314  0074                     	ds	4
  4315  0078                     ??i1___lmul:	
  4316  0078                     i1___lmul@product:	
  4317                           ; 0 bytes @ 0x8
  4318                           
  4319                           
  4320                           ; 4 bytes @ 0x8
  4321  0078                     	ds	4
  4322  007C                     ?i1_PWMSetPeriod:	
  4323  007C                     ?i1_PWMSetDutyCycle:	
  4324                           ; 0 bytes @ 0xC
  4325                           
  4326  007C                     i1PWMSetPeriod@cntPeriod:	
  4327                           ; 0 bytes @ 0xC
  4328                           
  4329  007C                     i1PWMSetDutyCycle@cntDutyCycle:	
  4330                           ; 2 bytes @ 0xC
  4331                           
  4332                           
  4333                           ; 2 bytes @ 0xC
  4334  007C                     	ds	2
  4335  007E                     ??i1_PWMSetPeriod:	
  4336  007E                     ??i1_PWMSetDutyCycle:	
  4337                           ; 0 bytes @ 0xE
  4338                           
  4339                           
  4340                           	psect	cstackBANK0
  4341  0020                     __pcstackBANK0:	
  4342                           ; 0 bytes @ 0xE
  4343                           
  4344  0020                     ??_isr:	
  4345                           
  4346                           ; 0 bytes @ 0x0
  4347  0020                     	ds	7
  4348  0027                     ?_PWMSetPhase:	
  4349  0027                     ??_ConfigureOscillator:	
  4350                           ; 0 bytes @ 0x7
  4351                           
  4352  0027                     ??_DACSet:	
  4353                           ; 0 bytes @ 0x7
  4354                           
  4355  0027                     ?_eeprom_write:	
  4356                           ; 0 bytes @ 0x7
  4357                           
  4358  0027                     ??_DACInit:	
  4359                           ; 0 bytes @ 0x7
  4360                           
  4361  0027                     ??_DioIni:	
  4362                           ; 0 bytes @ 0x7
  4363                           
  4364  0027                     ??_isdigit:	
  4365                           ; 0 bytes @ 0x7
  4366                           
  4367  0027                     ?_ADCIni:	
  4368                           ; 0 bytes @ 0x7
  4369                           
  4370  0027                     ??_UARTIni:	
  4371                           ; 0 bytes @ 0x7
  4372                           
  4373  0027                     ?_UARTSend:	
  4374                           ; 0 bytes @ 0x7
  4375                           
  4376  0027                     ?___bmul:	
  4377                           ; 1 bytes @ 0x7
  4378                           
  4379  0027                     ?_ReadADC:	
  4380                           ; 1 bytes @ 0x7
  4381                           
  4382  0027                     ?___awdiv:	
  4383                           ; 2 bytes @ 0x7
  4384                           
  4385  0027                     ?___awmod:	
  4386                           ; 2 bytes @ 0x7
  4387                           
  4388  0027                     ?___lwdiv:	
  4389                           ; 2 bytes @ 0x7
  4390                           
  4391  0027                     ?___wmul:	
  4392                           ; 2 bytes @ 0x7
  4393                           
  4394  0027                     ?___aldiv:	
  4395                           ; 2 bytes @ 0x7
  4396                           
  4397  0027                     ?___llmod:	
  4398                           ; 4 bytes @ 0x7
  4399                           
  4400  0027                     ?___lmul:	
  4401                           ; 4 bytes @ 0x7
  4402                           
  4403  0027                     ADCIni@Fosc:	
  4404                           ; 4 bytes @ 0x7
  4405                           
  4406  0027                     UARTSend@stLen:	
  4407                           ; 1 bytes @ 0x7
  4408                           
  4409  0027                     eeprom_write@value:	
  4410                           ; 1 bytes @ 0x7
  4411                           
  4412  0027                     ___bmul@multiplicand:	
  4413                           ; 1 bytes @ 0x7
  4414                           
  4415  0027                     _isdigit$628:	
  4416                           ; 1 bytes @ 0x7
  4417                           
  4418  0027                     PWMSetPhase@cntPhase:	
  4419                           ; 1 bytes @ 0x7
  4420                           
  4421  0027                     ___awdiv@divisor:	
  4422                           ; 2 bytes @ 0x7
  4423                           
  4424  0027                     ___awmod@divisor:	
  4425                           ; 2 bytes @ 0x7
  4426                           
  4427  0027                     ___lwdiv@divisor:	
  4428                           ; 2 bytes @ 0x7
  4429                           
  4430  0027                     ___wmul@multiplier:	
  4431                           ; 2 bytes @ 0x7
  4432                           
  4433  0027                     ___aldiv@divisor:	
  4434                           ; 2 bytes @ 0x7
  4435                           
  4436  0027                     ___llmod@divisor:	
  4437                           ; 4 bytes @ 0x7
  4438                           
  4439  0027                     ___lmul@multiplier:	
  4440                           ; 4 bytes @ 0x7
  4441                           
  4442                           
  4443                           ; 4 bytes @ 0x7
  4444  0027                     	ds	1
  4445  0028                     ??_eeprom_write:	
  4446  0028                     ??_ADCIni:	
  4447                           ; 0 bytes @ 0x8
  4448                           
  4449  0028                     ??_UARTSend:	
  4450                           ; 0 bytes @ 0x8
  4451                           
  4452  0028                     ??___bmul:	
  4453                           ; 0 bytes @ 0x8
  4454                           
  4455  0028                     DACSet@Val:	
  4456                           ; 0 bytes @ 0x8
  4457                           
  4458  0028                     isdigit@c:	
  4459                           ; 1 bytes @ 0x8
  4460                           
  4461                           
  4462                           ; 1 bytes @ 0x8
  4463  0028                     	ds	1
  4464  0029                     ??_PWMSetPhase:	
  4465  0029                     ??_ReadADC:	
  4466                           ; 0 bytes @ 0x9
  4467                           
  4468  0029                     ADCIni@ANx:	
  4469                           ; 0 bytes @ 0x9
  4470                           
  4471  0029                     ___bmul@product:	
  4472                           ; 1 bytes @ 0x9
  4473                           
  4474  0029                     ___awdiv@dividend:	
  4475                           ; 1 bytes @ 0x9
  4476                           
  4477  0029                     ___awmod@dividend:	
  4478                           ; 2 bytes @ 0x9
  4479                           
  4480  0029                     ___lwdiv@dividend:	
  4481                           ; 2 bytes @ 0x9
  4482                           
  4483  0029                     ___wmul@multiplicand:	
  4484                           ; 2 bytes @ 0x9
  4485                           
  4486                           
  4487                           ; 2 bytes @ 0x9
  4488  0029                     	ds	1
  4489  002A                     UARTSend@pData:	
  4490  002A                     eeprom_write@addr:	
  4491                           ; 1 bytes @ 0xA
  4492                           
  4493  002A                     ___bmul@multiplier:	
  4494                           ; 1 bytes @ 0xA
  4495                           
  4496                           
  4497                           ; 1 bytes @ 0xA
  4498  002A                     	ds	1
  4499  002B                     ??___awdiv:	
  4500  002B                     ??___awmod:	
  4501                           ; 0 bytes @ 0xB
  4502                           
  4503  002B                     ??___lwdiv:	
  4504                           ; 0 bytes @ 0xB
  4505                           
  4506  002B                     ??___wmul:	
  4507                           ; 0 bytes @ 0xB
  4508                           
  4509  002B                     ReadADC@ANx:	
  4510                           ; 0 bytes @ 0xB
  4511                           
  4512  002B                     UARTSend@i:	
  4513                           ; 1 bytes @ 0xB
  4514                           
  4515  002B                     ___wmul@product:	
  4516                           ; 2 bytes @ 0xB
  4517                           
  4518  002B                     ___aldiv@dividend:	
  4519                           ; 2 bytes @ 0xB
  4520                           
  4521  002B                     ___llmod@dividend:	
  4522                           ; 4 bytes @ 0xB
  4523                           
  4524  002B                     ___lmul@multiplicand:	
  4525                           ; 4 bytes @ 0xB
  4526                           
  4527                           
  4528                           ; 4 bytes @ 0xB
  4529  002B                     	ds	1
  4530  002C                     ___awdiv@counter:	
  4531  002C                     ___awmod@counter:	
  4532                           ; 1 bytes @ 0xC
  4533                           
  4534  002C                     ___lwdiv@counter:	
  4535                           ; 1 bytes @ 0xC
  4536                           
  4537  002C                     ReadADC@vADC:	
  4538                           ; 1 bytes @ 0xC
  4539                           
  4540                           
  4541                           ; 2 bytes @ 0xC
  4542  002C                     	ds	1
  4543  002D                     ___awdiv@sign:	
  4544  002D                     ___awmod@sign:	
  4545                           ; 1 bytes @ 0xD
  4546                           
  4547  002D                     ___lwdiv@quotient:	
  4548                           ; 1 bytes @ 0xD
  4549                           
  4550                           
  4551                           ; 2 bytes @ 0xD
  4552  002D                     	ds	1
  4553  002E                     ___awdiv@quotient:	
  4554                           
  4555                           ; 2 bytes @ 0xE
  4556  002E                     	ds	1
  4557  002F                     ??___aldiv:	
  4558  002F                     ??___llmod:	
  4559                           ; 0 bytes @ 0xF
  4560                           
  4561  002F                     ??___lmul:	
  4562                           ; 0 bytes @ 0xF
  4563                           
  4564  002F                     ?___lwmod:	
  4565                           ; 0 bytes @ 0xF
  4566                           
  4567  002F                     ___lwmod@divisor:	
  4568                           ; 2 bytes @ 0xF
  4569                           
  4570  002F                     ___lmul@product:	
  4571                           ; 2 bytes @ 0xF
  4572                           
  4573                           
  4574                           ; 4 bytes @ 0xF
  4575  002F                     	ds	1
  4576  0030                     ___aldiv@counter:	
  4577  0030                     ___llmod@counter:	
  4578                           ; 1 bytes @ 0x10
  4579                           
  4580                           
  4581                           ; 1 bytes @ 0x10
  4582  0030                     	ds	1
  4583  0031                     ___aldiv@sign:	
  4584  0031                     ___lwmod@dividend:	
  4585                           ; 1 bytes @ 0x11
  4586                           
  4587                           
  4588                           ; 2 bytes @ 0x11
  4589  0031                     	ds	1
  4590  0032                     ___aldiv@quotient:	
  4591                           
  4592                           ; 4 bytes @ 0x12
  4593  0032                     	ds	1
  4594  0033                     ??___lwmod:	
  4595                           
  4596                           ; 0 bytes @ 0x13
  4597  0033                     	ds	1
  4598  0034                     ___lwmod@counter:	
  4599                           
  4600                           ; 1 bytes @ 0x14
  4601  0034                     	ds	1
  4602  0035                     ?_sprintf:	
  4603  0035                     sprintf@f:	
  4604                           ; 2 bytes @ 0x15
  4605                           
  4606                           
  4607                           ; 1 bytes @ 0x15
  4608  0035                     	ds	1
  4609  0036                     ?_PWMSetDutyCycle:	
  4610  0036                     ?_PWMSetPeriod:	
  4611                           ; 0 bytes @ 0x16
  4612                           
  4613  0036                     PWMSetPeriod@cntPeriod:	
  4614                           ; 0 bytes @ 0x16
  4615                           
  4616  0036                     PWMSetDutyCycle@cntDutyCycle:	
  4617                           ; 2 bytes @ 0x16
  4618                           
  4619                           
  4620                           ; 2 bytes @ 0x16
  4621  0036                     	ds	2
  4622  0038                     ??_PWMSetDutyCycle:	
  4623  0038                     ??_PWMSetPeriod:	
  4624                           ; 0 bytes @ 0x18
  4625                           
  4626  0038                     ??_InitApp:	
  4627                           ; 0 bytes @ 0x18
  4628                           
  4629  0038                     ??_PWMSetConfig:	
  4630                           ; 0 bytes @ 0x18
  4631                           
  4632  0038                     ??_PWMIni:	
  4633                           ; 0 bytes @ 0x18
  4634                           
  4635                           
  4636                           ; 0 bytes @ 0x18
  4637  0038                     	ds	2
  4638  003A                     ??_sprintf:	
  4639                           
  4640                           ; 0 bytes @ 0x1A
  4641  003A                     	ds	3
  4642  003D                     sprintf@ap:	
  4643                           
  4644                           ; 1 bytes @ 0x1D
  4645  003D                     	ds	1
  4646  003E                     sprintf@flag:	
  4647                           
  4648                           ; 1 bytes @ 0x1E
  4649  003E                     	ds	1
  4650  003F                     sprintf@_val:	
  4651                           
  4652                           ; 4 bytes @ 0x1F
  4653  003F                     	ds	4
  4654  0043                     sprintf@sp:	
  4655                           
  4656                           ; 1 bytes @ 0x23
  4657  0043                     	ds	1
  4658  0044                     sprintf@width:	
  4659                           
  4660                           ; 2 bytes @ 0x24
  4661  0044                     	ds	2
  4662  0046                     sprintf@prec:	
  4663                           
  4664                           ; 1 bytes @ 0x26
  4665  0046                     	ds	1
  4666  0047                     sprintf@c:	
  4667                           
  4668                           ; 1 bytes @ 0x27
  4669  0047                     	ds	1
  4670  0048                     ??_main:	
  4671                           
  4672                           ; 0 bytes @ 0x28
  4673  0048                     	ds	12
  4674                           
  4675                           	psect	maintext
  4676  014D                     __pmaintext:	
  4677 ;;
  4678 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
  4679 ;;
  4680 ;; *************** function _main *****************
  4681 ;; Defined at:
  4682 ;;		line 109 in file "main.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;  i               1    5[BANK3 ] unsigned char 
  4687 ;;  i               1    4[BANK3 ] unsigned char 
  4688 ;;  i               1    3[BANK3 ] unsigned char 
  4689 ;;  i               1    6[BANK3 ] unsigned char 
  4690 ;;  temp            2    1[BANK3 ] unsigned int 
  4691 ;;  vDAC            2    0        int 
  4692 ;;  vPeak           2    0        int 
  4693 ;;  stBlinking      1    7[BANK3 ] unsigned char 
  4694 ;;  stFinish        1    0[BANK3 ] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;		None               void
  4697 ;; Registers used:
  4698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 17F/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4705 ;;      Locals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4706 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4707 ;;      Totals:         0      12       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4708 ;;Total ram usage:       20 bytes
  4709 ;; Hardware stack levels required when called:    6
  4710 ;; This function calls:
  4711 ;;		_ReadADC
  4712 ;;		_PWMSetDutyCycle
  4713 ;;		_PWMSetPeriod
  4714 ;;		_UARTSend
  4715 ;;		_ConfigureOscillator
  4716 ;;		_InitApp
  4717 ;;		_DACSet
  4718 ;;		_sprintf
  4719 ;;		_eeprom_write
  4720 ;;		___aldiv
  4721 ;;		___awdiv
  4722 ;;		___awmod
  4723 ;;		___llmod
  4724 ;;		___lmul
  4725 ;; This function is called by:
  4726 ;;		Startup code after reset
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _main
  4732  014D                     _main:	
  4733                           
  4734                           ;main.c: 112: char stBlinking = 0;
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4738  014D  0023               	movlb	3	; select bank3
  4739  014E  01BB               	clrf	main@stBlinking^(0+384)
  4740                           
  4741                           ;main.c: 113: char stFinish = 0;
  4742  014F  01B4               	clrf	main@stFinish^(0+384)
  4743                           
  4744                           ;main.c: 116: int16_t vPeak;
  4745                           ;main.c: 117: int16_t vDAC;
  4746                           ;main.c: 118: uint16_t temp;
  4747                           ;main.c: 120: static int16_t vADCAN9,vADCAN9_Old,vADCAN9_mark,vUART,vUART_off;
  4748                           ;main.c: 123: ConfigureOscillator();
  4749  0150  3197  27CB  3181   	fcall	_ConfigureOscillator
  4750                           
  4751                           ;main.c: 127: InitApp();
  4752  0153  3188  2071  3181   	fcall	_InitApp
  4753                           
  4754                           ;main.c: 129: ADCON0Tmp = ADCON0;
  4755  0156  0021               	movlb	1	; select bank1
  4756  0157  081D               	movf	29,w	;volatile
  4757  0158  0020               	movlb	0	; select bank0
  4758  0159  00C8               	movwf	??_main
  4759  015A  0848               	movf	??_main,w
  4760  015B  0021               	movlb	1	; select bank1
  4761  015C  00E1               	movwf	_ADCON0Tmp^(0+128)
  4762                           
  4763                           ;main.c: 137: DACSet(0);
  4764  015D  3000               	movlw	0
  4765  015E  3188  2059  3181   	fcall	_DACSet
  4766                           
  4767                           ;main.c: 140: {
  4768                           ;main.c: 144: Voff = 0;
  4769  0161  0020               	movlb	0	; select bank0
  4770  0162  01E4               	clrf	_Voff
  4771                           
  4772                           ;main.c: 145: DACSet(Voff);
  4773  0163  0864               	movf	_Voff,w
  4774  0164  3188  2059  3181   	fcall	_DACSet
  4775                           
  4776                           ;main.c: 146: vPWM = 0;
  4777  0167  0020               	movlb	0	; select bank0
  4778  0168  01E5               	clrf	_vPWM
  4779  0169  01E6               	clrf	_vPWM+1
  4780                           
  4781                           ;main.c: 147: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
  4782  016A  0865               	movf	_vPWM,w
  4783  016B  3E64               	addlw	100
  4784  016C  00A7               	movwf	?___aldiv
  4785  016D  3000               	movlw	0
  4786  016E  3D66               	addwfc	_vPWM+1,w
  4787  016F  00A8               	movwf	?___aldiv+1
  4788  0170  01A9               	clrf	?___aldiv+2
  4789  0171  01AA               	clrf	?___aldiv+3
  4790  0172  3003               	movlw	3
  4791  0173  00AE               	movwf	?___aldiv+7
  4792  0174  30D0               	movlw	208
  4793  0175  00AD               	movwf	?___aldiv+6
  4794  0176  3090               	movlw	144
  4795  0177  00AC               	movwf	?___aldiv+5
  4796  0178  3000               	movlw	0
  4797  0179  00AB               	movwf	?___aldiv+4
  4798  017A  3186  26D4  3181   	fcall	___aldiv
  4799  017D  0020               	movlb	0	; select bank0
  4800  017E  0828               	movf	?___aldiv+1,w
  4801  017F  01B7               	clrf	?_PWMSetPeriod+1
  4802  0180  07B7               	addwf	?_PWMSetPeriod+1,f
  4803  0181  0827               	movf	?___aldiv,w
  4804  0182  01B6               	clrf	?_PWMSetPeriod
  4805  0183  07B6               	addwf	?_PWMSetPeriod,f
  4806  0184  3197  27EA  3181   	fcall	_PWMSetPeriod
  4807  0187  0020               	movlb	0	; select bank0
  4808  0188  0865               	movf	_vPWM,w
  4809  0189  3E64               	addlw	100
  4810  018A  00A7               	movwf	?___aldiv
  4811  018B  3000               	movlw	0
  4812  018C  3D66               	addwfc	_vPWM+1,w
  4813  018D  00A8               	movwf	?___aldiv+1
  4814  018E  01A9               	clrf	?___aldiv+2
  4815  018F  01AA               	clrf	?___aldiv+3
  4816  0190  3001               	movlw	1
  4817  0191  00AE               	movwf	?___aldiv+7
  4818  0192  30E8               	movlw	232
  4819  0193  00AD               	movwf	?___aldiv+6
  4820  0194  3048               	movlw	72
  4821  0195  00AC               	movwf	?___aldiv+5
  4822  0196  3000               	movlw	0
  4823  0197  00AB               	movwf	?___aldiv+4
  4824  0198  3186  26D4  3181   	fcall	___aldiv
  4825  019B  0020               	movlb	0	; select bank0
  4826  019C  0828               	movf	?___aldiv+1,w
  4827  019D  01B7               	clrf	?_PWMSetDutyCycle+1
  4828  019E  07B7               	addwf	?_PWMSetDutyCycle+1,f
  4829  019F  0827               	movf	?___aldiv,w
  4830  01A0  01B6               	clrf	?_PWMSetDutyCycle
  4831  01A1  07B6               	addwf	?_PWMSetDutyCycle,f
  4832  01A2  3187  27F5  3181   	fcall	_PWMSetDutyCycle
  4833  01A5  3002               	movlw	2
  4834  01A6  0020               	movlb	0	; select bank0
  4835  01A7  00CA               	movwf	??_main+2
  4836  01A8  3004               	movlw	4
  4837  01A9  00C9               	movwf	??_main+1
  4838  01AA  30BA               	movlw	186
  4839  01AB  00C8               	movwf	??_main
  4840  01AC                     u6697:	
  4841  01AC  0BC8               	decfsz	??_main,f
  4842  01AD  29AC               	goto	u6697
  4843  01AE  0BC9               	decfsz	??_main+1,f
  4844  01AF  29AC               	goto	u6697
  4845  01B0  0BCA               	decfsz	??_main+2,f
  4846  01B1  29AC               	goto	u6697
  4847  01B2  0000               	nop
  4848                           
  4849                           ;main.c: 151: DACSet(Voff);
  4850  01B3  0020               	movlb	0	; select bank0
  4851  01B4  0864               	movf	_Voff,w
  4852  01B5  3188  2059  3181   	fcall	_DACSet
  4853                           
  4854                           ;main.c: 152: _delay(200000);
  4855  01B8  3002               	movlw	2
  4856  01B9  0020               	movlb	0	; select bank0
  4857  01BA  00CA               	movwf	??_main+2
  4858  01BB  3004               	movlw	4
  4859  01BC  00C9               	movwf	??_main+1
  4860  01BD  30BA               	movlw	186
  4861  01BE  00C8               	movwf	??_main
  4862  01BF                     u6707:	
  4863  01BF  0BC8               	decfsz	??_main,f
  4864  01C0  29BF               	goto	u6707
  4865  01C1  0BC9               	decfsz	??_main+1,f
  4866  01C2  29BF               	goto	u6707
  4867  01C3  0BCA               	decfsz	??_main+2,f
  4868  01C4  29BF               	goto	u6707
  4869  01C5  0000               	nop
  4870  01C6                     l5093:	
  4871                           ;main.c: 154: while (!stFinish)
  4872                           
  4873  01C6  0023               	movlb	3	; select bank3
  4874  01C7  0834               	movf	main@stFinish^(0+384),w
  4875  01C8  1D03               	skipz
  4876  01C9  2CCA               	goto	l444
  4877                           
  4878                           ;main.c: 155: {
  4879                           ;main.c: 156: { Vin = ReadADC(9); for (char i=0; i<8;i++) { Vin8 = Vin7; Vin7 = Vin6; Vi
      +                          n6 = Vin5; Vin5 = Vin4; Vin4 = Vin3; Vin3 = Vin2; Vin2 = Vin; Vin = ReadADC(9); _delay(1
      +                          000); } Vavr = (Vin + Vin2 + Vin3 + Vin4 + Vin5 + Vin6 + Vin7 + Vin8)/8;}
  4880  01CA  3009               	movlw	9
  4881  01CB  318A  2200  3181   	fcall	_ReadADC
  4882  01CE  0020               	movlb	0	; select bank0
  4883  01CF  0828               	movf	?_ReadADC+1,w
  4884  01D0  01D7               	clrf	_Vin+1
  4885  01D1  07D7               	addwf	_Vin+1,f
  4886  01D2  0827               	movf	?_ReadADC,w
  4887  01D3  01D6               	clrf	_Vin
  4888  01D4  07D6               	addwf	_Vin,f
  4889  01D5  0023               	movlb	3	; select bank3
  4890  01D6  01B7               	clrf	main@i^(0+384)
  4891  01D7  3008               	movlw	8
  4892  01D8  0237               	subwf	main@i^(0+384),w
  4893  01D9  1803               	btfsc	3,0
  4894  01DA  2A27               	goto	l5005
  4895  01DB                     l4995:	
  4896  01DB  0021               	movlb	1	; select bank1
  4897  01DC  083B               	movf	(_Vin7+1)^(0+128),w
  4898  01DD  01BD               	clrf	(_Vin8+1)^(0+128)
  4899  01DE  07BD               	addwf	(_Vin8+1)^(0+128),f
  4900  01DF  083A               	movf	_Vin7^(0+128),w
  4901  01E0  01BC               	clrf	_Vin8^(0+128)
  4902  01E1  07BC               	addwf	_Vin8^(0+128),f
  4903  01E2  0839               	movf	(_Vin6+1)^(0+128),w
  4904  01E3  01BB               	clrf	(_Vin7+1)^(0+128)
  4905  01E4  07BB               	addwf	(_Vin7+1)^(0+128),f
  4906  01E5  0838               	movf	_Vin6^(0+128),w
  4907  01E6  01BA               	clrf	_Vin7^(0+128)
  4908  01E7  07BA               	addwf	_Vin7^(0+128),f
  4909  01E8  0837               	movf	(_Vin5+1)^(0+128),w
  4910  01E9  01B9               	clrf	(_Vin6+1)^(0+128)
  4911  01EA  07B9               	addwf	(_Vin6+1)^(0+128),f
  4912  01EB  0836               	movf	_Vin5^(0+128),w
  4913  01EC  01B8               	clrf	_Vin6^(0+128)
  4914  01ED  07B8               	addwf	_Vin6^(0+128),f
  4915  01EE  0020               	movlb	0	; select bank0
  4916  01EF  085D               	movf	_Vin4+1,w
  4917  01F0  0021               	movlb	1	; select bank1
  4918  01F1  01B7               	clrf	(_Vin5+1)^(0+128)
  4919  01F2  07B7               	addwf	(_Vin5+1)^(0+128),f
  4920  01F3  0020               	movlb	0	; select bank0
  4921  01F4  085C               	movf	_Vin4,w
  4922  01F5  0021               	movlb	1	; select bank1
  4923  01F6  01B6               	clrf	_Vin5^(0+128)
  4924  01F7  07B6               	addwf	_Vin5^(0+128),f
  4925  01F8  0020               	movlb	0	; select bank0
  4926  01F9  085B               	movf	_Vin3+1,w
  4927  01FA  01DD               	clrf	_Vin4+1
  4928  01FB  07DD               	addwf	_Vin4+1,f
  4929  01FC  085A               	movf	_Vin3,w
  4930  01FD  01DC               	clrf	_Vin4
  4931  01FE  07DC               	addwf	_Vin4,f
  4932  01FF  0859               	movf	_Vin2+1,w
  4933  0200  01DB               	clrf	_Vin3+1
  4934  0201  07DB               	addwf	_Vin3+1,f
  4935  0202  0858               	movf	_Vin2,w
  4936  0203  01DA               	clrf	_Vin3
  4937  0204  07DA               	addwf	_Vin3,f
  4938  0205  0857               	movf	_Vin+1,w
  4939  0206  01D9               	clrf	_Vin2+1
  4940  0207  07D9               	addwf	_Vin2+1,f
  4941  0208  0856               	movf	_Vin,w
  4942  0209  01D8               	clrf	_Vin2
  4943  020A  07D8               	addwf	_Vin2,f
  4944  020B  3009               	movlw	9
  4945  020C  318A  2200  3181   	fcall	_ReadADC
  4946  020F  0020               	movlb	0	; select bank0
  4947  0210  0828               	movf	?_ReadADC+1,w
  4948  0211  01D7               	clrf	_Vin+1
  4949  0212  07D7               	addwf	_Vin+1,f
  4950  0213  0827               	movf	?_ReadADC,w
  4951  0214  01D6               	clrf	_Vin
  4952  0215  07D6               	addwf	_Vin,f
  4953  0216  30F9               	movlw	249
  4954  0217  00C8               	movwf	??_main
  4955  0218                     u6717:	
  4956  0218  0000               	nop
  4957  0219  0BC8               	decfsz	??_main,f
  4958  021A  2A18               	goto	u6717
  4959  021B  2A1C               	nop2	;nop
  4960  021C  0000               	nop
  4961  021D  3001               	movlw	1
  4962  021E  0020               	movlb	0	; select bank0
  4963  021F  00C8               	movwf	??_main
  4964  0220  0848               	movf	??_main,w
  4965  0221  0023               	movlb	3	; select bank3
  4966  0222  07B7               	addwf	main@i^(0+384),f
  4967  0223  3008               	movlw	8
  4968  0224  0237               	subwf	main@i^(0+384),w
  4969  0225  1C03               	skipc
  4970  0226  29DB               	goto	l4995
  4971  0227                     l5005:	
  4972  0227  3008               	movlw	8
  4973  0228  0020               	movlb	0	; select bank0
  4974  0229  00A7               	movwf	?___awdiv
  4975  022A  3000               	movlw	0
  4976  022B  00A8               	movwf	?___awdiv+1
  4977  022C  0858               	movf	_Vin2,w
  4978  022D  0756               	addwf	_Vin,w
  4979  022E  00C8               	movwf	??_main
  4980  022F  0859               	movf	_Vin2+1,w
  4981  0230  3D57               	addwfc	_Vin+1,w
  4982  0231  00C9               	movwf	??_main+1
  4983  0232  085A               	movf	_Vin3,w
  4984  0233  0748               	addwf	??_main,w
  4985  0234  00CA               	movwf	??_main+2
  4986  0235  085B               	movf	_Vin3+1,w
  4987  0236  3D49               	addwfc	??_main+1,w
  4988  0237  00CB               	movwf	??_main+3
  4989  0238  085C               	movf	_Vin4,w
  4990  0239  074A               	addwf	??_main+2,w
  4991  023A  00CC               	movwf	??_main+4
  4992  023B  085D               	movf	_Vin4+1,w
  4993  023C  3D4B               	addwfc	??_main+3,w
  4994  023D  00CD               	movwf	??_main+5
  4995  023E  0021               	movlb	1	; select bank1
  4996  023F  0836               	movf	_Vin5^(0+128),w
  4997  0240  0020               	movlb	0	; select bank0
  4998  0241  074C               	addwf	??_main+4,w
  4999  0242  00CE               	movwf	??_main+6
  5000  0243  0021               	movlb	1	; select bank1
  5001  0244  0837               	movf	(_Vin5+1)^(0+128),w
  5002  0245  0020               	movlb	0	; select bank0
  5003  0246  3D4D               	addwfc	??_main+5,w
  5004  0247  00CF               	movwf	??_main+7
  5005  0248  0021               	movlb	1	; select bank1
  5006  0249  0838               	movf	_Vin6^(0+128),w
  5007  024A  0020               	movlb	0	; select bank0
  5008  024B  074E               	addwf	??_main+6,w
  5009  024C  00D0               	movwf	??_main+8
  5010  024D  0021               	movlb	1	; select bank1
  5011  024E  0839               	movf	(_Vin6+1)^(0+128),w
  5012  024F  0020               	movlb	0	; select bank0
  5013  0250  3D4F               	addwfc	??_main+7,w
  5014  0251  00D1               	movwf	??_main+9
  5015  0252  0021               	movlb	1	; select bank1
  5016  0253  083A               	movf	_Vin7^(0+128),w
  5017  0254  0020               	movlb	0	; select bank0
  5018  0255  0750               	addwf	??_main+8,w
  5019  0256  00D2               	movwf	??_main+10
  5020  0257  0021               	movlb	1	; select bank1
  5021  0258  083B               	movf	(_Vin7+1)^(0+128),w
  5022  0259  0020               	movlb	0	; select bank0
  5023  025A  3D51               	addwfc	??_main+9,w
  5024  025B  00D3               	movwf	??_main+11
  5025  025C  0021               	movlb	1	; select bank1
  5026  025D  083C               	movf	_Vin8^(0+128),w
  5027  025E  0020               	movlb	0	; select bank0
  5028  025F  0752               	addwf	??_main+10,w
  5029  0260  00A9               	movwf	?___awdiv+2
  5030  0261  0021               	movlb	1	; select bank1
  5031  0262  083D               	movf	(_Vin8+1)^(0+128),w
  5032  0263  0020               	movlb	0	; select bank0
  5033  0264  3D53               	addwfc	??_main+11,w
  5034  0265  00AA               	movwf	?___awdiv+3
  5035  0266  318A  2281  3181   	fcall	___awdiv
  5036  0269  0020               	movlb	0	; select bank0
  5037  026A  0828               	movf	?___awdiv+1,w
  5038  026B  01D5               	clrf	_Vavr+1
  5039  026C  07D5               	addwf	_Vavr+1,f
  5040  026D  0827               	movf	?___awdiv,w
  5041  026E  01D4               	clrf	_Vavr
  5042  026F  07D4               	addwf	_Vavr,f
  5043                           
  5044                           ;main.c: 157: if (Vavr < 4095 - 100)
  5045  0270  0855               	movf	_Vavr+1,w
  5046  0271  3A80               	xorlw	128
  5047  0272  00FF               	movwf	127
  5048  0273  308F               	movlw	143
  5049  0274  027F               	subwf	127,w
  5050  0275  1D03               	skipz
  5051  0276  2A79               	goto	u5115
  5052  0277  309B               	movlw	155
  5053  0278  0254               	subwf	_Vavr,w
  5054  0279                     u5115:	
  5055  0279  1803               	skipnc
  5056  027A  2C34               	goto	l5069
  5057                           
  5058                           ;main.c: 158: {
  5059                           ;main.c: 159: if (Vavr < Vavr_old)
  5060  027B  0020               	movlb	0	; select bank0
  5061  027C  0855               	movf	_Vavr+1,w
  5062  027D  3A80               	xorlw	128
  5063  027E  00C8               	movwf	??_main
  5064  027F  0021               	movlb	1	; select bank1
  5065  0280  0835               	movf	(_Vavr_old+1)^(0+128),w
  5066  0281  3A80               	xorlw	128
  5067  0282  0020               	movlb	0	; select bank0
  5068  0283  0248               	subwf	??_main,w
  5069  0284  1D03               	skipz
  5070  0285  2A8A               	goto	u5125
  5071  0286  0021               	movlb	1	; select bank1
  5072  0287  0834               	movf	_Vavr_old^(0+128),w
  5073  0288  0020               	movlb	0	; select bank0
  5074  0289  0254               	subwf	_Vavr,w
  5075  028A                     u5125:	
  5076  028A  1803               	skipnc
  5077  028B  2A8E               	goto	l5013
  5078                           
  5079                           ;main.c: 160: {
  5080                           ;main.c: 161: vPWM +=100;
  5081  028C  3064               	movlw	100
  5082  028D  2A8F               	goto	L1
  5083  028E                     l5013:	
  5084                           ;main.c: 162: }
  5085                           
  5086                           
  5087                           ;main.c: 163: else
  5088                           ;main.c: 164: {
  5089                           ;main.c: 165: vPWM +=10;
  5090  028E  300A               	movlw	10
  5091  028F                     L1:	
  5092  028F  0020               	movlb	0	; select bank0
  5093  0290  07E5               	addwf	_vPWM,f
  5094  0291  3000               	movlw	0
  5095  0292  3DE6               	addwfc	_vPWM+1,f
  5096                           
  5097                           ;main.c: 166: }
  5098                           ;main.c: 167: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
  5099  0293  0865               	movf	_vPWM,w
  5100  0294  3E64               	addlw	100
  5101  0295  00A7               	movwf	?___aldiv
  5102  0296  3000               	movlw	0
  5103  0297  3D66               	addwfc	_vPWM+1,w
  5104  0298  00A8               	movwf	?___aldiv+1
  5105  0299  01A9               	clrf	?___aldiv+2
  5106  029A  01AA               	clrf	?___aldiv+3
  5107  029B  3003               	movlw	3
  5108  029C  00AE               	movwf	?___aldiv+7
  5109  029D  30D0               	movlw	208
  5110  029E  00AD               	movwf	?___aldiv+6
  5111  029F  3090               	movlw	144
  5112  02A0  00AC               	movwf	?___aldiv+5
  5113  02A1  3000               	movlw	0
  5114  02A2  00AB               	movwf	?___aldiv+4
  5115  02A3  3186  26D4  3181   	fcall	___aldiv
  5116  02A6  0020               	movlb	0	; select bank0
  5117  02A7  0828               	movf	?___aldiv+1,w
  5118  02A8  01B7               	clrf	?_PWMSetPeriod+1
  5119  02A9  07B7               	addwf	?_PWMSetPeriod+1,f
  5120  02AA  0827               	movf	?___aldiv,w
  5121  02AB  01B6               	clrf	?_PWMSetPeriod
  5122  02AC  07B6               	addwf	?_PWMSetPeriod,f
  5123  02AD  3197  27EA  3181   	fcall	_PWMSetPeriod
  5124  02B0  0020               	movlb	0	; select bank0
  5125  02B1  0865               	movf	_vPWM,w
  5126  02B2  3E64               	addlw	100
  5127  02B3  00A7               	movwf	?___aldiv
  5128  02B4  3000               	movlw	0
  5129  02B5  3D66               	addwfc	_vPWM+1,w
  5130  02B6  00A8               	movwf	?___aldiv+1
  5131  02B7  01A9               	clrf	?___aldiv+2
  5132  02B8  01AA               	clrf	?___aldiv+3
  5133  02B9  3001               	movlw	1
  5134  02BA  00AE               	movwf	?___aldiv+7
  5135  02BB  30E8               	movlw	232
  5136  02BC  00AD               	movwf	?___aldiv+6
  5137  02BD  3048               	movlw	72
  5138  02BE  00AC               	movwf	?___aldiv+5
  5139  02BF  3000               	movlw	0
  5140  02C0  00AB               	movwf	?___aldiv+4
  5141  02C1  3186  26D4  3181   	fcall	___aldiv
  5142  02C4  0020               	movlb	0	; select bank0
  5143  02C5  0828               	movf	?___aldiv+1,w
  5144  02C6  01B7               	clrf	?_PWMSetDutyCycle+1
  5145  02C7  07B7               	addwf	?_PWMSetDutyCycle+1,f
  5146  02C8  0827               	movf	?___aldiv,w
  5147  02C9  01B6               	clrf	?_PWMSetDutyCycle
  5148  02CA  07B6               	addwf	?_PWMSetDutyCycle,f
  5149  02CB  3187  27F5  3181   	fcall	_PWMSetDutyCycle
  5150  02CE  3002               	movlw	2
  5151  02CF  0020               	movlb	0	; select bank0
  5152  02D0  00CA               	movwf	??_main+2
  5153  02D1  3004               	movlw	4
  5154  02D2  00C9               	movwf	??_main+1
  5155  02D3  30BA               	movlw	186
  5156  02D4  00C8               	movwf	??_main
  5157  02D5                     u6727:	
  5158  02D5  0BC8               	decfsz	??_main,f
  5159  02D6  2AD5               	goto	u6727
  5160  02D7  0BC9               	decfsz	??_main+1,f
  5161  02D8  2AD5               	goto	u6727
  5162  02D9  0BCA               	decfsz	??_main+2,f
  5163  02DA  2AD5               	goto	u6727
  5164  02DB  0000               	nop
  5165                           
  5166                           ;main.c: 168: if (vPWM > 20000)
  5167  02DC  304E               	movlw	78
  5168  02DD  0020               	movlb	0	; select bank0
  5169  02DE  0266               	subwf	_vPWM+1,w
  5170  02DF  3021               	movlw	33
  5171  02E0  1903               	skipnz
  5172  02E1  0265               	subwf	_vPWM,w
  5173  02E2  1C03               	skipc
  5174  02E3  2B45               	goto	l5033
  5175                           
  5176                           ;main.c: 169: {
  5177                           ;main.c: 170: vPWM = vPWM_old;
  5178  02E4  0021               	movlb	1	; select bank1
  5179  02E5  0853               	movf	(_vPWM_old+1)^(0+128),w
  5180  02E6  0020               	movlb	0	; select bank0
  5181  02E7  01E6               	clrf	_vPWM+1
  5182  02E8  07E6               	addwf	_vPWM+1,f
  5183  02E9  0021               	movlb	1	; select bank1
  5184  02EA  0852               	movf	_vPWM_old^(0+128),w
  5185  02EB  0020               	movlb	0	; select bank0
  5186  02EC  01E5               	clrf	_vPWM
  5187  02ED  07E5               	addwf	_vPWM,f
  5188                           
  5189                           ;main.c: 171: Voff = Voff_old;
  5190  02EE  0021               	movlb	1	; select bank1
  5191  02EF  0863               	movf	_Voff_old^(0+128),w
  5192  02F0  0020               	movlb	0	; select bank0
  5193  02F1  00C8               	movwf	??_main
  5194  02F2  0848               	movf	??_main,w
  5195  02F3  00E4               	movwf	_Voff
  5196                           
  5197                           ;main.c: 172: DACSet(Voff);
  5198  02F4  0864               	movf	_Voff,w
  5199  02F5  3188  2059  3181   	fcall	_DACSet
  5200                           
  5201                           ;main.c: 173: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
  5202  02F8  0020               	movlb	0	; select bank0
  5203  02F9  0865               	movf	_vPWM,w
  5204  02FA  3E64               	addlw	100
  5205  02FB  00A7               	movwf	?___aldiv
  5206  02FC  3000               	movlw	0
  5207  02FD  3D66               	addwfc	_vPWM+1,w
  5208  02FE  00A8               	movwf	?___aldiv+1
  5209  02FF  01A9               	clrf	?___aldiv+2
  5210  0300  01AA               	clrf	?___aldiv+3
  5211  0301  3003               	movlw	3
  5212  0302  00AE               	movwf	?___aldiv+7
  5213  0303  30D0               	movlw	208
  5214  0304  00AD               	movwf	?___aldiv+6
  5215  0305  3090               	movlw	144
  5216  0306  00AC               	movwf	?___aldiv+5
  5217  0307  3000               	movlw	0
  5218  0308  00AB               	movwf	?___aldiv+4
  5219  0309  3186  26D4  3181   	fcall	___aldiv
  5220  030C  0020               	movlb	0	; select bank0
  5221  030D  0828               	movf	?___aldiv+1,w
  5222  030E  01B7               	clrf	?_PWMSetPeriod+1
  5223  030F  07B7               	addwf	?_PWMSetPeriod+1,f
  5224  0310  0827               	movf	?___aldiv,w
  5225  0311  01B6               	clrf	?_PWMSetPeriod
  5226  0312  07B6               	addwf	?_PWMSetPeriod,f
  5227  0313  3197  27EA  3181   	fcall	_PWMSetPeriod
  5228  0316  0020               	movlb	0	; select bank0
  5229  0317  0865               	movf	_vPWM,w
  5230  0318  3E64               	addlw	100
  5231  0319  00A7               	movwf	?___aldiv
  5232  031A  3000               	movlw	0
  5233  031B  3D66               	addwfc	_vPWM+1,w
  5234  031C  00A8               	movwf	?___aldiv+1
  5235  031D  01A9               	clrf	?___aldiv+2
  5236  031E  01AA               	clrf	?___aldiv+3
  5237  031F  3001               	movlw	1
  5238  0320  00AE               	movwf	?___aldiv+7
  5239  0321  30E8               	movlw	232
  5240  0322  00AD               	movwf	?___aldiv+6
  5241  0323  3048               	movlw	72
  5242  0324  00AC               	movwf	?___aldiv+5
  5243  0325  3000               	movlw	0
  5244  0326  00AB               	movwf	?___aldiv+4
  5245  0327  3186  26D4  3181   	fcall	___aldiv
  5246  032A  0020               	movlb	0	; select bank0
  5247  032B  0828               	movf	?___aldiv+1,w
  5248  032C  01B7               	clrf	?_PWMSetDutyCycle+1
  5249  032D  07B7               	addwf	?_PWMSetDutyCycle+1,f
  5250  032E  0827               	movf	?___aldiv,w
  5251  032F  01B6               	clrf	?_PWMSetDutyCycle
  5252  0330  07B6               	addwf	?_PWMSetDutyCycle,f
  5253  0331  3187  27F5  3181   	fcall	_PWMSetDutyCycle
  5254  0334  3002               	movlw	2
  5255  0335  0020               	movlb	0	; select bank0
  5256  0336  00CA               	movwf	??_main+2
  5257  0337  3004               	movlw	4
  5258  0338  00C9               	movwf	??_main+1
  5259  0339  30BA               	movlw	186
  5260  033A  00C8               	movwf	??_main
  5261  033B                     u6737:	
  5262  033B  0BC8               	decfsz	??_main,f
  5263  033C  2B3B               	goto	u6737
  5264  033D  0BC9               	decfsz	??_main+1,f
  5265  033E  2B3B               	goto	u6737
  5266  033F  0BCA               	decfsz	??_main+2,f
  5267  0340  2B3B               	goto	u6737
  5268  0341  0000               	nop
  5269                           
  5270                           ;main.c: 174: stFinish = 1;
  5271  0342  0023               	movlb	3	; select bank3
  5272  0343  01B4               	clrf	main@stFinish^(0+384)
  5273  0344  0AB4               	incf	main@stFinish^(0+384),f
  5274  0345                     l5033:	
  5275                           ;main.c: 176: else
  5276                           ;main.c: 177: {
  5277                           
  5278                           ;main.c: 175: }
  5279                           
  5280                           
  5281                           ;main.c: 180: }
  5282                           ;main.c: 181: if (stMAX==0)
  5283  0345  0021               	movlb	1	; select bank1
  5284  0346  08EE               	movf	_stMAX^(0+128),f
  5285  0347  1D03               	skipz
  5286  0348  2CA7               	goto	l5087
  5287                           
  5288                           ;main.c: 182: {
  5289                           ;main.c: 183: if ((Vavr > Vavr_max)&&(Vavr_max<4095 - 100))
  5290  0349  0833               	movf	(_Vavr_max+1)^(0+128),w
  5291  034A  3A80               	xorlw	128
  5292  034B  0020               	movlb	0	; select bank0
  5293  034C  00C8               	movwf	??_main
  5294  034D  0855               	movf	_Vavr+1,w
  5295  034E  3A80               	xorlw	128
  5296  034F  0248               	subwf	??_main,w
  5297  0350  1D03               	skipz
  5298  0351  2B55               	goto	u5155
  5299  0352  0854               	movf	_Vavr,w
  5300  0353  0021               	movlb	1	; select bank1
  5301  0354  0232               	subwf	_Vavr_max^(0+128),w
  5302  0355                     u5155:	
  5303  0355  1803               	skipnc
  5304  0356  2CA7               	goto	l5087
  5305  0357  0021               	movlb	1	; select bank1
  5306  0358  0833               	movf	(_Vavr_max+1)^(0+128),w
  5307  0359  3A80               	xorlw	128
  5308  035A  00FF               	movwf	127
  5309  035B  308F               	movlw	143
  5310  035C  027F               	subwf	127,w
  5311  035D  1D03               	skipz
  5312  035E  2B61               	goto	u5165
  5313  035F  309B               	movlw	155
  5314  0360  0232               	subwf	_Vavr_max^(0+128),w
  5315  0361                     u5165:	
  5316  0361  1803               	skipnc
  5317  0362  2CA7               	goto	l5087
  5318                           
  5319                           ;main.c: 184: {
  5320                           ;main.c: 185: Vavr_max = Vavr;
  5321  0363  0020               	movlb	0	; select bank0
  5322  0364  0855               	movf	_Vavr+1,w
  5323  0365  0021               	movlb	1	; select bank1
  5324  0366  01B3               	clrf	(_Vavr_max+1)^(0+128)
  5325  0367  07B3               	addwf	(_Vavr_max+1)^(0+128),f
  5326  0368  0020               	movlb	0	; select bank0
  5327  0369  0854               	movf	_Vavr,w
  5328  036A  0021               	movlb	1	; select bank1
  5329  036B  01B2               	clrf	_Vavr_max^(0+128)
  5330  036C  07B2               	addwf	_Vavr_max^(0+128),f
  5331                           
  5332                           ;main.c: 186: vPWM_old = vPWM;
  5333  036D  0020               	movlb	0	; select bank0
  5334  036E  0866               	movf	_vPWM+1,w
  5335  036F  0021               	movlb	1	; select bank1
  5336  0370  01D3               	clrf	(_vPWM_old+1)^(0+128)
  5337  0371  07D3               	addwf	(_vPWM_old+1)^(0+128),f
  5338  0372  0020               	movlb	0	; select bank0
  5339  0373  0865               	movf	_vPWM,w
  5340  0374  0021               	movlb	1	; select bank1
  5341  0375  01D2               	clrf	_vPWM_old^(0+128)
  5342  0376  07D2               	addwf	_vPWM_old^(0+128),f
  5343                           
  5344                           ;main.c: 187: }
  5345                           ;main.c: 188: }
  5346                           ;main.c: 191: }
  5347  0377  2CA7               	goto	l5087
  5348  0378                     l5041:	
  5349                           ;main.c: 192: else
  5350                           ;main.c: 193: {
  5351                           ;main.c: 194: while (Vavr > 3000)
  5352                           
  5353                           
  5354                           ;main.c: 195: {
  5355                           ;main.c: 196: if (Voff<250) Voff +=1;
  5356  0378  30FA               	movlw	250
  5357  0379  0020               	movlb	0	; select bank0
  5358  037A  0264               	subwf	_Voff,w
  5359  037B  1803               	skipnc
  5360  037C  2B81               	goto	l5045
  5361  037D  3001               	movlw	1
  5362  037E  00C8               	movwf	??_main
  5363  037F  0848               	movf	??_main,w
  5364  0380  07E4               	addwf	_Voff,f
  5365  0381                     l5045:	
  5366                           
  5367                           ;main.c: 197: DACSet(Voff);
  5368  0381  0864               	movf	_Voff,w
  5369  0382  3188  2059  3181   	fcall	_DACSet
  5370                           
  5371                           ;main.c: 198: _delay(30000);
  5372  0385  3027               	movlw	39
  5373  0386  0020               	movlb	0	; select bank0
  5374  0387  00C9               	movwf	??_main+1
  5375  0388  30F5               	movlw	245
  5376  0389  00C8               	movwf	??_main
  5377  038A                     u6747:	
  5378  038A  0BC8               	decfsz	??_main,f
  5379  038B  2B8A               	goto	u6747
  5380  038C  0BC9               	decfsz	??_main+1,f
  5381  038D  2B8A               	goto	u6747
  5382                           
  5383                           ;main.c: 199: { Vin = ReadADC(9); for (char i=0; i<8;i++) { Vin8 = Vin7; Vin7 = Vin6; Vi
      +                          n6 = Vin5; Vin5 = Vin4; Vin4 = Vin3; Vin3 = Vin2; Vin2 = Vin; Vin = ReadADC(9); _delay(1
      +                          000); } Vavr = (Vin + Vin2 + Vin3 + Vin4 + Vin5 + Vin6 + Vin7 + Vin8)/8;}
  5384  038E  3009               	movlw	9
  5385  038F  318A  2200  3181   	fcall	_ReadADC
  5386  0392  0020               	movlb	0	; select bank0
  5387  0393  0828               	movf	?_ReadADC+1,w
  5388  0394  01D7               	clrf	_Vin+1
  5389  0395  07D7               	addwf	_Vin+1,f
  5390  0396  0827               	movf	?_ReadADC,w
  5391  0397  01D6               	clrf	_Vin
  5392  0398  07D6               	addwf	_Vin,f
  5393  0399  0023               	movlb	3	; select bank3
  5394  039A  01B8               	clrf	main@i_335^(0+384)
  5395  039B  3008               	movlw	8
  5396  039C  0238               	subwf	main@i_335^(0+384),w
  5397  039D  1803               	btfsc	3,0
  5398  039E  2BEB               	goto	l5067
  5399  039F                     l5057:	
  5400  039F  0021               	movlb	1	; select bank1
  5401  03A0  083B               	movf	(_Vin7+1)^(0+128),w
  5402  03A1  01BD               	clrf	(_Vin8+1)^(0+128)
  5403  03A2  07BD               	addwf	(_Vin8+1)^(0+128),f
  5404  03A3  083A               	movf	_Vin7^(0+128),w
  5405  03A4  01BC               	clrf	_Vin8^(0+128)
  5406  03A5  07BC               	addwf	_Vin8^(0+128),f
  5407  03A6  0839               	movf	(_Vin6+1)^(0+128),w
  5408  03A7  01BB               	clrf	(_Vin7+1)^(0+128)
  5409  03A8  07BB               	addwf	(_Vin7+1)^(0+128),f
  5410  03A9  0838               	movf	_Vin6^(0+128),w
  5411  03AA  01BA               	clrf	_Vin7^(0+128)
  5412  03AB  07BA               	addwf	_Vin7^(0+128),f
  5413  03AC  0837               	movf	(_Vin5+1)^(0+128),w
  5414  03AD  01B9               	clrf	(_Vin6+1)^(0+128)
  5415  03AE  07B9               	addwf	(_Vin6+1)^(0+128),f
  5416  03AF  0836               	movf	_Vin5^(0+128),w
  5417  03B0  01B8               	clrf	_Vin6^(0+128)
  5418  03B1  07B8               	addwf	_Vin6^(0+128),f
  5419  03B2  0020               	movlb	0	; select bank0
  5420  03B3  085D               	movf	_Vin4+1,w
  5421  03B4  0021               	movlb	1	; select bank1
  5422  03B5  01B7               	clrf	(_Vin5+1)^(0+128)
  5423  03B6  07B7               	addwf	(_Vin5+1)^(0+128),f
  5424  03B7  0020               	movlb	0	; select bank0
  5425  03B8  085C               	movf	_Vin4,w
  5426  03B9  0021               	movlb	1	; select bank1
  5427  03BA  01B6               	clrf	_Vin5^(0+128)
  5428  03BB  07B6               	addwf	_Vin5^(0+128),f
  5429  03BC  0020               	movlb	0	; select bank0
  5430  03BD  085B               	movf	_Vin3+1,w
  5431  03BE  01DD               	clrf	_Vin4+1
  5432  03BF  07DD               	addwf	_Vin4+1,f
  5433  03C0  085A               	movf	_Vin3,w
  5434  03C1  01DC               	clrf	_Vin4
  5435  03C2  07DC               	addwf	_Vin4,f
  5436  03C3  0859               	movf	_Vin2+1,w
  5437  03C4  01DB               	clrf	_Vin3+1
  5438  03C5  07DB               	addwf	_Vin3+1,f
  5439  03C6  0858               	movf	_Vin2,w
  5440  03C7  01DA               	clrf	_Vin3
  5441  03C8  07DA               	addwf	_Vin3,f
  5442  03C9  0857               	movf	_Vin+1,w
  5443  03CA  01D9               	clrf	_Vin2+1
  5444  03CB  07D9               	addwf	_Vin2+1,f
  5445  03CC  0856               	movf	_Vin,w
  5446  03CD  01D8               	clrf	_Vin2
  5447  03CE  07D8               	addwf	_Vin2,f
  5448  03CF  3009               	movlw	9
  5449  03D0  318A  2200  3181   	fcall	_ReadADC
  5450  03D3  0020               	movlb	0	; select bank0
  5451  03D4  0828               	movf	?_ReadADC+1,w
  5452  03D5  01D7               	clrf	_Vin+1
  5453  03D6  07D7               	addwf	_Vin+1,f
  5454  03D7  0827               	movf	?_ReadADC,w
  5455  03D8  01D6               	clrf	_Vin
  5456  03D9  07D6               	addwf	_Vin,f
  5457  03DA  30F9               	movlw	249
  5458  03DB  00C8               	movwf	??_main
  5459  03DC                     u6757:	
  5460  03DC  0000               	nop
  5461  03DD  0BC8               	decfsz	??_main,f
  5462  03DE  2BDC               	goto	u6757
  5463  03DF  2BE0               	nop2	;nop
  5464  03E0  0000               	nop
  5465  03E1  3001               	movlw	1
  5466  03E2  0020               	movlb	0	; select bank0
  5467  03E3  00C8               	movwf	??_main
  5468  03E4  0848               	movf	??_main,w
  5469  03E5  0023               	movlb	3	; select bank3
  5470  03E6  07B8               	addwf	main@i_335^(0+384),f
  5471  03E7  3008               	movlw	8
  5472  03E8  0238               	subwf	main@i_335^(0+384),w
  5473  03E9  1C03               	skipc
  5474  03EA  2B9F               	goto	l5057
  5475  03EB                     l5067:	
  5476  03EB  3008               	movlw	8
  5477  03EC  0020               	movlb	0	; select bank0
  5478  03ED  00A7               	movwf	?___awdiv
  5479  03EE  3000               	movlw	0
  5480  03EF  00A8               	movwf	?___awdiv+1
  5481  03F0  0858               	movf	_Vin2,w
  5482  03F1  0756               	addwf	_Vin,w
  5483  03F2  00C8               	movwf	??_main
  5484  03F3  0859               	movf	_Vin2+1,w
  5485  03F4  3D57               	addwfc	_Vin+1,w
  5486  03F5  00C9               	movwf	??_main+1
  5487  03F6  085A               	movf	_Vin3,w
  5488  03F7  0748               	addwf	??_main,w
  5489  03F8  00CA               	movwf	??_main+2
  5490  03F9  085B               	movf	_Vin3+1,w
  5491  03FA  3D49               	addwfc	??_main+1,w
  5492  03FB  00CB               	movwf	??_main+3
  5493  03FC  085C               	movf	_Vin4,w
  5494  03FD  074A               	addwf	??_main+2,w
  5495  03FE  00CC               	movwf	??_main+4
  5496  03FF  085D               	movf	_Vin4+1,w
  5497  0400  3D4B               	addwfc	??_main+3,w
  5498  0401  00CD               	movwf	??_main+5
  5499  0402  0021               	movlb	1	; select bank1
  5500  0403  0836               	movf	_Vin5^(0+128),w
  5501  0404  0020               	movlb	0	; select bank0
  5502  0405  074C               	addwf	??_main+4,w
  5503  0406  00CE               	movwf	??_main+6
  5504  0407  0021               	movlb	1	; select bank1
  5505  0408  0837               	movf	(_Vin5+1)^(0+128),w
  5506  0409  0020               	movlb	0	; select bank0
  5507  040A  3D4D               	addwfc	??_main+5,w
  5508  040B  00CF               	movwf	??_main+7
  5509  040C  0021               	movlb	1	; select bank1
  5510  040D  0838               	movf	_Vin6^(0+128),w
  5511  040E  0020               	movlb	0	; select bank0
  5512  040F  074E               	addwf	??_main+6,w
  5513  0410  00D0               	movwf	??_main+8
  5514  0411  0021               	movlb	1	; select bank1
  5515  0412  0839               	movf	(_Vin6+1)^(0+128),w
  5516  0413  0020               	movlb	0	; select bank0
  5517  0414  3D4F               	addwfc	??_main+7,w
  5518  0415  00D1               	movwf	??_main+9
  5519  0416  0021               	movlb	1	; select bank1
  5520  0417  083A               	movf	_Vin7^(0+128),w
  5521  0418  0020               	movlb	0	; select bank0
  5522  0419  0750               	addwf	??_main+8,w
  5523  041A  00D2               	movwf	??_main+10
  5524  041B  0021               	movlb	1	; select bank1
  5525  041C  083B               	movf	(_Vin7+1)^(0+128),w
  5526  041D  0020               	movlb	0	; select bank0
  5527  041E  3D51               	addwfc	??_main+9,w
  5528  041F  00D3               	movwf	??_main+11
  5529  0420  0021               	movlb	1	; select bank1
  5530  0421  083C               	movf	_Vin8^(0+128),w
  5531  0422  0020               	movlb	0	; select bank0
  5532  0423  0752               	addwf	??_main+10,w
  5533  0424  00A9               	movwf	?___awdiv+2
  5534  0425  0021               	movlb	1	; select bank1
  5535  0426  083D               	movf	(_Vin8+1)^(0+128),w
  5536  0427  0020               	movlb	0	; select bank0
  5537  0428  3D53               	addwfc	??_main+11,w
  5538  0429  00AA               	movwf	?___awdiv+3
  5539  042A  318A  2281  3181   	fcall	___awdiv
  5540  042D  0020               	movlb	0	; select bank0
  5541  042E  0828               	movf	?___awdiv+1,w
  5542  042F  01D5               	clrf	_Vavr+1
  5543  0430  07D5               	addwf	_Vavr+1,f
  5544  0431  0827               	movf	?___awdiv,w
  5545  0432  01D4               	clrf	_Vavr
  5546  0433  07D4               	addwf	_Vavr,f
  5547  0434                     l5069:	
  5548  0434  0020               	movlb	0	; select bank0
  5549  0435  0855               	movf	_Vavr+1,w
  5550  0436  3A80               	xorlw	128
  5551  0437  00FF               	movwf	127
  5552  0438  308B               	movlw	139
  5553  0439  027F               	subwf	127,w
  5554  043A  1D03               	skipz
  5555  043B  2C3E               	goto	u5205
  5556  043C  30B9               	movlw	185
  5557  043D  0254               	subwf	_Vavr,w
  5558  043E                     u5205:	
  5559  043E  1803               	skipnc
  5560  043F  2B78               	goto	l5041
  5561                           
  5562                           ;main.c: 200: }
  5563                           ;main.c: 202: if (Voff > Voff_old)
  5564  0440  0020               	movlb	0	; select bank0
  5565  0441  0864               	movf	_Voff,w
  5566  0442  0021               	movlb	1	; select bank1
  5567  0443  0263               	subwf	_Voff_old^(0+128),w
  5568  0444  1803               	skipnc
  5569  0445  2C56               	goto	l5077
  5570                           
  5571                           ;main.c: 203: {
  5572                           ;main.c: 204: Voff_old = Voff;
  5573  0446  0020               	movlb	0	; select bank0
  5574  0447  0864               	movf	_Voff,w
  5575  0448  00C8               	movwf	??_main
  5576  0449  0848               	movf	??_main,w
  5577  044A  0021               	movlb	1	; select bank1
  5578  044B  00E3               	movwf	_Voff_old^(0+128)
  5579                           
  5580                           ;main.c: 205: vPWM_old = vPWM;
  5581  044C  0020               	movlb	0	; select bank0
  5582  044D  0866               	movf	_vPWM+1,w
  5583  044E  0021               	movlb	1	; select bank1
  5584  044F  01D3               	clrf	(_vPWM_old+1)^(0+128)
  5585  0450  07D3               	addwf	(_vPWM_old+1)^(0+128),f
  5586  0451  0020               	movlb	0	; select bank0
  5587  0452  0865               	movf	_vPWM,w
  5588  0453  0021               	movlb	1	; select bank1
  5589  0454  01D2               	clrf	_vPWM_old^(0+128)
  5590  0455  07D2               	addwf	_vPWM_old^(0+128),f
  5591  0456                     l5077:	
  5592                           
  5593                           ;main.c: 206: }
  5594                           ;main.c: 208: vPWM+=10;
  5595  0456  300A               	movlw	10
  5596  0457  0020               	movlb	0	; select bank0
  5597  0458  07E5               	addwf	_vPWM,f
  5598  0459  3000               	movlw	0
  5599  045A  3DE6               	addwfc	_vPWM+1,f
  5600                           
  5601                           ;main.c: 209: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
  5602  045B  0865               	movf	_vPWM,w
  5603  045C  3E64               	addlw	100
  5604  045D  00A7               	movwf	?___aldiv
  5605  045E  3000               	movlw	0
  5606  045F  3D66               	addwfc	_vPWM+1,w
  5607  0460  00A8               	movwf	?___aldiv+1
  5608  0461  01A9               	clrf	?___aldiv+2
  5609  0462  01AA               	clrf	?___aldiv+3
  5610  0463  3003               	movlw	3
  5611  0464  00AE               	movwf	?___aldiv+7
  5612  0465  30D0               	movlw	208
  5613  0466  00AD               	movwf	?___aldiv+6
  5614  0467  3090               	movlw	144
  5615  0468  00AC               	movwf	?___aldiv+5
  5616  0469  3000               	movlw	0
  5617  046A  00AB               	movwf	?___aldiv+4
  5618  046B  3186  26D4  3181   	fcall	___aldiv
  5619  046E  0020               	movlb	0	; select bank0
  5620  046F  0828               	movf	?___aldiv+1,w
  5621  0470  01B7               	clrf	?_PWMSetPeriod+1
  5622  0471  07B7               	addwf	?_PWMSetPeriod+1,f
  5623  0472  0827               	movf	?___aldiv,w
  5624  0473  01B6               	clrf	?_PWMSetPeriod
  5625  0474  07B6               	addwf	?_PWMSetPeriod,f
  5626  0475  3197  27EA  3181   	fcall	_PWMSetPeriod
  5627  0478  0020               	movlb	0	; select bank0
  5628  0479  0865               	movf	_vPWM,w
  5629  047A  3E64               	addlw	100
  5630  047B  00A7               	movwf	?___aldiv
  5631  047C  3000               	movlw	0
  5632  047D  3D66               	addwfc	_vPWM+1,w
  5633  047E  00A8               	movwf	?___aldiv+1
  5634  047F  01A9               	clrf	?___aldiv+2
  5635  0480  01AA               	clrf	?___aldiv+3
  5636  0481  3001               	movlw	1
  5637  0482  00AE               	movwf	?___aldiv+7
  5638  0483  30E8               	movlw	232
  5639  0484  00AD               	movwf	?___aldiv+6
  5640  0485  3048               	movlw	72
  5641  0486  00AC               	movwf	?___aldiv+5
  5642  0487  3000               	movlw	0
  5643  0488  00AB               	movwf	?___aldiv+4
  5644  0489  3186  26D4  3181   	fcall	___aldiv
  5645  048C  0020               	movlb	0	; select bank0
  5646  048D  0828               	movf	?___aldiv+1,w
  5647  048E  01B7               	clrf	?_PWMSetDutyCycle+1
  5648  048F  07B7               	addwf	?_PWMSetDutyCycle+1,f
  5649  0490  0827               	movf	?___aldiv,w
  5650  0491  01B6               	clrf	?_PWMSetDutyCycle
  5651  0492  07B6               	addwf	?_PWMSetDutyCycle,f
  5652  0493  3187  27F5  3181   	fcall	_PWMSetDutyCycle
  5653  0496  3002               	movlw	2
  5654  0497  0020               	movlb	0	; select bank0
  5655  0498  00CA               	movwf	??_main+2
  5656  0499  3004               	movlw	4
  5657  049A  00C9               	movwf	??_main+1
  5658  049B  30BA               	movlw	186
  5659  049C  00C8               	movwf	??_main
  5660  049D                     u6767:	
  5661  049D  0BC8               	decfsz	??_main,f
  5662  049E  2C9D               	goto	u6767
  5663  049F  0BC9               	decfsz	??_main+1,f
  5664  04A0  2C9D               	goto	u6767
  5665  04A1  0BCA               	decfsz	??_main+2,f
  5666  04A2  2C9D               	goto	u6767
  5667  04A3  0000               	nop
  5668                           
  5669                           ;main.c: 211: stMAX = 1;
  5670  04A4  0021               	movlb	1	; select bank1
  5671  04A5  01EE               	clrf	_stMAX^(0+128)
  5672  04A6  0AEE               	incf	_stMAX^(0+128),f
  5673  04A7                     l5087:	
  5674                           
  5675                           ;main.c: 212: }
  5676                           ;main.c: 214: Vavr_old = Vavr;
  5677  04A7  0020               	movlb	0	; select bank0
  5678  04A8  0855               	movf	_Vavr+1,w
  5679  04A9  0021               	movlb	1	; select bank1
  5680  04AA  01B5               	clrf	(_Vavr_old+1)^(0+128)
  5681  04AB  07B5               	addwf	(_Vavr_old+1)^(0+128),f
  5682  04AC  0020               	movlb	0	; select bank0
  5683  04AD  0854               	movf	_Vavr,w
  5684  04AE  0021               	movlb	1	; select bank1
  5685  04AF  01B4               	clrf	_Vavr_old^(0+128)
  5686  04B0  07B4               	addwf	_Vavr_old^(0+128),f
  5687                           
  5688                           ;main.c: 221: sprintf(chBufADC,"%d\r\n\n",Vavr);
  5689  04B1  3019               	movlw	(STR_1| (0+32768))& (0+255)
  5690  04B2  0020               	movlb	0	; select bank0
  5691  04B3  00C8               	movwf	??_main
  5692  04B4  0848               	movf	??_main,w
  5693  04B5  00B5               	movwf	?_sprintf
  5694  04B6  0855               	movf	_Vavr+1,w
  5695  04B7  01B7               	clrf	?_sprintf+2
  5696  04B8  07B7               	addwf	?_sprintf+2,f
  5697  04B9  0854               	movf	_Vavr,w
  5698  04BA  01B6               	clrf	?_sprintf+1
  5699  04BB  07B6               	addwf	?_sprintf+1,f
  5700  04BC  3056               	movlw	_chBufADC& (0+255)
  5701  04BD  318A  22D5  3181   	fcall	_sprintf
  5702  04C0                     l5091:	
  5703                           ;main.c: 222: while(!UARTSend(chBufADC,0));
  5704                           
  5705  04C0  0020               	movlb	0	; select bank0
  5706  04C1  01A7               	clrf	?_UARTSend
  5707  04C2  3056               	movlw	_chBufADC& (0+255)
  5708  04C3  3187  2756  3181   	fcall	_UARTSend
  5709  04C6  3A00               	xorlw	0
  5710  04C7  1D03               	btfss	3,2
  5711  04C8  29C6               	goto	l5093
  5712  04C9  2CC0               	goto	l5091
  5713  04CA                     l444:	
  5714                           ;main.c: 224: }
  5715                           ;main.c: 228: }
  5716                           ;main.c: 230: while(1)
  5717                           
  5718                           
  5719                           ;main.c: 231: {
  5720                           ;main.c: 234: if (flgTicTac == 1)
  5721  04CA  0020               	movlb	0	; select bank0
  5722  04CB  318E  1D67         	btfss	_flgTicTac/(0+8),_flgTicTac& (0+7)	;volatile
  5723  04CD  2E3F               	goto	l5327
  5724                           
  5725                           ;main.c: 235: {
  5726                           ;main.c: 236: flgTicTac = 0;
  5727  04CE  1167               	bcf	_flgTicTac/(0+8),_flgTicTac& (0+7)	;volatile
  5728                           
  5729                           ;main.c: 238: cntCur++;
  5730  04CF  3001               	movlw	1
  5731  04D0  0021               	movlb	1	; select bank1
  5732  04D1  07C0               	addwf	_cntCur^(0+128),f
  5733  04D2  3000               	movlw	0
  5734  04D3  3DC1               	addwfc	(_cntCur+1)^(0+128),f
  5735                           
  5736                           ;main.c: 239: cntOS++;
  5737  04D4  3001               	movlw	1
  5738  04D5  0022               	movlb	2	; select bank2
  5739  04D6  07CC               	addwf	_cntOS^(0+256),f
  5740  04D7  3000               	movlw	0
  5741  04D8  3DCD               	addwfc	(_cntOS+1)^(0+256),f
  5742  04D9  3000               	movlw	0
  5743  04DA  3DCE               	addwfc	(_cntOS+2)^(0+256),f
  5744  04DB  3000               	movlw	0
  5745  04DC  3DCF               	addwfc	(_cntOS+3)^(0+256),f
  5746                           
  5747                           ;main.c: 241: vADCAN0 = ReadADC(1);
  5748  04DD  3001               	movlw	1
  5749  04DE  318A  2200  3181   	fcall	_ReadADC
  5750  04E1  0020               	movlb	0	; select bank0
  5751  04E2  0828               	movf	?_ReadADC+1,w
  5752  04E3  0021               	movlb	1	; select bank1
  5753  04E4  01CB               	clrf	(_vADCAN0+1)^(0+128)
  5754  04E5  07CB               	addwf	(_vADCAN0+1)^(0+128),f
  5755  04E6  0020               	movlb	0	; select bank0
  5756  04E7  0827               	movf	?_ReadADC,w
  5757  04E8  0021               	movlb	1	; select bank1
  5758  04E9  01CA               	clrf	_vADCAN0^(0+128)
  5759  04EA  07CA               	addwf	_vADCAN0^(0+128),f
  5760                           
  5761                           ;main.c: 242: vADCAN9 = ReadADC(9);
  5762  04EB  3009               	movlw	9
  5763  04EC  318A  2200  3181   	fcall	_ReadADC
  5764  04EF  0020               	movlb	0	; select bank0
  5765  04F0  0828               	movf	?_ReadADC+1,w
  5766  04F1  01E1               	clrf	main@vADCAN9+1
  5767  04F2  07E1               	addwf	main@vADCAN9+1,f
  5768  04F3  0827               	movf	?_ReadADC,w
  5769  04F4  01E0               	clrf	main@vADCAN9
  5770  04F5  07E0               	addwf	main@vADCAN9,f
  5771                           
  5772                           ;main.c: 244: temp = vADCAN9;
  5773  04F6  0861               	movf	main@vADCAN9+1,w
  5774  04F7  0023               	movlb	3	; select bank3
  5775  04F8  01B6               	clrf	(main@temp+1)^(0+384)
  5776  04F9  07B6               	addwf	(main@temp+1)^(0+384),f
  5777  04FA  0020               	movlb	0	; select bank0
  5778  04FB  0860               	movf	main@vADCAN9,w
  5779  04FC  0023               	movlb	3	; select bank3
  5780  04FD  01B5               	clrf	main@temp^(0+384)
  5781  04FE  07B5               	addwf	main@temp^(0+384),f
  5782                           
  5783                           ;main.c: 247: vADCAN9 = vADCAN9_Old +(vADCAN9-vADCAN9_Old)/15;
  5784  04FF  300F               	movlw	15
  5785  0500  0020               	movlb	0	; select bank0
  5786  0501  00A7               	movwf	?___awdiv
  5787  0502  3000               	movlw	0
  5788  0503  00A8               	movwf	?___awdiv+1
  5789  0504  0021               	movlb	1	; select bank1
  5790  0505  095A               	comf	main@vADCAN9_Old^(0+128),w
  5791  0506  0020               	movlb	0	; select bank0
  5792  0507  00C8               	movwf	??_main
  5793  0508  0021               	movlb	1	; select bank1
  5794  0509  095B               	comf	(main@vADCAN9_Old+1)^(0+128),w
  5795  050A  0020               	movlb	0	; select bank0
  5796  050B  00C9               	movwf	??_main+1
  5797  050C  0AC8               	incf	??_main,f
  5798  050D  1903               	skipnz
  5799  050E  0AC9               	incf	??_main+1,f
  5800  050F  0860               	movf	main@vADCAN9,w
  5801  0510  0748               	addwf	??_main,w
  5802  0511  00A9               	movwf	?___awdiv+2
  5803  0512  0861               	movf	main@vADCAN9+1,w
  5804  0513  3D49               	addwfc	??_main+1,w
  5805  0514  00AA               	movwf	?___awdiv+3
  5806  0515  318A  2281  3181   	fcall	___awdiv
  5807  0518  0021               	movlb	1	; select bank1
  5808  0519  085A               	movf	main@vADCAN9_Old^(0+128),w
  5809  051A  0020               	movlb	0	; select bank0
  5810  051B  0727               	addwf	?___awdiv,w
  5811  051C  00E0               	movwf	main@vADCAN9
  5812  051D  0021               	movlb	1	; select bank1
  5813  051E  085B               	movf	(main@vADCAN9_Old+1)^(0+128),w
  5814  051F  0020               	movlb	0	; select bank0
  5815  0520  3D28               	addwfc	?___awdiv+1,w
  5816  0521  00E1               	movwf	main@vADCAN9+1
  5817                           
  5818                           ;main.c: 249: if ((vADCAN9==vADCAN9_Old)&&(temp!=vADCAN9))
  5819  0522  0021               	movlb	1	; select bank1
  5820  0523  085B               	movf	(main@vADCAN9_Old+1)^(0+128),w
  5821  0524  0020               	movlb	0	; select bank0
  5822  0525  0661               	xorwf	main@vADCAN9+1,w
  5823  0526  1D03               	skipz
  5824  0527  2D2C               	goto	u5255
  5825  0528  0021               	movlb	1	; select bank1
  5826  0529  085A               	movf	main@vADCAN9_Old^(0+128),w
  5827  052A  0020               	movlb	0	; select bank0
  5828  052B  0660               	xorwf	main@vADCAN9,w
  5829  052C                     u5255:	
  5830  052C  1D03               	skipz
  5831  052D  2D4E               	goto	l446
  5832  052E  0023               	movlb	3	; select bank3
  5833  052F  0836               	movf	(main@temp+1)^(0+384),w
  5834  0530  0020               	movlb	0	; select bank0
  5835  0531  0661               	xorwf	main@vADCAN9+1,w
  5836  0532  1D03               	skipz
  5837  0533  2D38               	goto	u5265
  5838  0534  0023               	movlb	3	; select bank3
  5839  0535  0835               	movf	main@temp^(0+384),w
  5840  0536  0020               	movlb	0	; select bank0
  5841  0537  0660               	xorwf	main@vADCAN9,w
  5842  0538                     u5265:	
  5843  0538  1903               	skipnz
  5844  0539  2D4E               	goto	l446
  5845                           
  5846                           ;main.c: 250: {
  5847                           ;main.c: 251: if ((temp>vADCAN9))
  5848  053A  0023               	movlb	3	; select bank3
  5849  053B  0836               	movf	(main@temp+1)^(0+384),w
  5850  053C  0020               	movlb	0	; select bank0
  5851  053D  0261               	subwf	main@vADCAN9+1,w
  5852  053E  1D03               	skipz
  5853  053F  2D44               	goto	u5275
  5854  0540  0023               	movlb	3	; select bank3
  5855  0541  0835               	movf	main@temp^(0+384),w
  5856  0542  0020               	movlb	0	; select bank0
  5857  0543  0260               	subwf	main@vADCAN9,w
  5858  0544                     u5275:	
  5859  0544  1803               	skipnc
  5860  0545  2D4A               	goto	l5115
  5861                           
  5862                           ;main.c: 252: {
  5863                           ;main.c: 253: vADCAN9++;
  5864  0546  3001               	movlw	1
  5865  0547  07E0               	addwf	main@vADCAN9,f
  5866  0548  3000               	movlw	0
  5867  0549  2D4D               	goto	L2
  5868  054A                     l5115:	
  5869                           ;main.c: 254: }
  5870                           
  5871                           
  5872                           ;main.c: 255: else
  5873                           ;main.c: 256: {
  5874                           ;main.c: 257: vADCAN9--;
  5875  054A  30FF               	movlw	255
  5876  054B  07E0               	addwf	main@vADCAN9,f
  5877  054C  30FF               	movlw	255
  5878  054D                     L2:	
  5879  054D  3DE1               	addwfc	main@vADCAN9+1,f
  5880  054E                     l446:	
  5881                           
  5882                           ;main.c: 258: }
  5883                           ;main.c: 259: }
  5884                           ;main.c: 264: if ((flgOffRls==1)&&(flgTurnOnDly_Offset==1))
  5885  054E  0021               	movlb	1	; select bank1
  5886  054F  0869               	movf	_flgOffRls^(0+128),w
  5887  0550  3A01               	xorlw	1
  5888  0551  1D03               	skipz
  5889  0552  2D58               	goto	l5121
  5890  0553  086B               	movf	_flgTurnOnDly_Offset^(0+128),w
  5891  0554  3A01               	xorlw	1
  5892  0555  1D03               	skipz
  5893  0556  2D58               	goto	l5121
  5894                           
  5895                           ;main.c: 265: {
  5896                           ;main.c: 267: flgOffRls = 0;
  5897  0557  01E9               	clrf	_flgOffRls^(0+128)
  5898  0558                     l5121:	
  5899                           
  5900                           ;main.c: 268: }
  5901                           ;main.c: 272: if ((((vADCAN9 > vSenOff + (100))&&(vADCAN9_Old > vSenOff + (100))))||(cnt
      +                          NoPres>63))
  5902  0558  0856               	movf	_vSenOff^(0+128),w
  5903  0559  3E64               	addlw	100
  5904  055A  0020               	movlb	0	; select bank0
  5905  055B  00C8               	movwf	??_main
  5906  055C  3000               	movlw	0
  5907  055D  0021               	movlb	1	; select bank1
  5908  055E  3D57               	addwfc	(_vSenOff+1)^(0+128),w
  5909  055F  0020               	movlb	0	; select bank0
  5910  0560  00C9               	movwf	??_main+1
  5911  0561  0849               	movf	??_main+1,w
  5912  0562  3A80               	xorlw	128
  5913  0563  00CA               	movwf	??_main+2
  5914  0564  0861               	movf	main@vADCAN9+1,w
  5915  0565  3A80               	xorlw	128
  5916  0566  024A               	subwf	??_main+2,w
  5917  0567  1D03               	skipz
  5918  0568  2D6B               	goto	u5305
  5919  0569  0860               	movf	main@vADCAN9,w
  5920  056A  0248               	subwf	??_main,w
  5921  056B                     u5305:	
  5922  056B  1803               	skipnc
  5923  056C  2D87               	goto	l5125
  5924  056D  0021               	movlb	1	; select bank1
  5925  056E  0856               	movf	_vSenOff^(0+128),w
  5926  056F  3E64               	addlw	100
  5927  0570  0020               	movlb	0	; select bank0
  5928  0571  00C8               	movwf	??_main
  5929  0572  3000               	movlw	0
  5930  0573  0021               	movlb	1	; select bank1
  5931  0574  3D57               	addwfc	(_vSenOff+1)^(0+128),w
  5932  0575  0020               	movlb	0	; select bank0
  5933  0576  00C9               	movwf	??_main+1
  5934  0577  0849               	movf	??_main+1,w
  5935  0578  3A80               	xorlw	128
  5936  0579  00CA               	movwf	??_main+2
  5937  057A  0021               	movlb	1	; select bank1
  5938  057B  085B               	movf	(main@vADCAN9_Old+1)^(0+128),w
  5939  057C  3A80               	xorlw	128
  5940  057D  0020               	movlb	0	; select bank0
  5941  057E  024A               	subwf	??_main+2,w
  5942  057F  1D03               	skipz
  5943  0580  2D85               	goto	u5315
  5944  0581  0021               	movlb	1	; select bank1
  5945  0582  085A               	movf	main@vADCAN9_Old^(0+128),w
  5946  0583  0020               	movlb	0	; select bank0
  5947  0584  0248               	subwf	??_main,w
  5948  0585                     u5315:	
  5949  0585  1C03               	skipc
  5950  0586  2D93               	goto	l5127
  5951  0587                     l5125:	
  5952  0587  0021               	movlb	1	; select bank1
  5953  0588  0843               	movf	(_cntNoPres+1)^(0+128),w
  5954  0589  3A80               	xorlw	128
  5955  058A  00FF               	movwf	127
  5956  058B  3080               	movlw	128
  5957  058C  027F               	subwf	127,w
  5958  058D  1D03               	skipz
  5959  058E  2D91               	goto	u5325
  5960  058F  3040               	movlw	64
  5961  0590  0242               	subwf	_cntNoPres^(0+128),w
  5962  0591                     u5325:	
  5963  0591  1C03               	skipc
  5964  0592  2DA3               	goto	l5135
  5965  0593                     l5127:	
  5966                           
  5967                           ;main.c: 273: {
  5968                           ;main.c: 274: vSenOff = vADCAN9;
  5969  0593  0020               	movlb	0	; select bank0
  5970  0594  0861               	movf	main@vADCAN9+1,w
  5971  0595  0021               	movlb	1	; select bank1
  5972  0596  01D7               	clrf	(_vSenOff+1)^(0+128)
  5973  0597  07D7               	addwf	(_vSenOff+1)^(0+128),f
  5974  0598  0020               	movlb	0	; select bank0
  5975  0599  0860               	movf	main@vADCAN9,w
  5976  059A  0021               	movlb	1	; select bank1
  5977  059B  01D6               	clrf	_vSenOff^(0+128)
  5978  059C  07D6               	addwf	_vSenOff^(0+128),f
  5979                           
  5980                           ;main.c: 275: cntNoPres = 0;
  5981  059D  01C2               	clrf	_cntNoPres^(0+128)
  5982  059E  01C3               	clrf	(_cntNoPres+1)^(0+128)
  5983                           
  5984                           ;main.c: 276: cntDiff = 0;
  5985  059F  01E5               	clrf	_cntDiff^(0+128)
  5986                           
  5987                           ;main.c: 277: vSenDiff = 0;
  5988  05A0  0020               	movlb	0	; select bank0
  5989  05A1  01DE               	clrf	_vSenDiff
  5990  05A2  01DF               	clrf	_vSenDiff+1
  5991  05A3                     l5135:	
  5992                           
  5993                           ;main.c: 278: }
  5994                           ;main.c: 281: cntDiff++;
  5995  05A3  3001               	movlw	1
  5996  05A4  0020               	movlb	0	; select bank0
  5997  05A5  00C8               	movwf	??_main
  5998  05A6  0848               	movf	??_main,w
  5999  05A7  0021               	movlb	1	; select bank1
  6000  05A8  07E5               	addwf	_cntDiff^(0+128),f
  6001                           
  6002                           ;main.c: 282: if (cntDiff == 8)
  6003  05A9  0865               	movf	_cntDiff^(0+128),w
  6004  05AA  3A08               	xorlw	8
  6005  05AB  1D03               	skipz
  6006  05AC  2DCF               	goto	l5147
  6007                           
  6008                           ;main.c: 283: {
  6009                           ;main.c: 284: if (bFlg)
  6010  05AD  0864               	movf	_bFlg^(0+128),w
  6011  05AE  1903               	btfsc	3,2
  6012  05AF  2DBB               	goto	l5145
  6013                           
  6014                           ;main.c: 285: {
  6015                           ;main.c: 286: bFlg = 0;
  6016  05B0  01E4               	clrf	_bFlg^(0+128)
  6017                           
  6018                           ;main.c: 287: vSenOff = vADCAN9;
  6019  05B1  0020               	movlb	0	; select bank0
  6020  05B2  0861               	movf	main@vADCAN9+1,w
  6021  05B3  0021               	movlb	1	; select bank1
  6022  05B4  01D7               	clrf	(_vSenOff+1)^(0+128)
  6023  05B5  07D7               	addwf	(_vSenOff+1)^(0+128),f
  6024  05B6  0020               	movlb	0	; select bank0
  6025  05B7  0860               	movf	main@vADCAN9,w
  6026  05B8  0021               	movlb	1	; select bank1
  6027  05B9  01D6               	clrf	_vSenOff^(0+128)
  6028  05BA  07D6               	addwf	_vSenOff^(0+128),f
  6029  05BB                     l5145:	
  6030                           
  6031                           ;main.c: 288: }
  6032                           ;main.c: 289: vSenDiff = vSenOff - vADCAN9;
  6033  05BB  0020               	movlb	0	; select bank0
  6034  05BC  0960               	comf	main@vADCAN9,w
  6035  05BD  00C8               	movwf	??_main
  6036  05BE  0961               	comf	main@vADCAN9+1,w
  6037  05BF  00C9               	movwf	??_main+1
  6038  05C0  0AC8               	incf	??_main,f
  6039  05C1  1903               	skipnz
  6040  05C2  0AC9               	incf	??_main+1,f
  6041  05C3  0021               	movlb	1	; select bank1
  6042  05C4  0856               	movf	_vSenOff^(0+128),w
  6043  05C5  0020               	movlb	0	; select bank0
  6044  05C6  0748               	addwf	??_main,w
  6045  05C7  00DE               	movwf	_vSenDiff
  6046  05C8  0021               	movlb	1	; select bank1
  6047  05C9  0857               	movf	(_vSenOff+1)^(0+128),w
  6048  05CA  0020               	movlb	0	; select bank0
  6049  05CB  3D49               	addwfc	??_main+1,w
  6050  05CC  00DF               	movwf	_vSenDiff+1
  6051                           
  6052                           ;main.c: 290: cntDiff = 0;
  6053  05CD  0021               	movlb	1	; select bank1
  6054  05CE  01E5               	clrf	_cntDiff^(0+128)
  6055  05CF                     l5147:	
  6056                           
  6057                           ;main.c: 291: }
  6058                           ;main.c: 294: if (vADCAN9 > vSenOff - (100))
  6059  05CF  0856               	movf	_vSenOff^(0+128),w
  6060  05D0  3E9C               	addlw	156
  6061  05D1  0020               	movlb	0	; select bank0
  6062  05D2  00C8               	movwf	??_main
  6063  05D3  30FF               	movlw	255
  6064  05D4  0021               	movlb	1	; select bank1
  6065  05D5  3D57               	addwfc	(_vSenOff+1)^(0+128),w
  6066  05D6  0020               	movlb	0	; select bank0
  6067  05D7  00C9               	movwf	??_main+1
  6068  05D8  0849               	movf	??_main+1,w
  6069  05D9  3A80               	xorlw	128
  6070  05DA  00CA               	movwf	??_main+2
  6071  05DB  0861               	movf	main@vADCAN9+1,w
  6072  05DC  3A80               	xorlw	128
  6073  05DD  024A               	subwf	??_main+2,w
  6074  05DE  1D03               	skipz
  6075  05DF  2DE2               	goto	u5355
  6076  05E0  0860               	movf	main@vADCAN9,w
  6077  05E1  0248               	subwf	??_main,w
  6078  05E2                     u5355:	
  6079  05E2  1803               	skipnc
  6080  05E3  2DE7               	goto	l5151
  6081                           
  6082                           ;main.c: 295: {
  6083                           ;main.c: 296: flgOffRls = 1;
  6084  05E4  0021               	movlb	1	; select bank1
  6085  05E5  01E9               	clrf	_flgOffRls^(0+128)
  6086  05E6  0AE9               	incf	_flgOffRls^(0+128),f
  6087  05E7                     l5151:	
  6088                           
  6089                           ;main.c: 297: }
  6090                           ;main.c: 301: if ((vSenDiff > (40)))
  6091  05E7  0020               	movlb	0	; select bank0
  6092  05E8  085F               	movf	_vSenDiff+1,w
  6093  05E9  3A80               	xorlw	128
  6094  05EA  00FF               	movwf	127
  6095  05EB  3080               	movlw	128
  6096  05EC  027F               	subwf	127,w
  6097  05ED  1D03               	skipz
  6098  05EE  2DF1               	goto	u5365
  6099  05EF  3029               	movlw	41
  6100  05F0  025E               	subwf	_vSenDiff,w
  6101  05F1                     u5365:	
  6102  05F1  1C03               	skipc
  6103  05F2  2DFF               	goto	l5157
  6104                           
  6105                           ;main.c: 302: {
  6106                           ;main.c: 303: if (cntTurnOnDly_Offset<255) cntTurnOnDly_Offset++;
  6107  05F3  0021               	movlb	1	; select bank1
  6108  05F4  0867               	movf	_cntTurnOnDly_Offset^(0+128),w
  6109  05F5  3AFF               	xorlw	255
  6110  05F6  1903               	skipnz
  6111  05F7  2E0B               	goto	l5161
  6112  05F8  3001               	movlw	1
  6113  05F9  0020               	movlb	0	; select bank0
  6114  05FA  00C8               	movwf	??_main
  6115  05FB  0848               	movf	??_main,w
  6116  05FC  0021               	movlb	1	; select bank1
  6117  05FD  07E7               	addwf	_cntTurnOnDly_Offset^(0+128),f
  6118                           
  6119                           ;main.c: 304: }
  6120  05FE  2E0B               	goto	l5161
  6121  05FF                     l5157:	
  6122                           
  6123                           ;main.c: 305: else
  6124                           ;main.c: 306: {
  6125                           ;main.c: 307: cntTurnOnDly_Offset = 0;
  6126  05FF  0021               	movlb	1	; select bank1
  6127  0600  01E7               	clrf	_cntTurnOnDly_Offset^(0+128)
  6128                           
  6129                           ;main.c: 308: vADCAN9_mark = vADCAN9;
  6130  0601  0020               	movlb	0	; select bank0
  6131  0602  0861               	movf	main@vADCAN9+1,w
  6132  0603  0022               	movlb	2	; select bank2
  6133  0604  01D5               	clrf	(main@vADCAN9_mark+1)^(0+256)
  6134  0605  07D5               	addwf	(main@vADCAN9_mark+1)^(0+256),f
  6135  0606  0020               	movlb	0	; select bank0
  6136  0607  0860               	movf	main@vADCAN9,w
  6137  0608  0022               	movlb	2	; select bank2
  6138  0609  01D4               	clrf	main@vADCAN9_mark^(0+256)
  6139  060A  07D4               	addwf	main@vADCAN9_mark^(0+256),f
  6140  060B                     l5161:	
  6141                           
  6142                           ;main.c: 309: }
  6143                           ;main.c: 311: if (cntTurnOnDly_Offset>5)
  6144  060B  3006               	movlw	6
  6145  060C  0021               	movlb	1	; select bank1
  6146  060D  0267               	subwf	_cntTurnOnDly_Offset^(0+128),w
  6147  060E  1C03               	skipc
  6148  060F  2E13               	goto	l5165
  6149                           
  6150                           ;main.c: 312: {
  6151                           ;main.c: 313: flgTurnOnDly_Offset = 1;
  6152  0610  01EB               	clrf	_flgTurnOnDly_Offset^(0+128)
  6153  0611  0AEB               	incf	_flgTurnOnDly_Offset^(0+128),f
  6154                           
  6155                           ;main.c: 314: }
  6156  0612  2E14               	goto	l5167
  6157  0613                     l5165:	
  6158                           
  6159                           ;main.c: 315: else
  6160                           ;main.c: 316: {
  6161                           ;main.c: 317: flgTurnOnDly_Offset = 0;
  6162  0613  01EB               	clrf	_flgTurnOnDly_Offset^(0+128)
  6163  0614                     l5167:	
  6164                           
  6165                           ;main.c: 318: }
  6166                           ;main.c: 322: if (vSenDiff > (60))
  6167  0614  0020               	movlb	0	; select bank0
  6168  0615  085F               	movf	_vSenDiff+1,w
  6169  0616  3A80               	xorlw	128
  6170  0617  00FF               	movwf	127
  6171  0618  3080               	movlw	128
  6172  0619  027F               	subwf	127,w
  6173  061A  1D03               	skipz
  6174  061B  2E1E               	goto	u5395
  6175  061C  303D               	movlw	61
  6176  061D  025E               	subwf	_vSenDiff,w
  6177  061E                     u5395:	
  6178  061E  1C03               	skipc
  6179  061F  2E31               	goto	l5173
  6180                           
  6181                           ;main.c: 323: {
  6182                           ;main.c: 324: if (cntStepDwn<255)cntStepDwn++;
  6183  0620  0021               	movlb	1	; select bank1
  6184  0621  0847               	movf	(_cntStepDwn+1)^(0+128),w
  6185  0622  3A80               	xorlw	128
  6186  0623  00FF               	movwf	127
  6187  0624  3080               	movlw	128
  6188  0625  027F               	subwf	127,w
  6189  0626  1D03               	skipz
  6190  0627  2E2A               	goto	u5405
  6191  0628  30FF               	movlw	255
  6192  0629  0246               	subwf	_cntStepDwn^(0+128),w
  6193  062A                     u5405:	
  6194  062A  1803               	skipnc
  6195  062B  2E31               	goto	l5173
  6196  062C  3001               	movlw	1
  6197  062D  0021               	movlb	1	; select bank1
  6198  062E  07C6               	addwf	_cntStepDwn^(0+128),f
  6199  062F  3000               	movlw	0
  6200  0630  3DC7               	addwfc	(_cntStepDwn+1)^(0+128),f
  6201  0631                     l5173:	
  6202                           
  6203                           ;main.c: 325: }
  6204                           ;main.c: 327: if (vSenDiff < (60)/2)
  6205  0631  0020               	movlb	0	; select bank0
  6206  0632  085F               	movf	_vSenDiff+1,w
  6207  0633  3A80               	xorlw	128
  6208  0634  00FF               	movwf	127
  6209  0635  3080               	movlw	128
  6210  0636  027F               	subwf	127,w
  6211  0637  1D03               	skipz
  6212  0638  2E3B               	goto	u5415
  6213  0639  301E               	movlw	30
  6214  063A  025E               	subwf	_vSenDiff,w
  6215  063B                     u5415:	
  6216  063B  1803               	skipnc
  6217  063C  2E40               	goto	l5177
  6218                           
  6219                           ;main.c: 328: {
  6220                           ;main.c: 329: cntStepDwn = 0;
  6221  063D  0021               	movlb	1	; select bank1
  6222  063E  01C6               	clrf	_cntStepDwn^(0+128)
  6223  063F  01C7               	clrf	(_cntStepDwn+1)^(0+128)
  6224  0640                     l5177:	
  6225                           
  6226                           ;main.c: 330: }
  6227                           ;main.c: 332: if (cntStepDwn>4)
  6228  0640  0021               	movlb	1	; select bank1
  6229  0641  0847               	movf	(_cntStepDwn+1)^(0+128),w
  6230  0642  3A80               	xorlw	128
  6231  0643  00FF               	movwf	127
  6232  0644  3080               	movlw	128
  6233  0645  027F               	subwf	127,w
  6234  0646  1D03               	skipz
  6235  0647  2E4A               	goto	u5425
  6236  0648  3005               	movlw	5
  6237  0649  0246               	subwf	_cntStepDwn^(0+128),w
  6238  064A                     u5425:	
  6239  064A  1C03               	skipc
  6240  064B  2E4F               	goto	l5181
  6241                           
  6242                           ;main.c: 333: {
  6243                           ;main.c: 334: flgStepDwn = 1;
  6244  064C  0021               	movlb	1	; select bank1
  6245  064D  01EA               	clrf	_flgStepDwn^(0+128)
  6246  064E  0AEA               	incf	_flgStepDwn^(0+128),f
  6247  064F                     l5181:	
  6248                           
  6249                           ;main.c: 335: }
  6250                           ;main.c: 340: if ((vADCAN9> 3000+3*100)
  6251                           ;main.c: 341: &&(vADCAN9_Old> 3000+3*100)
  6252                           ;main.c: 342: &&(bFlg==0))
  6253  064F  0020               	movlb	0	; select bank0
  6254  0650  0861               	movf	main@vADCAN9+1,w
  6255  0651  3A80               	xorlw	128
  6256  0652  00FF               	movwf	127
  6257  0653  308C               	movlw	140
  6258  0654  027F               	subwf	127,w
  6259  0655  1D03               	skipz
  6260  0656  2E59               	goto	u5435
  6261  0657  30E5               	movlw	229
  6262  0658  0260               	subwf	main@vADCAN9,w
  6263  0659                     u5435:	
  6264  0659  1C03               	skipc
  6265  065A  2E89               	goto	l5203
  6266  065B  0021               	movlb	1	; select bank1
  6267  065C  085B               	movf	(main@vADCAN9_Old+1)^(0+128),w
  6268  065D  3A80               	xorlw	128
  6269  065E  00FF               	movwf	127
  6270  065F  308C               	movlw	140
  6271  0660  027F               	subwf	127,w
  6272  0661  1D03               	skipz
  6273  0662  2E65               	goto	u5445
  6274  0663  30E5               	movlw	229
  6275  0664  025A               	subwf	main@vADCAN9_Old^(0+128),w
  6276  0665                     u5445:	
  6277  0665  1C03               	skipc
  6278  0666  2E89               	goto	l5203
  6279  0667  0021               	movlb	1	; select bank1
  6280  0668  08E4               	movf	_bFlg^(0+128),f
  6281  0669  1D03               	skipz
  6282  066A  2E89               	goto	l5203
  6283                           
  6284                           ;main.c: 343: {
  6285                           ;main.c: 344: if (Voff<250) Voff +=1;
  6286  066B  30FA               	movlw	250
  6287  066C  0020               	movlb	0	; select bank0
  6288  066D  0264               	subwf	_Voff,w
  6289  066E  1803               	skipnc
  6290  066F  2E74               	goto	l5191
  6291  0670  3001               	movlw	1
  6292  0671  00C8               	movwf	??_main
  6293  0672  0848               	movf	??_main,w
  6294  0673  07E4               	addwf	_Voff,f
  6295  0674                     l5191:	
  6296                           
  6297                           ;main.c: 345: DACSet(Voff);
  6298  0674  0864               	movf	_Voff,w
  6299  0675  3188  2059  3181   	fcall	_DACSet
  6300                           
  6301                           ;main.c: 348: bFlg = 1;
  6302  0678  0021               	movlb	1	; select bank1
  6303  0679  01E4               	clrf	_bFlg^(0+128)
  6304  067A  0AE4               	incf	_bFlg^(0+128),f
  6305                           
  6306                           ;main.c: 349: cntDiff =-50;
  6307  067B  30CE               	movlw	206
  6308  067C  0020               	movlb	0	; select bank0
  6309  067D  00C8               	movwf	??_main
  6310  067E  0848               	movf	??_main,w
  6311  067F  0021               	movlb	1	; select bank1
  6312  0680  00E5               	movwf	_cntDiff^(0+128)
  6313                           
  6314                           ;main.c: 350: cntNoPres =-10;
  6315  0681  30F6               	movlw	246
  6316  0682  00C2               	movwf	_cntNoPres^(0+128)
  6317  0683  30FF               	movlw	255
  6318  0684  00C3               	movwf	(_cntNoPres^(0+128)+1)
  6319                           
  6320                           ;main.c: 351: vSenDiff = 0;
  6321  0685  0020               	movlb	0	; select bank0
  6322  0686  01DE               	clrf	_vSenDiff
  6323  0687  01DF               	clrf	_vSenDiff+1
  6324  0688  2ED1               	goto	l5221
  6325  0689                     l5203:	
  6326                           ;main.c: 353: }
  6327                           
  6328                           ;main.c: 352: stBlinking = 0;
  6329                           
  6330                           
  6331                           ;main.c: 355: else
  6332                           ;main.c: 356: {
  6333                           ;main.c: 357: if ((vSenDiff > (900)))
  6334  0689  0020               	movlb	0	; select bank0
  6335  068A  085F               	movf	_vSenDiff+1,w
  6336  068B  3A80               	xorlw	128
  6337  068C  00FF               	movwf	127
  6338  068D  3083               	movlw	131
  6339  068E  027F               	subwf	127,w
  6340  068F  1D03               	skipz
  6341  0690  2E93               	goto	u5475
  6342  0691  3085               	movlw	133
  6343  0692  025E               	subwf	_vSenDiff,w
  6344  0693                     u5475:	
  6345  0693  1C03               	skipc
  6346  0694  2E97               	goto	l5207
  6347                           
  6348                           ;main.c: 358: {
  6349                           ;main.c: 359: stBlinking = 4;
  6350  0695  3004               	movlw	4
  6351  0696  2EB2               	goto	L4
  6352  0697                     l5207:	
  6353                           ;main.c: 360: }
  6354                           
  6355                           
  6356                           ;main.c: 361: else if ((vSenDiff > (400)))
  6357  0697  0020               	movlb	0	; select bank0
  6358  0698  085F               	movf	_vSenDiff+1,w
  6359  0699  3A80               	xorlw	128
  6360  069A  00FF               	movwf	127
  6361  069B  3081               	movlw	129
  6362  069C  027F               	subwf	127,w
  6363  069D  1D03               	skipz
  6364  069E  2EA1               	goto	u5485
  6365  069F  3091               	movlw	145
  6366  06A0  025E               	subwf	_vSenDiff,w
  6367  06A1                     u5485:	
  6368  06A1  1C03               	skipc
  6369  06A2  2EA5               	goto	l5211
  6370                           
  6371                           ;main.c: 362: {
  6372                           ;main.c: 363: stBlinking = 3;
  6373  06A3  3003               	movlw	3
  6374  06A4  2EB2               	goto	L4
  6375  06A5                     l5211:	
  6376                           ;main.c: 364: }
  6377                           
  6378                           
  6379                           ;main.c: 365: else if ((vSenDiff > (150)))
  6380  06A5  0020               	movlb	0	; select bank0
  6381  06A6  085F               	movf	_vSenDiff+1,w
  6382  06A7  3A80               	xorlw	128
  6383  06A8  00FF               	movwf	127
  6384  06A9  3080               	movlw	128
  6385  06AA  027F               	subwf	127,w
  6386  06AB  1D03               	skipz
  6387  06AC  2EAF               	goto	u5495
  6388  06AD  3097               	movlw	151
  6389  06AE  025E               	subwf	_vSenDiff,w
  6390  06AF                     u5495:	
  6391  06AF  1C03               	skipc
  6392  06B0  2EB9               	goto	l5215
  6393                           
  6394                           ;main.c: 366: {
  6395                           ;main.c: 367: stBlinking = 2;
  6396  06B1  3002               	movlw	2
  6397  06B2                     L4:	
  6398  06B2  0020               	movlb	0	; select bank0
  6399  06B3  00C8               	movwf	??_main
  6400  06B4  0848               	movf	??_main,w
  6401  06B5  0023               	movlb	3	; select bank3
  6402  06B6  00BB               	movwf	main@stBlinking^(0+384)
  6403  06B7                     L11:	
  6404                           
  6405                           ;main.c: 368: }
  6406  06B7  318C  2CE4         	goto	l5267
  6407  06B9                     l5215:	
  6408                           
  6409                           ;main.c: 369: else if ((vSenDiff > (90))||(flgTurnOnDly_Offset==1)||(flgStepDwn))
  6410  06B9  0020               	movlb	0	; select bank0
  6411  06BA  085F               	movf	_vSenDiff+1,w
  6412  06BB  3A80               	xorlw	128
  6413  06BC  00FF               	movwf	127
  6414  06BD  3080               	movlw	128
  6415  06BE  027F               	subwf	127,w
  6416  06BF  1D03               	skipz
  6417  06C0  2EC3               	goto	u5505
  6418  06C1  305B               	movlw	91
  6419  06C2  025E               	subwf	_vSenDiff,w
  6420  06C3                     u5505:	
  6421  06C3  1803               	skipnc
  6422  06C4  2ECD               	goto	l478
  6423  06C5  0021               	movlb	1	; select bank1
  6424  06C6  086B               	movf	_flgTurnOnDly_Offset^(0+128),w
  6425  06C7  3A01               	xorlw	1
  6426  06C8  1903               	skipnz
  6427  06C9  2ECD               	goto	l478
  6428  06CA  086A               	movf	_flgStepDwn^(0+128),w
  6429  06CB  1903               	btfsc	3,2
  6430  06CC  2ED1               	goto	l5221
  6431  06CD                     l478:	
  6432                           
  6433                           ;main.c: 370: {
  6434                           ;main.c: 371: stBlinking = 1;
  6435  06CD  0023               	movlb	3	; select bank3
  6436  06CE  01BB               	clrf	main@stBlinking^(0+384)
  6437  06CF  0ABB               	incf	main@stBlinking^(0+384),f
  6438                           
  6439                           ;main.c: 372: }
  6440  06D0  2EB7               	goto	L11
  6441  06D1                     l5221:	
  6442                           
  6443                           ;main.c: 373: else
  6444                           ;main.c: 374: {
  6445                           ;main.c: 375: stBlinking = 0;
  6446  06D1  0023               	movlb	3	; select bank3
  6447  06D2  01BB               	clrf	main@stBlinking^(0+384)
  6448                           
  6449                           ;main.c: 376: }
  6450                           ;main.c: 377: }
  6451                           ;main.c: 382: switch (stBlinking)
  6452  06D3  2EB7               	goto	L11
  6453                           
  6454                           	psect	text1
  6455  0966                     __ptext1:	
  6456 ;; *************** function ___lmul *****************
  6457 ;; Defined at:
  6458 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lmul.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  multiplier      4    7[BANK0 ] unsigned long 
  6461 ;;  multiplicand    4   11[BANK0 ] unsigned long 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  product         4   15[BANK0 ] unsigned long 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  4    7[BANK0 ] unsigned long 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6473 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6476 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6477 ;;Total ram usage:       12 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    2
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_main
  6484 ;;		_SearchingOffSet
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function ___lmul
  6490  0966                     ___lmul:	
  6491                           
  6492                           ;incstack = 0
  6493                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6494  0966  3000               	movlw	0
  6495  0967  0020               	movlb	0	; select bank0
  6496  0968  00B2               	movwf	___lmul@product+3
  6497  0969  3000               	movlw	0
  6498  096A  00B1               	movwf	___lmul@product+2
  6499  096B  3000               	movlw	0
  6500  096C  00B0               	movwf	___lmul@product+1
  6501  096D  3000               	movlw	0
  6502  096E  00AF               	movwf	___lmul@product
  6503  096F                     l5779:	
  6504  096F  1C27               	btfss	___lmul@multiplier,0
  6505  0970  2979               	goto	l5783
  6506  0971  082B               	movf	___lmul@multiplicand,w
  6507  0972  07AF               	addwf	___lmul@product,f
  6508  0973  082C               	movf	___lmul@multiplicand+1,w
  6509  0974  3DB0               	addwfc	___lmul@product+1,f
  6510  0975  082D               	movf	___lmul@multiplicand+2,w
  6511  0976  3DB1               	addwfc	___lmul@product+2,f
  6512  0977  082E               	movf	___lmul@multiplicand+3,w
  6513  0978  3DB2               	addwfc	___lmul@product+3,f
  6514  0979                     l5783:	
  6515  0979  3001               	movlw	1
  6516  097A                     u6495:	
  6517  097A  35AB               	lslf	___lmul@multiplicand,f
  6518  097B  0DAC               	rlf	___lmul@multiplicand+1,f
  6519  097C  0DAD               	rlf	___lmul@multiplicand+2,f
  6520  097D  0DAE               	rlf	___lmul@multiplicand+3,f
  6521  097E  0B89               	decfsz	9,f
  6522  097F  297A               	goto	u6495
  6523  0980  3001               	movlw	1
  6524  0981                     u6505:	
  6525  0981  36AA               	lsrf	___lmul@multiplier+3,f
  6526  0982  0CA9               	rrf	___lmul@multiplier+2,f
  6527  0983  0CA8               	rrf	___lmul@multiplier+1,f
  6528  0984  0CA7               	rrf	___lmul@multiplier,f
  6529  0985  0B89               	decfsz	9,f
  6530  0986  2981               	goto	u6505
  6531  0987  082A               	movf	___lmul@multiplier+3,w
  6532  0988  0429               	iorwf	___lmul@multiplier+2,w
  6533  0989  0428               	iorwf	___lmul@multiplier+1,w
  6534  098A  0427               	iorwf	___lmul@multiplier,w
  6535  098B  1D03               	skipz
  6536  098C  296F               	goto	l5779
  6537  098D  0832               	movf	___lmul@product+3,w
  6538  098E  00AA               	movwf	?___lmul+3
  6539  098F  0831               	movf	___lmul@product+2,w
  6540  0990  00A9               	movwf	?___lmul+2
  6541  0991  0830               	movf	___lmul@product+1,w
  6542  0992  00A8               	movwf	?___lmul+1
  6543  0993  082F               	movf	___lmul@product,w
  6544  0994  00A7               	movwf	?___lmul
  6545  0995  0008               	return
  6546  0996                     __end_of___lmul:	
  6547                           
  6548                           	psect	text2
  6549  0A3E                     __ptext2:	
  6550 ;; *************** function ___llmod *****************
  6551 ;; Defined at:
  6552 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\llmod.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  divisor         4    7[BANK0 ] unsigned long 
  6555 ;;  dividend        4   11[BANK0 ] unsigned long 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  counter         1   16[BANK0 ] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  4    7[BANK0 ] unsigned long 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6567 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6570 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6571 ;;Total ram usage:       10 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    2
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function ___llmod
  6583  0A3E                     ___llmod:	
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6587  0A3E  0020               	movlb	0	; select bank0
  6588  0A3F  082A               	movf	___llmod@divisor+3,w
  6589  0A40  0429               	iorwf	___llmod@divisor+2,w
  6590  0A41  0428               	iorwf	___llmod@divisor+1,w
  6591  0A42  0427               	iorwf	___llmod@divisor,w
  6592  0A43  1903               	skipnz
  6593  0A44  2A78               	goto	l5773
  6594  0A45  01B0               	clrf	___llmod@counter
  6595  0A46  0AB0               	incf	___llmod@counter,f
  6596  0A47                     l5763:	
  6597  0A47  1BAA               	btfsc	___llmod@divisor+3,7
  6598  0A48  2A55               	goto	l5765
  6599  0A49  3001               	movlw	1
  6600  0A4A                     u6435:	
  6601  0A4A  35A7               	lslf	___llmod@divisor,f
  6602  0A4B  0DA8               	rlf	___llmod@divisor+1,f
  6603  0A4C  0DA9               	rlf	___llmod@divisor+2,f
  6604  0A4D  0DAA               	rlf	___llmod@divisor+3,f
  6605  0A4E  0B89               	decfsz	9,f
  6606  0A4F  2A4A               	goto	u6435
  6607  0A50  3001               	movlw	1
  6608  0A51  00AF               	movwf	??___llmod
  6609  0A52  082F               	movf	??___llmod,w
  6610  0A53  07B0               	addwf	___llmod@counter,f
  6611  0A54  2A47               	goto	l5763
  6612  0A55                     l5765:	
  6613  0A55  082A               	movf	___llmod@divisor+3,w
  6614  0A56  022E               	subwf	___llmod@dividend+3,w
  6615  0A57  1D03               	skipz
  6616  0A58  2A63               	goto	u6455
  6617  0A59  0829               	movf	___llmod@divisor+2,w
  6618  0A5A  022D               	subwf	___llmod@dividend+2,w
  6619  0A5B  1D03               	skipz
  6620  0A5C  2A63               	goto	u6455
  6621  0A5D  0828               	movf	___llmod@divisor+1,w
  6622  0A5E  022C               	subwf	___llmod@dividend+1,w
  6623  0A5F  1D03               	skipz
  6624  0A60  2A63               	goto	u6455
  6625  0A61  0827               	movf	___llmod@divisor,w
  6626  0A62  022B               	subwf	___llmod@dividend,w
  6627  0A63                     u6455:	
  6628  0A63  1C03               	skipc
  6629  0A64  2A6D               	goto	l5769
  6630  0A65  0827               	movf	___llmod@divisor,w
  6631  0A66  02AB               	subwf	___llmod@dividend,f
  6632  0A67  0828               	movf	___llmod@divisor+1,w
  6633  0A68  3BAC               	subwfb	___llmod@dividend+1,f
  6634  0A69  0829               	movf	___llmod@divisor+2,w
  6635  0A6A  3BAD               	subwfb	___llmod@dividend+2,f
  6636  0A6B  082A               	movf	___llmod@divisor+3,w
  6637  0A6C  3BAE               	subwfb	___llmod@dividend+3,f
  6638  0A6D                     l5769:	
  6639  0A6D  3001               	movlw	1
  6640  0A6E                     u6465:	
  6641  0A6E  36AA               	lsrf	___llmod@divisor+3,f
  6642  0A6F  0CA9               	rrf	___llmod@divisor+2,f
  6643  0A70  0CA8               	rrf	___llmod@divisor+1,f
  6644  0A71  0CA7               	rrf	___llmod@divisor,f
  6645  0A72  0B89               	decfsz	9,f
  6646  0A73  2A6E               	goto	u6465
  6647  0A74  3001               	movlw	1
  6648  0A75  02B0               	subwf	___llmod@counter,f
  6649  0A76  1D03               	btfss	3,2
  6650  0A77  2A55               	goto	l5765
  6651  0A78                     l5773:	
  6652  0A78  082E               	movf	___llmod@dividend+3,w
  6653  0A79  00AA               	movwf	?___llmod+3
  6654  0A7A  082D               	movf	___llmod@dividend+2,w
  6655  0A7B  00A9               	movwf	?___llmod+2
  6656  0A7C  082C               	movf	___llmod@dividend+1,w
  6657  0A7D  00A8               	movwf	?___llmod+1
  6658  0A7E  082B               	movf	___llmod@dividend,w
  6659  0A7F  00A7               	movwf	?___llmod
  6660  0A80  0008               	return
  6661  0A81                     __end_of___llmod:	
  6662                           
  6663                           	psect	text3
  6664  07AD                     __ptext3:	
  6665 ;; *************** function ___awmod *****************
  6666 ;; Defined at:
  6667 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\awmod.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  divisor         2    7[BANK0 ] int 
  6670 ;;  dividend        2    9[BANK0 ] int 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  sign            1   13[BANK0 ] unsigned char 
  6673 ;;  counter         1   12[BANK0 ] unsigned char 
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  2    7[BANK0 ] int 
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6684 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6686 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6687 ;;Total ram usage:        7 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    2
  6690 ;; This function calls:
  6691 ;;		Nothing
  6692 ;; This function is called by:
  6693 ;;		_main
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function ___awmod
  6699  07AD                     ___awmod:	
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6703  07AD  0020               	movlb	0	; select bank0
  6704  07AE  01AD               	clrf	___awmod@sign
  6705  07AF  1FAA               	btfss	___awmod@dividend+1,7
  6706  07B0  2FB8               	goto	l5711
  6707  07B1  09A9               	comf	___awmod@dividend,f
  6708  07B2  09AA               	comf	___awmod@dividend+1,f
  6709  07B3  0AA9               	incf	___awmod@dividend,f
  6710  07B4  1903               	skipnz
  6711  07B5  0AAA               	incf	___awmod@dividend+1,f
  6712  07B6  01AD               	clrf	___awmod@sign
  6713  07B7  0AAD               	incf	___awmod@sign,f
  6714  07B8                     l5711:	
  6715  07B8  1FA8               	btfss	___awmod@divisor+1,7
  6716  07B9  2FBF               	goto	l5715
  6717  07BA  09A7               	comf	___awmod@divisor,f
  6718  07BB  09A8               	comf	___awmod@divisor+1,f
  6719  07BC  0AA7               	incf	___awmod@divisor,f
  6720  07BD  1903               	skipnz
  6721  07BE  0AA8               	incf	___awmod@divisor+1,f
  6722  07BF                     l5715:	
  6723  07BF  0828               	movf	___awmod@divisor+1,w
  6724  07C0  0427               	iorwf	___awmod@divisor,w
  6725  07C1  1903               	skipnz
  6726  07C2  2FE6               	goto	l5733
  6727  07C3  01AC               	clrf	___awmod@counter
  6728  07C4  0AAC               	incf	___awmod@counter,f
  6729  07C5                     l5723:	
  6730  07C5  1BA8               	btfsc	___awmod@divisor+1,7
  6731  07C6  2FD1               	goto	l5725
  6732  07C7  3001               	movlw	1
  6733  07C8                     u6345:	
  6734  07C8  35A7               	lslf	___awmod@divisor,f
  6735  07C9  0DA8               	rlf	___awmod@divisor+1,f
  6736  07CA  0B89               	decfsz	9,f
  6737  07CB  2FC8               	goto	u6345
  6738  07CC  3001               	movlw	1
  6739  07CD  00AB               	movwf	??___awmod
  6740  07CE  082B               	movf	??___awmod,w
  6741  07CF  07AC               	addwf	___awmod@counter,f
  6742  07D0  2FC5               	goto	l5723
  6743  07D1                     l5725:	
  6744  07D1  0828               	movf	___awmod@divisor+1,w
  6745  07D2  022A               	subwf	___awmod@dividend+1,w
  6746  07D3  1D03               	skipz
  6747  07D4  2FD7               	goto	u6365
  6748  07D5  0827               	movf	___awmod@divisor,w
  6749  07D6  0229               	subwf	___awmod@dividend,w
  6750  07D7                     u6365:	
  6751  07D7  1C03               	skipc
  6752  07D8  2FDD               	goto	l5729
  6753  07D9  0827               	movf	___awmod@divisor,w
  6754  07DA  02A9               	subwf	___awmod@dividend,f
  6755  07DB  0828               	movf	___awmod@divisor+1,w
  6756  07DC  3BAA               	subwfb	___awmod@dividend+1,f
  6757  07DD                     l5729:	
  6758  07DD  3001               	movlw	1
  6759  07DE                     u6375:	
  6760  07DE  36A8               	lsrf	___awmod@divisor+1,f
  6761  07DF  0CA7               	rrf	___awmod@divisor,f
  6762  07E0  0B89               	decfsz	9,f
  6763  07E1  2FDE               	goto	u6375
  6764  07E2  3001               	movlw	1
  6765  07E3  02AC               	subwf	___awmod@counter,f
  6766  07E4  1D03               	btfss	3,2
  6767  07E5  2FD1               	goto	l5725
  6768  07E6                     l5733:	
  6769  07E6  082D               	movf	___awmod@sign,w
  6770  07E7  1903               	btfsc	3,2
  6771  07E8  2FEE               	goto	l5737
  6772  07E9  09A9               	comf	___awmod@dividend,f
  6773  07EA  09AA               	comf	___awmod@dividend+1,f
  6774  07EB  0AA9               	incf	___awmod@dividend,f
  6775  07EC  1903               	skipnz
  6776  07ED  0AAA               	incf	___awmod@dividend+1,f
  6777  07EE                     l5737:	
  6778  07EE  082A               	movf	___awmod@dividend+1,w
  6779  07EF  01A8               	clrf	?___awmod+1
  6780  07F0  07A8               	addwf	?___awmod+1,f
  6781  07F1  0829               	movf	___awmod@dividend,w
  6782  07F2  01A7               	clrf	?___awmod
  6783  07F3  07A7               	addwf	?___awmod,f
  6784  07F4  0008               	return
  6785  07F5                     __end_of___awmod:	
  6786                           
  6787                           	psect	text4
  6788  0A81                     __ptext4:	
  6789 ;; *************** function ___awdiv *****************
  6790 ;; Defined at:
  6791 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\awdiv.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  divisor         2    7[BANK0 ] int 
  6794 ;;  dividend        2    9[BANK0 ] int 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  quotient        2   14[BANK0 ] int 
  6797 ;;  sign            1   13[BANK0 ] unsigned char 
  6798 ;;  counter         1   12[BANK0 ] unsigned char 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  2    7[BANK0 ] int 
  6801 ;; Registers used:
  6802 ;;		wreg, status,2, status,0
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6808 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6809 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6811 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6812 ;;Total ram usage:        9 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    2
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           
  6823                           ;psect for function ___awdiv
  6824  0A81                     ___awdiv:	
  6825                           
  6826                           ;incstack = 0
  6827                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6828  0A81  0020               	movlb	0	; select bank0
  6829  0A82  01AD               	clrf	___awdiv@sign
  6830  0A83  1FA8               	btfss	___awdiv@divisor+1,7
  6831  0A84  2A8C               	goto	l5667
  6832  0A85  09A7               	comf	___awdiv@divisor,f
  6833  0A86  09A8               	comf	___awdiv@divisor+1,f
  6834  0A87  0AA7               	incf	___awdiv@divisor,f
  6835  0A88  1903               	skipnz
  6836  0A89  0AA8               	incf	___awdiv@divisor+1,f
  6837  0A8A  01AD               	clrf	___awdiv@sign
  6838  0A8B  0AAD               	incf	___awdiv@sign,f
  6839  0A8C                     l5667:	
  6840  0A8C  1FAA               	btfss	___awdiv@dividend+1,7
  6841  0A8D  2A97               	goto	l5673
  6842  0A8E  09A9               	comf	___awdiv@dividend,f
  6843  0A8F  09AA               	comf	___awdiv@dividend+1,f
  6844  0A90  0AA9               	incf	___awdiv@dividend,f
  6845  0A91  1903               	skipnz
  6846  0A92  0AAA               	incf	___awdiv@dividend+1,f
  6847  0A93  3001               	movlw	1
  6848  0A94  00AB               	movwf	??___awdiv
  6849  0A95  082B               	movf	??___awdiv,w
  6850  0A96  06AD               	xorwf	___awdiv@sign,f
  6851  0A97                     l5673:	
  6852  0A97  01AE               	clrf	___awdiv@quotient
  6853  0A98  01AF               	clrf	___awdiv@quotient+1
  6854  0A99  0828               	movf	___awdiv@divisor+1,w
  6855  0A9A  0427               	iorwf	___awdiv@divisor,w
  6856  0A9B  1903               	skipnz
  6857  0A9C  2AC6               	goto	l5695
  6858  0A9D  01AC               	clrf	___awdiv@counter
  6859  0A9E  0AAC               	incf	___awdiv@counter,f
  6860  0A9F                     l5683:	
  6861  0A9F  1BA8               	btfsc	___awdiv@divisor+1,7
  6862  0AA0  2AAB               	goto	l5685
  6863  0AA1  3001               	movlw	1
  6864  0AA2                     u6245:	
  6865  0AA2  35A7               	lslf	___awdiv@divisor,f
  6866  0AA3  0DA8               	rlf	___awdiv@divisor+1,f
  6867  0AA4  0B89               	decfsz	9,f
  6868  0AA5  2AA2               	goto	u6245
  6869  0AA6  3001               	movlw	1
  6870  0AA7  00AB               	movwf	??___awdiv
  6871  0AA8  082B               	movf	??___awdiv,w
  6872  0AA9  07AC               	addwf	___awdiv@counter,f
  6873  0AAA  2A9F               	goto	l5683
  6874  0AAB                     l5685:	
  6875  0AAB  3001               	movlw	1
  6876  0AAC                     u6265:	
  6877  0AAC  35AE               	lslf	___awdiv@quotient,f
  6878  0AAD  0DAF               	rlf	___awdiv@quotient+1,f
  6879  0AAE  0B89               	decfsz	9,f
  6880  0AAF  2AAC               	goto	u6265
  6881  0AB0  0828               	movf	___awdiv@divisor+1,w
  6882  0AB1  022A               	subwf	___awdiv@dividend+1,w
  6883  0AB2  1D03               	skipz
  6884  0AB3  2AB6               	goto	u6275
  6885  0AB4  0827               	movf	___awdiv@divisor,w
  6886  0AB5  0229               	subwf	___awdiv@dividend,w
  6887  0AB6                     u6275:	
  6888  0AB6  1C03               	skipc
  6889  0AB7  2ABD               	goto	l5691
  6890  0AB8  0827               	movf	___awdiv@divisor,w
  6891  0AB9  02A9               	subwf	___awdiv@dividend,f
  6892  0ABA  0828               	movf	___awdiv@divisor+1,w
  6893  0ABB  3BAA               	subwfb	___awdiv@dividend+1,f
  6894  0ABC  142E               	bsf	___awdiv@quotient,0
  6895  0ABD                     l5691:	
  6896  0ABD  3001               	movlw	1
  6897  0ABE                     u6285:	
  6898  0ABE  36A8               	lsrf	___awdiv@divisor+1,f
  6899  0ABF  0CA7               	rrf	___awdiv@divisor,f
  6900  0AC0  0B89               	decfsz	9,f
  6901  0AC1  2ABE               	goto	u6285
  6902  0AC2  3001               	movlw	1
  6903  0AC3  02AC               	subwf	___awdiv@counter,f
  6904  0AC4  1D03               	btfss	3,2
  6905  0AC5  2AAB               	goto	l5685
  6906  0AC6                     l5695:	
  6907  0AC6  082D               	movf	___awdiv@sign,w
  6908  0AC7  1903               	btfsc	3,2
  6909  0AC8  2ACE               	goto	l5699
  6910  0AC9  09AE               	comf	___awdiv@quotient,f
  6911  0ACA  09AF               	comf	___awdiv@quotient+1,f
  6912  0ACB  0AAE               	incf	___awdiv@quotient,f
  6913  0ACC  1903               	skipnz
  6914  0ACD  0AAF               	incf	___awdiv@quotient+1,f
  6915  0ACE                     l5699:	
  6916  0ACE  082F               	movf	___awdiv@quotient+1,w
  6917  0ACF  01A8               	clrf	?___awdiv+1
  6918  0AD0  07A8               	addwf	?___awdiv+1,f
  6919  0AD1  082E               	movf	___awdiv@quotient,w
  6920  0AD2  01A7               	clrf	?___awdiv
  6921  0AD3  07A7               	addwf	?___awdiv,f
  6922  0AD4  0008               	return
  6923  0AD5                     __end_of___awdiv:	
  6924                           
  6925                           	psect	text5
  6926  06D4                     __ptext5:	
  6927 ;; *************** function ___aldiv *****************
  6928 ;; Defined at:
  6929 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\aldiv.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  divisor         4    7[BANK0 ] long 
  6932 ;;  dividend        4   11[BANK0 ] long 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  quotient        4   18[BANK0 ] long 
  6935 ;;  sign            1   17[BANK0 ] unsigned char 
  6936 ;;  counter         1   16[BANK0 ] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;                  4    7[BANK0 ] long 
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6946 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6947 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6949 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6950 ;;Total ram usage:       15 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    2
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_main
  6957 ;;		_SearchingOffSet
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           
  6962                           ;psect for function ___aldiv
  6963  06D4                     ___aldiv:	
  6964                           
  6965                           ;incstack = 0
  6966                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6967  06D4  0020               	movlb	0	; select bank0
  6968  06D5  01B1               	clrf	___aldiv@sign
  6969  06D6  1FAA               	btfss	___aldiv@divisor+3,7
  6970  06D7  2EE5               	goto	l852
  6971  06D8  09A7               	comf	___aldiv@divisor,f
  6972  06D9  09A8               	comf	___aldiv@divisor+1,f
  6973  06DA  09A9               	comf	___aldiv@divisor+2,f
  6974  06DB  09AA               	comf	___aldiv@divisor+3,f
  6975  06DC  0AA7               	incf	___aldiv@divisor,f
  6976  06DD  1903               	skipnz
  6977  06DE  0AA8               	incf	___aldiv@divisor+1,f
  6978  06DF  1903               	skipnz
  6979  06E0  0AA9               	incf	___aldiv@divisor+2,f
  6980  06E1  1903               	skipnz
  6981  06E2  0AAA               	incf	___aldiv@divisor+3,f
  6982  06E3  01B1               	clrf	___aldiv@sign
  6983  06E4  0AB1               	incf	___aldiv@sign,f
  6984  06E5                     l852:	
  6985  06E5  1FAE               	btfss	___aldiv@dividend+3,7
  6986  06E6  2EF6               	goto	l5629
  6987  06E7  09AB               	comf	___aldiv@dividend,f
  6988  06E8  09AC               	comf	___aldiv@dividend+1,f
  6989  06E9  09AD               	comf	___aldiv@dividend+2,f
  6990  06EA  09AE               	comf	___aldiv@dividend+3,f
  6991  06EB  0AAB               	incf	___aldiv@dividend,f
  6992  06EC  1903               	skipnz
  6993  06ED  0AAC               	incf	___aldiv@dividend+1,f
  6994  06EE  1903               	skipnz
  6995  06EF  0AAD               	incf	___aldiv@dividend+2,f
  6996  06F0  1903               	skipnz
  6997  06F1  0AAE               	incf	___aldiv@dividend+3,f
  6998  06F2  3001               	movlw	1
  6999  06F3  00AF               	movwf	??___aldiv
  7000  06F4  082F               	movf	??___aldiv,w
  7001  06F5  06B1               	xorwf	___aldiv@sign,f
  7002  06F6                     l5629:	
  7003  06F6  3000               	movlw	0
  7004  06F7  00B5               	movwf	___aldiv@quotient+3
  7005  06F8  3000               	movlw	0
  7006  06F9  00B4               	movwf	___aldiv@quotient+2
  7007  06FA  3000               	movlw	0
  7008  06FB  00B3               	movwf	___aldiv@quotient+1
  7009  06FC  3000               	movlw	0
  7010  06FD  00B2               	movwf	___aldiv@quotient
  7011  06FE  082A               	movf	___aldiv@divisor+3,w
  7012  06FF  0429               	iorwf	___aldiv@divisor+2,w
  7013  0700  0428               	iorwf	___aldiv@divisor+1,w
  7014  0701  0427               	iorwf	___aldiv@divisor,w
  7015  0702  1903               	skipnz
  7016  0703  2F3F               	goto	l5651
  7017  0704  01B0               	clrf	___aldiv@counter
  7018  0705  0AB0               	incf	___aldiv@counter,f
  7019  0706                     l5637:	
  7020  0706  1BAA               	btfsc	___aldiv@divisor+3,7
  7021  0707  2F14               	goto	l5639
  7022  0708  3001               	movlw	1
  7023  0709                     u6145:	
  7024  0709  35A7               	lslf	___aldiv@divisor,f
  7025  070A  0DA8               	rlf	___aldiv@divisor+1,f
  7026  070B  0DA9               	rlf	___aldiv@divisor+2,f
  7027  070C  0DAA               	rlf	___aldiv@divisor+3,f
  7028  070D  0B89               	decfsz	9,f
  7029  070E  2F09               	goto	u6145
  7030  070F  3001               	movlw	1
  7031  0710  00AF               	movwf	??___aldiv
  7032  0711  082F               	movf	??___aldiv,w
  7033  0712  07B0               	addwf	___aldiv@counter,f
  7034  0713  2F06               	goto	l5637
  7035  0714                     l5639:	
  7036  0714  3001               	movlw	1
  7037  0715                     u6165:	
  7038  0715  35B2               	lslf	___aldiv@quotient,f
  7039  0716  0DB3               	rlf	___aldiv@quotient+1,f
  7040  0717  0DB4               	rlf	___aldiv@quotient+2,f
  7041  0718  0DB5               	rlf	___aldiv@quotient+3,f
  7042  0719  0B89               	decfsz	9,f
  7043  071A  2F15               	goto	u6165
  7044  071B  082A               	movf	___aldiv@divisor+3,w
  7045  071C  022E               	subwf	___aldiv@dividend+3,w
  7046  071D  1D03               	skipz
  7047  071E  2F29               	goto	u6175
  7048  071F  0829               	movf	___aldiv@divisor+2,w
  7049  0720  022D               	subwf	___aldiv@dividend+2,w
  7050  0721  1D03               	skipz
  7051  0722  2F29               	goto	u6175
  7052  0723  0828               	movf	___aldiv@divisor+1,w
  7053  0724  022C               	subwf	___aldiv@dividend+1,w
  7054  0725  1D03               	skipz
  7055  0726  2F29               	goto	u6175
  7056  0727  0827               	movf	___aldiv@divisor,w
  7057  0728  022B               	subwf	___aldiv@dividend,w
  7058  0729                     u6175:	
  7059  0729  1C03               	skipc
  7060  072A  2F34               	goto	l5647
  7061  072B  0827               	movf	___aldiv@divisor,w
  7062  072C  02AB               	subwf	___aldiv@dividend,f
  7063  072D  0828               	movf	___aldiv@divisor+1,w
  7064  072E  3BAC               	subwfb	___aldiv@dividend+1,f
  7065  072F  0829               	movf	___aldiv@divisor+2,w
  7066  0730  3BAD               	subwfb	___aldiv@dividend+2,f
  7067  0731  082A               	movf	___aldiv@divisor+3,w
  7068  0732  3BAE               	subwfb	___aldiv@dividend+3,f
  7069  0733  1432               	bsf	___aldiv@quotient,0
  7070  0734                     l5647:	
  7071  0734  3001               	movlw	1
  7072  0735                     u6185:	
  7073  0735  36AA               	lsrf	___aldiv@divisor+3,f
  7074  0736  0CA9               	rrf	___aldiv@divisor+2,f
  7075  0737  0CA8               	rrf	___aldiv@divisor+1,f
  7076  0738  0CA7               	rrf	___aldiv@divisor,f
  7077  0739  0B89               	decfsz	9,f
  7078  073A  2F35               	goto	u6185
  7079  073B  3001               	movlw	1
  7080  073C  02B0               	subwf	___aldiv@counter,f
  7081  073D  1D03               	btfss	3,2
  7082  073E  2F14               	goto	l5639
  7083  073F                     l5651:	
  7084  073F  0831               	movf	___aldiv@sign,w
  7085  0740  1903               	btfsc	3,2
  7086  0741  2F4D               	goto	l5655
  7087  0742  09B2               	comf	___aldiv@quotient,f
  7088  0743  09B3               	comf	___aldiv@quotient+1,f
  7089  0744  09B4               	comf	___aldiv@quotient+2,f
  7090  0745  09B5               	comf	___aldiv@quotient+3,f
  7091  0746  0AB2               	incf	___aldiv@quotient,f
  7092  0747  1903               	skipnz
  7093  0748  0AB3               	incf	___aldiv@quotient+1,f
  7094  0749  1903               	skipnz
  7095  074A  0AB4               	incf	___aldiv@quotient+2,f
  7096  074B  1903               	skipnz
  7097  074C  0AB5               	incf	___aldiv@quotient+3,f
  7098  074D                     l5655:	
  7099  074D  0835               	movf	___aldiv@quotient+3,w
  7100  074E  00AA               	movwf	?___aldiv+3
  7101  074F  0834               	movf	___aldiv@quotient+2,w
  7102  0750  00A9               	movwf	?___aldiv+2
  7103  0751  0833               	movf	___aldiv@quotient+1,w
  7104  0752  00A8               	movwf	?___aldiv+1
  7105  0753  0832               	movf	___aldiv@quotient,w
  7106  0754  00A7               	movwf	?___aldiv
  7107  0755  0008               	return
  7108  0756                     __end_of___aldiv:	
  7109                           
  7110                           	psect	text6
  7111  08AC                     __ptext6:	
  7112 ;; *************** function _eeprom_write *****************
  7113 ;; Defined at:
  7114 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\eewrite.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  addr            1    wreg     unsigned char 
  7117 ;;  value           1    7[BANK0 ] unsigned char 
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  addr            1   10[BANK0 ] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;		None               void
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7129 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7130 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7132 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7133 ;;Total ram usage:        4 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    2
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _eeprom_write
  7145  08AC                     _eeprom_write:	
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  7149                           ;eeprom_write@addr stored from wreg
  7150  08AC  0020               	movlb	0	; select bank0
  7151  08AD  00AA               	movwf	eeprom_write@addr
  7152  08AE                     l731:	
  7153  08AE  0023               	movlb	3	; select bank3
  7154  08AF  1895               	btfsc	21,1	;volsfr
  7155  08B0  28AE               	goto	l731
  7156  08B1  0020               	movlb	0	; select bank0
  7157  08B2  082A               	movf	eeprom_write@addr,w
  7158  08B3  00A8               	movwf	??_eeprom_write
  7159  08B4  01A9               	clrf	??_eeprom_write+1
  7160  08B5  0828               	movf	??_eeprom_write,w
  7161  08B6  0023               	movlb	3	; select bank3
  7162  08B7  0091               	movwf	17	;volatile
  7163  08B8  0020               	movlb	0	; select bank0
  7164  08B9  0829               	movf	??_eeprom_write+1,w
  7165  08BA  0023               	movlb	3	; select bank3
  7166  08BB  0092               	movwf	18	;volatile
  7167  08BC  0020               	movlb	0	; select bank0
  7168  08BD  0827               	movf	eeprom_write@value,w
  7169  08BE  0023               	movlb	3	; select bank3
  7170  08BF  0093               	movwf	19	;volatile
  7171  08C0  303F               	movlw	63
  7172  08C1  0020               	movlb	0	; select bank0
  7173  08C2  00A8               	movwf	??_eeprom_write
  7174  08C3  0828               	movf	??_eeprom_write,w
  7175  08C4  0023               	movlb	3	; select bank3
  7176  08C5  0595               	andwf	21,f	;volsfr
  7177  08C6  0020               	movlb	0	; select bank0
  7178  08C7  1003               	bcf	3,0	;volatile
  7179  08C8  1B8B               	btfsc	11,7	;volatile
  7180  08C9  1403               	bsf	3,0	;volatile
  7181  08CA  138B               	bcf	11,7	;volatile
  7182  08CB  0023               	movlb	3	; select bank3
  7183  08CC  1515               	bsf	21,2	;volsfr
  7184  08CD  3055               	movlw	85
  7185  08CE  0096               	movwf	22	;volsfr
  7186  08CF  30AA               	movlw	170
  7187  08D0  0096               	movwf	22	;volsfr
  7188  08D1  1495               	bsf	21,1	;volsfr
  7189  08D2  1115               	bcf	21,2	;volsfr
  7190  08D3  0020               	movlb	0	; select bank0
  7191  08D4  1C03               	btfss	3,0	;volatile
  7192  08D5  0008               	return
  7193  08D6  178B               	bsf	11,7	;volatile
  7194  08D7  0008               	return
  7195  08D8                     __end_of_eeprom_write:	
  7196                           
  7197                           	psect	text7
  7198  0AD5                     __ptext7:	
  7199 ;; *************** function _sprintf *****************
  7200 ;; Defined at:
  7201 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  sp              1    wreg     PTR unsigned char 
  7204 ;;		 -> chBufADC(20), 
  7205 ;;  f               1   21[BANK0 ] PTR const unsigned char 
  7206 ;;		 -> STR_5(14), STR_4(14), STR_3(14), STR_2(14), 
  7207 ;;		 -> STR_1(6), 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  sp              1   35[BANK0 ] PTR unsigned char 
  7210 ;;		 -> chBufADC(20), 
  7211 ;;  _val            4   31[BANK0 ] struct .
  7212 ;;  width           2   36[BANK0 ] int 
  7213 ;;  c               1   39[BANK0 ] char 
  7214 ;;  prec            1   38[BANK0 ] char 
  7215 ;;  flag            1   30[BANK0 ] unsigned char 
  7216 ;;  ap              1   29[BANK0 ] PTR void [1]
  7217 ;;		 -> ?_sprintf(2), 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  2   21[BANK0 ] int 
  7220 ;; Registers used:
  7221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7227 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7228 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7229 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7230 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7231 ;;Total ram usage:       19 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    3
  7234 ;; This function calls:
  7235 ;;		_isdigit
  7236 ;;		___bmul
  7237 ;;		___lwdiv
  7238 ;;		___lwmod
  7239 ;;		___wmul
  7240 ;; This function is called by:
  7241 ;;		_main
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _sprintf
  7247  0AD5                     _sprintf:	
  7248                           
  7249                           ;incstack = 0
  7250                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7251                           ;sprintf@sp stored from wreg
  7252  0AD5  0020               	movlb	0	; select bank0
  7253  0AD6  00C3               	movwf	sprintf@sp
  7254                           
  7255                           ;doprnt.c: 494: va_list ap;
  7256                           ;doprnt.c: 499: signed char c;
  7257                           ;doprnt.c: 501: int width;
  7258                           ;doprnt.c: 506: signed char prec;
  7259                           ;doprnt.c: 508: unsigned char flag;
  7260                           ;doprnt.c: 527: union {
  7261                           ;doprnt.c: 528: unsigned int _val;
  7262                           ;doprnt.c: 529: struct {
  7263                           ;doprnt.c: 530: const char * _cp;
  7264                           ;doprnt.c: 531: unsigned _len;
  7265                           ;doprnt.c: 532: } _str;
  7266                           ;doprnt.c: 533: } _val;
  7267                           ;doprnt.c: 542: *ap = __va_start();
  7268  0AD7  3036               	movlw	(?_sprintf+1)& (0+255)
  7269  0AD8  00BA               	movwf	??_sprintf
  7270  0AD9  083A               	movf	??_sprintf,w
  7271  0ADA  00BD               	movwf	sprintf@ap
  7272  0ADB                     l5547:	
  7273                           ;doprnt.c: 545: while(c = *f++) {
  7274                           
  7275  0ADB  0835               	movf	sprintf@f,w
  7276  0ADC  0AB5               	incf	sprintf@f,f
  7277  0ADD  3188               	movlp	high __stringtab
  7278  0ADE  000A               	callw
  7279  0ADF  318A               	pagesel	$	;select current page
  7280  0AE0  00BA               	movwf	??_sprintf
  7281  0AE1  083A               	movf	??_sprintf,w
  7282  0AE2  00C7               	movwf	sprintf@c
  7283  0AE3  08C7               	movf	sprintf@c,f
  7284  0AE4  1903               	btfsc	3,2
  7285  0AE5  2C8F               	goto	l5549
  7286                           
  7287                           ;doprnt.c: 547: if(c != '%')
  7288  0AE6  0847               	movf	sprintf@c,w
  7289  0AE7  3A25               	xorlw	37
  7290  0AE8  1903               	skipnz
  7291  0AE9  2AF7               	goto	l5417
  7292                           
  7293                           ;doprnt.c: 549: {
  7294                           ;doprnt.c: 550: ((*sp++ = (c)));
  7295  0AEA  0847               	movf	sprintf@c,w
  7296  0AEB  00BA               	movwf	??_sprintf
  7297  0AEC  0843               	movf	sprintf@sp,w
  7298  0AED  0086               	movwf	6
  7299  0AEE  3001               	movlw	1	; select bank2/3
  7300  0AEF  0087               	movwf	7
  7301  0AF0  083A               	movf	??_sprintf,w
  7302  0AF1  0081               	movwf	1
  7303  0AF2  3001               	movlw	1
  7304  0AF3  00BA               	movwf	??_sprintf
  7305  0AF4  083A               	movf	??_sprintf,w
  7306  0AF5  07C3               	addwf	sprintf@sp,f
  7307                           
  7308                           ;doprnt.c: 551: continue;
  7309  0AF6  2ADB               	goto	l5547
  7310  0AF7                     l5417:	
  7311                           
  7312                           ;doprnt.c: 552: }
  7313                           ;doprnt.c: 555: width = 0;
  7314  0AF7  01C4               	clrf	sprintf@width
  7315  0AF8  01C5               	clrf	sprintf@width+1
  7316                           
  7317                           ;doprnt.c: 557: flag = 0;
  7318  0AF9  01BE               	clrf	sprintf@flag
  7319                           
  7320                           ;doprnt.c: 560: switch(*f) {
  7321                           
  7322                           ;doprnt.c: 559: for(;;) {
  7323  0AFA  2B00               	goto	l5423
  7324  0AFB                     l664:	
  7325                           ;doprnt.c: 588: case '0':
  7326                           
  7327                           
  7328                           ;doprnt.c: 589: flag |= 0x04;
  7329  0AFB  153E               	bsf	sprintf@flag,2
  7330                           
  7331                           ;doprnt.c: 590: f++;
  7332  0AFC  3001               	movlw	1
  7333  0AFD  00BA               	movwf	??_sprintf
  7334  0AFE  083A               	movf	??_sprintf,w
  7335  0AFF  07B5               	addwf	sprintf@f,f
  7336  0B00                     l5423:	
  7337                           ;doprnt.c: 593: }
  7338                           
  7339                           ;doprnt.c: 591: continue;
  7340                           
  7341  0B00  0835               	movf	sprintf@f,w
  7342  0B01  3188               	movlp	high __stringtab
  7343  0B02  000A               	callw
  7344  0B03  318A               	pagesel	$	;select current page
  7345                           
  7346                           ; Switch size 1, requested type "space"
  7347                           ; Number of cases is 1, Range of values is 48 to 48
  7348                           ; switch strategies available:
  7349                           ; Name         Instructions Cycles
  7350                           ; simple_byte            4     3 (average)
  7351                           ; direct_byte           11     9 (fixed)
  7352                           ; jumptable            263     9 (fixed)
  7353                           ;	Chosen strategy is simple_byte
  7354  0B04  3A30               	xorlw	48	; case 48
  7355  0B05  1903               	skipnz
  7356  0B06  2AFB               	goto	l664
  7357  0B07  2B08               	goto	l5425
  7358  0B08                     l5425:	
  7359                           ;doprnt.c: 595: }
  7360                           
  7361                           ;doprnt.c: 594: break;
  7362                           
  7363                           
  7364                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  7365  0B08  0835               	movf	sprintf@f,w
  7366  0B09  3188               	movlp	high __stringtab
  7367  0B0A  000A               	callw
  7368  0B0B  318A               	pagesel	$	;select current page
  7369  0B0C  3188  2038  318A   	fcall	_isdigit
  7370  0B0F  1C03               	btfss	3,0
  7371  0B10  2B44               	goto	l5437
  7372                           
  7373                           ;doprnt.c: 607: width = 0;
  7374  0B11  0020               	movlb	0	; select bank0
  7375  0B12  01C4               	clrf	sprintf@width
  7376  0B13  01C5               	clrf	sprintf@width+1
  7377  0B14                     l5429:	
  7378                           ;doprnt.c: 608: do {
  7379                           
  7380                           
  7381                           ;doprnt.c: 609: width *= 10;
  7382  0B14  300A               	movlw	10
  7383  0B15  0020               	movlb	0	; select bank0
  7384  0B16  00A7               	movwf	?___wmul
  7385  0B17  3000               	movlw	0
  7386  0B18  00A8               	movwf	?___wmul+1
  7387  0B19  0845               	movf	sprintf@width+1,w
  7388  0B1A  01AA               	clrf	?___wmul+3
  7389  0B1B  07AA               	addwf	?___wmul+3,f
  7390  0B1C  0844               	movf	sprintf@width,w
  7391  0B1D  01A9               	clrf	?___wmul+2
  7392  0B1E  07A9               	addwf	?___wmul+2,f
  7393  0B1F  3188  208E  318A   	fcall	___wmul
  7394  0B22  0020               	movlb	0	; select bank0
  7395  0B23  0828               	movf	?___wmul+1,w
  7396  0B24  01C5               	clrf	sprintf@width+1
  7397  0B25  07C5               	addwf	sprintf@width+1,f
  7398  0B26  0827               	movf	?___wmul,w
  7399  0B27  01C4               	clrf	sprintf@width
  7400  0B28  07C4               	addwf	sprintf@width,f
  7401                           
  7402                           ;doprnt.c: 610: width += *f++ - '0';
  7403  0B29  0835               	movf	sprintf@f,w
  7404  0B2A  3188               	movlp	high __stringtab
  7405  0B2B  000A               	callw
  7406  0B2C  318A               	pagesel	$	;select current page
  7407  0B2D  3ED0               	addlw	208
  7408  0B2E  00BA               	movwf	??_sprintf
  7409  0B2F  30FF               	movlw	255
  7410  0B30  1803               	skipnc
  7411  0B31  3000               	movlw	0
  7412  0B32  00BB               	movwf	??_sprintf+1
  7413  0B33  083A               	movf	??_sprintf,w
  7414  0B34  07C4               	addwf	sprintf@width,f
  7415  0B35  083B               	movf	??_sprintf+1,w
  7416  0B36  3DC5               	addwfc	sprintf@width+1,f
  7417  0B37  3001               	movlw	1
  7418  0B38  00BA               	movwf	??_sprintf
  7419  0B39  083A               	movf	??_sprintf,w
  7420  0B3A  07B5               	addwf	sprintf@f,f
  7421                           
  7422                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  7423  0B3B  0835               	movf	sprintf@f,w
  7424  0B3C  3188               	movlp	high __stringtab
  7425  0B3D  000A               	callw
  7426  0B3E  318A               	pagesel	$	;select current page
  7427  0B3F  3188  2038  318A   	fcall	_isdigit
  7428  0B42  1803               	btfsc	3,0
  7429  0B43  2B14               	goto	l5429
  7430  0B44                     l5437:	
  7431                           
  7432                           ;doprnt.c: 617: }
  7433                           ;doprnt.c: 620: if(*f == '.') {
  7434  0B44  0020               	movlb	0	; select bank0
  7435  0B45  0835               	movf	sprintf@f,w
  7436  0B46  3188               	movlp	high __stringtab
  7437  0B47  000A               	callw
  7438  0B48  318A               	pagesel	$	;select current page
  7439  0B49  3A2E               	xorlw	46
  7440  0B4A  1D03               	skipz
  7441  0B4B  2B73               	goto	l5449
  7442                           
  7443                           ;doprnt.c: 622: f++;
  7444  0B4C  3001               	movlw	1
  7445  0B4D  00BA               	movwf	??_sprintf
  7446  0B4E  083A               	movf	??_sprintf,w
  7447  0B4F  07B5               	addwf	sprintf@f,f
  7448                           
  7449                           ;doprnt.c: 629: {
  7450                           ;doprnt.c: 630: prec = 0;
  7451  0B50  01C6               	clrf	sprintf@prec
  7452  0B51                     l5447:	
  7453                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  7454                           
  7455  0B51  0835               	movf	sprintf@f,w
  7456  0B52  3188               	movlp	high __stringtab
  7457  0B53  000A               	callw
  7458  0B54  318A               	pagesel	$	;select current page
  7459  0B55  3188  2038  318A   	fcall	_isdigit
  7460  0B58  1C03               	btfss	3,0
  7461  0B59  2B75               	goto	l5453
  7462                           
  7463                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  7464  0B5A  0020               	movlb	0	; select bank0
  7465  0B5B  0835               	movf	sprintf@f,w
  7466  0B5C  3188               	movlp	high __stringtab
  7467  0B5D  000A               	callw
  7468  0B5E  318A               	pagesel	$	;select current page
  7469  0B5F  00BA               	movwf	??_sprintf
  7470  0B60  300A               	movlw	10
  7471  0B61  00BB               	movwf	??_sprintf+1
  7472  0B62  083B               	movf	??_sprintf+1,w
  7473  0B63  00A7               	movwf	?___bmul
  7474  0B64  0846               	movf	sprintf@prec,w
  7475  0B65  3188  2047  318A   	fcall	___bmul
  7476  0B68  0020               	movlb	0	; select bank0
  7477  0B69  073A               	addwf	??_sprintf,w
  7478  0B6A  3ED0               	addlw	-48
  7479  0B6B  00BC               	movwf	??_sprintf+2
  7480  0B6C  083C               	movf	??_sprintf+2,w
  7481  0B6D  00C6               	movwf	sprintf@prec
  7482  0B6E  3001               	movlw	1
  7483  0B6F  00BA               	movwf	??_sprintf
  7484  0B70  083A               	movf	??_sprintf,w
  7485  0B71  07B5               	addwf	sprintf@f,f
  7486  0B72  2B51               	goto	l5447
  7487  0B73                     l5449:	
  7488                           ;doprnt.c: 633: }
  7489                           ;doprnt.c: 634: } else {
  7490                           
  7491                           
  7492                           ;doprnt.c: 635: prec = 0;
  7493  0B73  0020               	movlb	0	; select bank0
  7494  0B74  01C6               	clrf	sprintf@prec
  7495  0B75                     l5453:	
  7496                           ;doprnt.c: 831: }
  7497                           
  7498                           ;doprnt.c: 822: continue;
  7499                           
  7500                           ;doprnt.c: 811: default:
  7501                           
  7502                           ;doprnt.c: 707: case 'i':
  7503                           ;doprnt.c: 708: break;
  7504                           
  7505                           ;doprnt.c: 706: case 'd':
  7506                           
  7507                           ;doprnt.c: 647: goto alldone;
  7508                           
  7509                           ;doprnt.c: 646: case 0:
  7510                           
  7511                           ;doprnt.c: 639: }
  7512                           ;doprnt.c: 644: switch(c = *f++) {
  7513                           
  7514  0B75  0020               	movlb	0	; select bank0
  7515  0B76  0835               	movf	sprintf@f,w
  7516  0B77  0AB5               	incf	sprintf@f,f
  7517  0B78  3188               	movlp	high __stringtab
  7518  0B79  000A               	callw
  7519  0B7A  318A               	pagesel	$	;select current page
  7520  0B7B  00C7               	movwf	sprintf@c
  7521                           
  7522                           ; Switch size 1, requested type "space"
  7523                           ; Number of cases is 3, Range of values is 0 to 105
  7524                           ; switch strategies available:
  7525                           ; Name         Instructions Cycles
  7526                           ; simple_byte           10     6 (average)
  7527                           ; direct_byte          218     6 (fixed)
  7528                           ; jumptable            260     6 (fixed)
  7529                           ;	Chosen strategy is simple_byte
  7530  0B7C  3A00               	xorlw	0	; case 0
  7531  0B7D  1903               	skipnz
  7532  0B7E  2C8F               	goto	l5549
  7533  0B7F  3A64               	xorlw	100	; case 100
  7534  0B80  1903               	skipnz
  7535  0B81  2B86               	goto	l5455
  7536  0B82  3A0D               	xorlw	13	; case 105
  7537  0B83  1903               	skipnz
  7538  0B84  2B86               	goto	l5455
  7539  0B85  2ADB               	goto	l5547
  7540  0B86                     l5455:	
  7541                           
  7542                           ;doprnt.c: 1260: {
  7543                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7544  0B86  083D               	movf	sprintf@ap,w
  7545  0B87  0086               	movwf	6
  7546  0B88  0187               	clrf	7
  7547  0B89  3F40               	moviw [0]fsr1
  7548  0B8A  00BF               	movwf	sprintf@_val
  7549  0B8B  3F41               	moviw [1]fsr1
  7550  0B8C  00C0               	movwf	sprintf@_val+1
  7551  0B8D  3002               	movlw	2
  7552  0B8E  00BA               	movwf	??_sprintf
  7553  0B8F  083A               	movf	??_sprintf,w
  7554  0B90  07BD               	addwf	sprintf@ap,f
  7555                           
  7556                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  7557  0B91  1FC0               	btfss	sprintf@_val+1,7
  7558  0B92  2B9C               	goto	l5465
  7559                           
  7560                           ;doprnt.c: 1269: flag |= 0x03;
  7561  0B93  3003               	movlw	3
  7562  0B94  00BA               	movwf	??_sprintf
  7563  0B95  083A               	movf	??_sprintf,w
  7564  0B96  04BE               	iorwf	sprintf@flag,f
  7565                           
  7566                           ;doprnt.c: 1270: _val._val = -_val._val;
  7567  0B97  09BF               	comf	sprintf@_val,f
  7568  0B98  09C0               	comf	sprintf@_val+1,f
  7569  0B99  0ABF               	incf	sprintf@_val,f
  7570  0B9A  1903               	skipnz
  7571  0B9B  0AC0               	incf	sprintf@_val+1,f
  7572  0B9C                     l5465:	
  7573                           
  7574                           ;doprnt.c: 1271: }
  7575                           ;doprnt.c: 1273: }
  7576                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  7577  0B9C  08C6               	movf	sprintf@prec,f
  7578  0B9D  1D03               	skipz
  7579  0B9E  2BA7               	goto	l5471
  7580  0B9F  0840               	movf	sprintf@_val+1,w
  7581  0BA0  043F               	iorwf	sprintf@_val,w
  7582  0BA1  1D03               	skipz
  7583  0BA2  2BA7               	goto	l5471
  7584                           
  7585                           ;doprnt.c: 1298: prec++;
  7586  0BA3  3001               	movlw	1
  7587  0BA4  00BA               	movwf	??_sprintf
  7588  0BA5  083A               	movf	??_sprintf,w
  7589  0BA6  07C6               	addwf	sprintf@prec,f
  7590  0BA7                     l5471:	
  7591                           
  7592                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7593  0BA7  01C7               	clrf	sprintf@c
  7594  0BA8  0AC7               	incf	sprintf@c,f
  7595  0BA9  0847               	movf	sprintf@c,w
  7596  0BAA  3A05               	xorlw	5
  7597  0BAB  1903               	btfsc	3,2
  7598  0BAC  2BC9               	goto	l5485
  7599  0BAD                     l5477:	
  7600                           
  7601                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  7602  0BAD  3001               	movlw	low (_dpowers| (0+32768))
  7603  0BAE  0084               	movwf	4
  7604  0BAF  3088               	movlw	high (_dpowers| (0+32768))
  7605  0BB0  0085               	movwf	5
  7606  0BB1  3547               	lslf	sprintf@c,w
  7607  0BB2  0784               	addwf	4,f
  7608  0BB3  1803               	skipnc
  7609  0BB4  0A85               	incf	5,f
  7610  0BB5  3F00               	moviw [0]fsr0
  7611  0BB6  00BA               	movwf	??_sprintf
  7612  0BB7  3F01               	moviw [1]fsr0
  7613  0BB8  00BB               	movwf	??_sprintf+1
  7614  0BB9  083B               	movf	??_sprintf+1,w
  7615  0BBA  0240               	subwf	sprintf@_val+1,w
  7616  0BBB  1D03               	skipz
  7617  0BBC  2BBF               	goto	u5845
  7618  0BBD  083A               	movf	??_sprintf,w
  7619  0BBE  023F               	subwf	sprintf@_val,w
  7620  0BBF                     u5845:	
  7621  0BBF  1C03               	btfss	3,0
  7622  0BC0  2BC9               	goto	l5485
  7623                           
  7624                           ;doprnt.c: 1314: break;
  7625  0BC1  3001               	movlw	1
  7626  0BC2  00BA               	movwf	??_sprintf
  7627  0BC3  083A               	movf	??_sprintf,w
  7628  0BC4  07C7               	addwf	sprintf@c,f
  7629  0BC5  0847               	movf	sprintf@c,w
  7630  0BC6  3A05               	xorlw	5
  7631  0BC7  1D03               	skipz
  7632  0BC8  2BAD               	goto	l5477
  7633  0BC9                     l5485:	
  7634                           
  7635                           ;doprnt.c: 1346: if(c < prec)
  7636  0BC9  0847               	movf	sprintf@c,w
  7637  0BCA  3A80               	xorlw	128
  7638  0BCB  00BA               	movwf	??_sprintf
  7639  0BCC  0846               	movf	sprintf@prec,w
  7640  0BCD  3A80               	xorlw	128
  7641  0BCE  02BA               	subwf	??_sprintf,f
  7642  0BCF  1803               	skipnc
  7643  0BD0  2BD6               	goto	l5489
  7644                           
  7645                           ;doprnt.c: 1347: c = prec;
  7646  0BD1  0846               	movf	sprintf@prec,w
  7647  0BD2  00BA               	movwf	??_sprintf
  7648  0BD3  083A               	movf	??_sprintf,w
  7649  0BD4  00C7               	movwf	sprintf@c
  7650  0BD5  2BE2               	goto	l689
  7651  0BD6                     l5489:	
  7652                           
  7653                           ;doprnt.c: 1348: else if(prec < c)
  7654  0BD6  0846               	movf	sprintf@prec,w
  7655  0BD7  3A80               	xorlw	128
  7656  0BD8  00BA               	movwf	??_sprintf
  7657  0BD9  0847               	movf	sprintf@c,w
  7658  0BDA  3A80               	xorlw	128
  7659  0BDB  02BA               	subwf	??_sprintf,f
  7660  0BDC  1803               	skipnc
  7661  0BDD  2BE2               	goto	l689
  7662                           
  7663                           ;doprnt.c: 1349: prec = c;
  7664  0BDE  0847               	movf	sprintf@c,w
  7665  0BDF  00BA               	movwf	??_sprintf
  7666  0BE0  083A               	movf	??_sprintf,w
  7667  0BE1  00C6               	movwf	sprintf@prec
  7668  0BE2                     l689:	
  7669                           
  7670                           ;doprnt.c: 1352: if(width && flag & 0x03)
  7671  0BE2  0845               	movf	sprintf@width+1,w
  7672  0BE3  0444               	iorwf	sprintf@width,w
  7673  0BE4  1903               	skipnz
  7674  0BE5  2BEE               	goto	l5503
  7675  0BE6  083E               	movf	sprintf@flag,w
  7676  0BE7  3903               	andlw	3
  7677  0BE8  1903               	btfsc	3,2
  7678  0BE9  2BEE               	goto	l5503
  7679                           
  7680                           ;doprnt.c: 1353: width--;
  7681  0BEA  30FF               	movlw	255
  7682  0BEB  07C4               	addwf	sprintf@width,f
  7683  0BEC  30FF               	movlw	255
  7684  0BED  3DC5               	addwfc	sprintf@width+1,f
  7685  0BEE                     l5503:	
  7686                           ;doprnt.c: 1358: else
  7687                           ;doprnt.c: 1359: width = 0;
  7688                           
  7689                           ;doprnt.c: 1357: width -= prec;
  7690                           
  7691                           ;doprnt.c: 1356: if(width > prec)
  7692                           
  7693                           ;doprnt.c: 1355: if(flag & 0x4000) {
  7694                           
  7695                           
  7696                           ;doprnt.c: 1360: }
  7697                           ;doprnt.c: 1388: if(width > c)
  7698  0BEE  0847               	movf	sprintf@c,w
  7699  0BEF  00BA               	movwf	??_sprintf
  7700  0BF0  01BB               	clrf	??_sprintf+1
  7701  0BF1  1BBA               	btfsc	??_sprintf,7
  7702  0BF2  03BB               	decf	??_sprintf+1,f
  7703  0BF3  083B               	movf	??_sprintf+1,w
  7704  0BF4  3A80               	xorlw	128
  7705  0BF5  00BC               	movwf	??_sprintf+2
  7706  0BF6  0845               	movf	sprintf@width+1,w
  7707  0BF7  3A80               	xorlw	128
  7708  0BF8  023C               	subwf	??_sprintf+2,w
  7709  0BF9  1D03               	skipz
  7710  0BFA  2BFD               	goto	u5915
  7711  0BFB  0844               	movf	sprintf@width,w
  7712  0BFC  023A               	subwf	??_sprintf,w
  7713  0BFD                     u5915:	
  7714  0BFD  1803               	skipnc
  7715  0BFE  2C0A               	goto	l5507
  7716                           
  7717                           ;doprnt.c: 1389: width -= c;
  7718  0BFF  0020               	movlb	0	; select bank0
  7719  0C00  0847               	movf	sprintf@c,w
  7720  0C01  00BA               	movwf	??_sprintf
  7721  0C02  01BB               	clrf	??_sprintf+1
  7722  0C03  1BBA               	btfsc	??_sprintf,7
  7723  0C04  03BB               	decf	??_sprintf+1,f
  7724  0C05  083A               	movf	??_sprintf,w
  7725  0C06  02C4               	subwf	sprintf@width,f
  7726  0C07  083B               	movf	??_sprintf+1,w
  7727  0C08  3BC5               	subwfb	sprintf@width+1,f
  7728  0C09  2C0D               	goto	l5509
  7729  0C0A                     l5507:	
  7730                           
  7731                           ;doprnt.c: 1390: else
  7732                           ;doprnt.c: 1391: width = 0;
  7733  0C0A  0020               	movlb	0	; select bank0
  7734  0C0B  01C4               	clrf	sprintf@width
  7735  0C0C  01C5               	clrf	sprintf@width+1
  7736  0C0D                     l5509:	
  7737                           
  7738                           ;doprnt.c: 1394: if(flag & 0x04) {
  7739  0C0D  1D3E               	btfss	sprintf@flag,2
  7740  0C0E  2C34               	goto	l5525
  7741                           
  7742                           ;doprnt.c: 1399: if(flag & 0x03)
  7743  0C0F  083E               	movf	sprintf@flag,w
  7744  0C10  3903               	andlw	3
  7745  0C11  1903               	btfsc	3,2
  7746  0C12  2C1F               	goto	l5517
  7747                           
  7748                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  7749  0C13  302D               	movlw	45
  7750  0C14  00BA               	movwf	??_sprintf
  7751  0C15  0843               	movf	sprintf@sp,w
  7752  0C16  0086               	movwf	6
  7753  0C17  3001               	movlw	1	; select bank2/3
  7754  0C18  0087               	movwf	7
  7755  0C19  083A               	movf	??_sprintf,w
  7756  0C1A  0081               	movwf	1
  7757  0C1B  3001               	movlw	1
  7758  0C1C  00BA               	movwf	??_sprintf
  7759  0C1D  083A               	movf	??_sprintf,w
  7760  0C1E  07C3               	addwf	sprintf@sp,f
  7761  0C1F                     l5517:	
  7762                           
  7763                           ;doprnt.c: 1422: if(width)
  7764  0C1F  0845               	movf	sprintf@width+1,w
  7765  0C20  0444               	iorwf	sprintf@width,w
  7766  0C21  1903               	skipnz
  7767  0C22  2C5C               	goto	l5545
  7768                           
  7769                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  7770                           
  7771                           ;doprnt.c: 1423: do
  7772  0C23  3030               	movlw	48
  7773  0C24  00BA               	movwf	??_sprintf
  7774  0C25  0843               	movf	sprintf@sp,w
  7775  0C26  0086               	movwf	6
  7776  0C27  3001               	movlw	1	; select bank2/3
  7777  0C28  0087               	movwf	7
  7778  0C29  083A               	movf	??_sprintf,w
  7779  0C2A  0081               	movwf	1
  7780  0C2B  3001               	movlw	1
  7781  0C2C  00BA               	movwf	??_sprintf
  7782  0C2D  083A               	movf	??_sprintf,w
  7783  0C2E  07C3               	addwf	sprintf@sp,f
  7784                           
  7785                           ;doprnt.c: 1425: while(--width);
  7786  0C2F  30FF               	movlw	255
  7787  0C30  07C4               	addwf	sprintf@width,f
  7788  0C31  30FF               	movlw	255
  7789  0C32  3DC5               	addwfc	sprintf@width+1,f
  7790  0C33  2C1F               	goto	l5517
  7791  0C34                     l5525:	
  7792                           ;doprnt.c: 1427: } else
  7793                           
  7794                           
  7795                           ;doprnt.c: 1429: {
  7796                           ;doprnt.c: 1431: if(width
  7797                           ;doprnt.c: 1435: )
  7798  0C34  0845               	movf	sprintf@width+1,w
  7799  0C35  0444               	iorwf	sprintf@width,w
  7800  0C36  1903               	skipnz
  7801  0C37  2C4C               	goto	l5533
  7802  0C38                     l5527:	
  7803                           ;doprnt.c: 1436: do
  7804                           
  7805                           
  7806                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  7807  0C38  3020               	movlw	32
  7808  0C39  00BA               	movwf	??_sprintf
  7809  0C3A  0843               	movf	sprintf@sp,w
  7810  0C3B  0086               	movwf	6
  7811  0C3C  3001               	movlw	1	; select bank2/3
  7812  0C3D  0087               	movwf	7
  7813  0C3E  083A               	movf	??_sprintf,w
  7814  0C3F  0081               	movwf	1
  7815  0C40  3001               	movlw	1
  7816  0C41  00BA               	movwf	??_sprintf
  7817  0C42  083A               	movf	??_sprintf,w
  7818  0C43  07C3               	addwf	sprintf@sp,f
  7819                           
  7820                           ;doprnt.c: 1438: while(--width);
  7821  0C44  30FF               	movlw	255
  7822  0C45  07C4               	addwf	sprintf@width,f
  7823  0C46  30FF               	movlw	255
  7824  0C47  3DC5               	addwfc	sprintf@width+1,f
  7825  0C48  0845               	movf	sprintf@width+1,w
  7826  0C49  0444               	iorwf	sprintf@width,w
  7827  0C4A  1D03               	skipz
  7828  0C4B  2C38               	goto	l5527
  7829  0C4C                     l5533:	
  7830                           
  7831                           ;doprnt.c: 1445: if(flag & 0x03)
  7832  0C4C  083E               	movf	sprintf@flag,w
  7833  0C4D  3903               	andlw	3
  7834  0C4E  1903               	btfsc	3,2
  7835  0C4F  2C5C               	goto	l5545
  7836                           
  7837                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  7838  0C50  302D               	movlw	45
  7839  0C51                     L9:	
  7840  0C51  00BA               	movwf	??_sprintf
  7841  0C52  0843               	movf	sprintf@sp,w
  7842  0C53  0086               	movwf	6
  7843  0C54  3001               	movlw	1	; select bank2/3
  7844  0C55  0087               	movwf	7
  7845  0C56  083A               	movf	??_sprintf,w
  7846  0C57  0081               	movwf	1
  7847  0C58  3001               	movlw	1
  7848  0C59  00BA               	movwf	??_sprintf
  7849  0C5A  083A               	movf	??_sprintf,w
  7850  0C5B  07C3               	addwf	sprintf@sp,f
  7851  0C5C                     l5545:	
  7852  0C5C  30FF               	movlw	-1
  7853  0C5D  00BA               	movwf	??_sprintf
  7854  0C5E  083A               	movf	??_sprintf,w
  7855  0C5F  07C6               	addwf	sprintf@prec,f
  7856  0C60  0846               	movf	sprintf@prec,w
  7857  0C61  3AFF               	xorlw	255
  7858  0C62  1903               	btfsc	3,2
  7859  0C63  2ADB               	goto	l5547
  7860                           
  7861                           ;doprnt.c: 1485: {
  7862                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  7863                           
  7864                           ;doprnt.c: 1476: }
  7865                           ;doprnt.c: 1481: while(prec--) {
  7866  0C64  300A               	movlw	10
  7867  0C65  00AF               	movwf	?___lwmod
  7868  0C66  3000               	movlw	0
  7869  0C67  00B0               	movwf	?___lwmod+1
  7870  0C68  3001               	movlw	low (_dpowers| (0+32768))
  7871  0C69  0084               	movwf	4
  7872  0C6A  3088               	movlw	high (_dpowers| (0+32768))
  7873  0C6B  0085               	movwf	5
  7874  0C6C  3546               	lslf	sprintf@prec,w
  7875  0C6D  0784               	addwf	4,f
  7876  0C6E  1803               	skipnc
  7877  0C6F  0A85               	incf	5,f
  7878  0C70  3F00               	moviw [0]fsr0
  7879  0C71  00A7               	movwf	?___lwdiv
  7880  0C72  3F01               	moviw [1]fsr0
  7881  0C73  00A8               	movwf	?___lwdiv+1
  7882  0C74  0840               	movf	sprintf@_val+1,w
  7883  0C75  01AA               	clrf	?___lwdiv+3
  7884  0C76  07AA               	addwf	?___lwdiv+3,f
  7885  0C77  083F               	movf	sprintf@_val,w
  7886  0C78  01A9               	clrf	?___lwdiv+2
  7887  0C79  07A9               	addwf	?___lwdiv+2,f
  7888  0C7A  3189  21C9  318A   	fcall	___lwdiv
  7889  0C7D  0020               	movlb	0	; select bank0
  7890  0C7E  0828               	movf	?___lwdiv+1,w
  7891  0C7F  01B2               	clrf	?___lwmod+3
  7892  0C80  07B2               	addwf	?___lwmod+3,f
  7893  0C81  0827               	movf	?___lwdiv,w
  7894  0C82  01B1               	clrf	?___lwmod+2
  7895  0C83  07B1               	addwf	?___lwmod+2,f
  7896  0C84  3189  2107  318A   	fcall	___lwmod
  7897  0C87  0020               	movlb	0	; select bank0
  7898  0C88  082F               	movf	?___lwmod,w
  7899  0C89  3E30               	addlw	48
  7900  0C8A  00BA               	movwf	??_sprintf
  7901  0C8B  083A               	movf	??_sprintf,w
  7902  0C8C  00C7               	movwf	sprintf@c
  7903                           
  7904                           ;doprnt.c: 1530: }
  7905                           ;doprnt.c: 1531: ((*sp++ = (c)));
  7906  0C8D  0847               	movf	sprintf@c,w
  7907  0C8E  2C51               	goto	L9
  7908  0C8F                     l5549:	
  7909                           ;doprnt.c: 1532: }
  7910                           ;doprnt.c: 1540: }
  7911                           ;doprnt.c: 1542: alldone:
  7912                           
  7913                           
  7914                           ;doprnt.c: 1545: *sp = 0;
  7915  0C8F  0843               	movf	sprintf@sp,w
  7916  0C90  0086               	movwf	6
  7917  0C91  3001               	movlw	1	; select bank2/3
  7918  0C92  0087               	movwf	7
  7919  0C93  0181               	clrf	1
  7920  0C94  0008               	return
  7921  0C95                     __end_of_sprintf:	
  7922                           ;doprnt.c: 1547: return 0;
  7923                           ;	Return value of _sprintf is never used
  7924                           
  7925                           
  7926                           	psect	text8
  7927  088E                     __ptext8:	
  7928 ;; *************** function ___wmul *****************
  7929 ;; Defined at:
  7930 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\wmul.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  multiplier      2    7[BANK0 ] unsigned int 
  7933 ;;  multiplicand    2    9[BANK0 ] unsigned int 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  product         2   11[BANK0 ] unsigned int 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  2    7[BANK0 ] unsigned int 
  7938 ;; Registers used:
  7939 ;;		wreg, status,2, status,0
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7945 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7948 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7949 ;;Total ram usage:        6 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    2
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_sprintf
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function ___wmul
  7961  088E                     ___wmul:	
  7962                           
  7963                           ;incstack = 0
  7964                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7965  088E  0020               	movlb	0	; select bank0
  7966  088F  01AB               	clrf	___wmul@product
  7967  0890  01AC               	clrf	___wmul@product+1
  7968  0891                     l5841:	
  7969  0891  1C27               	btfss	___wmul@multiplier,0
  7970  0892  2897               	goto	l1175
  7971  0893  0829               	movf	___wmul@multiplicand,w
  7972  0894  07AB               	addwf	___wmul@product,f
  7973  0895  082A               	movf	___wmul@multiplicand+1,w
  7974  0896  3DAC               	addwfc	___wmul@product+1,f
  7975  0897                     l1175:	
  7976  0897  3001               	movlw	1
  7977  0898                     u6665:	
  7978  0898  35A9               	lslf	___wmul@multiplicand,f
  7979  0899  0DAA               	rlf	___wmul@multiplicand+1,f
  7980  089A  0B89               	decfsz	9,f
  7981  089B  2898               	goto	u6665
  7982  089C  3001               	movlw	1
  7983  089D                     u6675:	
  7984  089D  36A8               	lsrf	___wmul@multiplier+1,f
  7985  089E  0CA7               	rrf	___wmul@multiplier,f
  7986  089F  0B89               	decfsz	9,f
  7987  08A0  289D               	goto	u6675
  7988  08A1  0828               	movf	___wmul@multiplier+1,w
  7989  08A2  0427               	iorwf	___wmul@multiplier,w
  7990  08A3  1D03               	skipz
  7991  08A4  2891               	goto	l5841
  7992  08A5  082C               	movf	___wmul@product+1,w
  7993  08A6  01A8               	clrf	?___wmul+1
  7994  08A7  07A8               	addwf	?___wmul+1,f
  7995  08A8  082B               	movf	___wmul@product,w
  7996  08A9  01A7               	clrf	?___wmul
  7997  08AA  07A7               	addwf	?___wmul,f
  7998  08AB  0008               	return
  7999  08AC                     __end_of___wmul:	
  8000                           
  8001                           	psect	text9
  8002  0907                     __ptext9:	
  8003 ;; *************** function ___lwmod *****************
  8004 ;; Defined at:
  8005 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lwmod.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  divisor         2   15[BANK0 ] unsigned int 
  8008 ;;  dividend        2   17[BANK0 ] unsigned int 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  counter         1   20[BANK0 ] unsigned char 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  2   15[BANK0 ] unsigned int 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2, status,0
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8020 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8023 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8024 ;;Total ram usage:        6 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    2
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_sprintf
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           
  8035                           ;psect for function ___lwmod
  8036  0907                     ___lwmod:	
  8037                           
  8038                           ;incstack = 0
  8039                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8040  0907  0020               	movlb	0	; select bank0
  8041  0908  0830               	movf	___lwmod@divisor+1,w
  8042  0909  042F               	iorwf	___lwmod@divisor,w
  8043  090A  1903               	skipnz
  8044  090B  292F               	goto	l5835
  8045  090C  01B4               	clrf	___lwmod@counter
  8046  090D  0AB4               	incf	___lwmod@counter,f
  8047  090E                     l5825:	
  8048  090E  1BB0               	btfsc	___lwmod@divisor+1,7
  8049  090F  291A               	goto	l5827
  8050  0910  3001               	movlw	1
  8051  0911                     u6605:	
  8052  0911  35AF               	lslf	___lwmod@divisor,f
  8053  0912  0DB0               	rlf	___lwmod@divisor+1,f
  8054  0913  0B89               	decfsz	9,f
  8055  0914  2911               	goto	u6605
  8056  0915  3001               	movlw	1
  8057  0916  00B3               	movwf	??___lwmod
  8058  0917  0833               	movf	??___lwmod,w
  8059  0918  07B4               	addwf	___lwmod@counter,f
  8060  0919  290E               	goto	l5825
  8061  091A                     l5827:	
  8062  091A  0830               	movf	___lwmod@divisor+1,w
  8063  091B  0232               	subwf	___lwmod@dividend+1,w
  8064  091C  1D03               	skipz
  8065  091D  2920               	goto	u6625
  8066  091E  082F               	movf	___lwmod@divisor,w
  8067  091F  0231               	subwf	___lwmod@dividend,w
  8068  0920                     u6625:	
  8069  0920  1C03               	skipc
  8070  0921  2926               	goto	l5831
  8071  0922  082F               	movf	___lwmod@divisor,w
  8072  0923  02B1               	subwf	___lwmod@dividend,f
  8073  0924  0830               	movf	___lwmod@divisor+1,w
  8074  0925  3BB2               	subwfb	___lwmod@dividend+1,f
  8075  0926                     l5831:	
  8076  0926  3001               	movlw	1
  8077  0927                     u6635:	
  8078  0927  36B0               	lsrf	___lwmod@divisor+1,f
  8079  0928  0CAF               	rrf	___lwmod@divisor,f
  8080  0929  0B89               	decfsz	9,f
  8081  092A  2927               	goto	u6635
  8082  092B  3001               	movlw	1
  8083  092C  02B4               	subwf	___lwmod@counter,f
  8084  092D  1D03               	btfss	3,2
  8085  092E  291A               	goto	l5827
  8086  092F                     l5835:	
  8087  092F  0832               	movf	___lwmod@dividend+1,w
  8088  0930  01B0               	clrf	?___lwmod+1
  8089  0931  07B0               	addwf	?___lwmod+1,f
  8090  0932  0831               	movf	___lwmod@dividend,w
  8091  0933  01AF               	clrf	?___lwmod
  8092  0934  07AF               	addwf	?___lwmod,f
  8093  0935  0008               	return
  8094  0936                     __end_of___lwmod:	
  8095                           
  8096                           	psect	text10
  8097  09C9                     __ptext10:	
  8098 ;; *************** function ___lwdiv *****************
  8099 ;; Defined at:
  8100 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  divisor         2    7[BANK0 ] unsigned int 
  8103 ;;  dividend        2    9[BANK0 ] unsigned int 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  quotient        2   13[BANK0 ] unsigned int 
  8106 ;;  counter         1   12[BANK0 ] unsigned char 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  2    7[BANK0 ] unsigned int 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8117 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8119 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8120 ;;Total ram usage:        8 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    2
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_sprintf
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function ___lwdiv
  8132  09C9                     ___lwdiv:	
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8136  09C9  0020               	movlb	0	; select bank0
  8137  09CA  01AD               	clrf	___lwdiv@quotient
  8138  09CB  01AE               	clrf	___lwdiv@quotient+1
  8139  09CC  0828               	movf	___lwdiv@divisor+1,w
  8140  09CD  0427               	iorwf	___lwdiv@divisor,w
  8141  09CE  1903               	skipnz
  8142  09CF  29F9               	goto	l5813
  8143  09D0  01AC               	clrf	___lwdiv@counter
  8144  09D1  0AAC               	incf	___lwdiv@counter,f
  8145  09D2                     l5801:	
  8146  09D2  1BA8               	btfsc	___lwdiv@divisor+1,7
  8147  09D3  29DE               	goto	l5803
  8148  09D4  3001               	movlw	1
  8149  09D5                     u6535:	
  8150  09D5  35A7               	lslf	___lwdiv@divisor,f
  8151  09D6  0DA8               	rlf	___lwdiv@divisor+1,f
  8152  09D7  0B89               	decfsz	9,f
  8153  09D8  29D5               	goto	u6535
  8154  09D9  3001               	movlw	1
  8155  09DA  00AB               	movwf	??___lwdiv
  8156  09DB  082B               	movf	??___lwdiv,w
  8157  09DC  07AC               	addwf	___lwdiv@counter,f
  8158  09DD  29D2               	goto	l5801
  8159  09DE                     l5803:	
  8160  09DE  3001               	movlw	1
  8161  09DF                     u6555:	
  8162  09DF  35AD               	lslf	___lwdiv@quotient,f
  8163  09E0  0DAE               	rlf	___lwdiv@quotient+1,f
  8164  09E1  0B89               	decfsz	9,f
  8165  09E2  29DF               	goto	u6555
  8166  09E3  0828               	movf	___lwdiv@divisor+1,w
  8167  09E4  022A               	subwf	___lwdiv@dividend+1,w
  8168  09E5  1D03               	skipz
  8169  09E6  29E9               	goto	u6565
  8170  09E7  0827               	movf	___lwdiv@divisor,w
  8171  09E8  0229               	subwf	___lwdiv@dividend,w
  8172  09E9                     u6565:	
  8173  09E9  1C03               	skipc
  8174  09EA  29F0               	goto	l5809
  8175  09EB  0827               	movf	___lwdiv@divisor,w
  8176  09EC  02A9               	subwf	___lwdiv@dividend,f
  8177  09ED  0828               	movf	___lwdiv@divisor+1,w
  8178  09EE  3BAA               	subwfb	___lwdiv@dividend+1,f
  8179  09EF  142D               	bsf	___lwdiv@quotient,0
  8180  09F0                     l5809:	
  8181  09F0  3001               	movlw	1
  8182  09F1                     u6575:	
  8183  09F1  36A8               	lsrf	___lwdiv@divisor+1,f
  8184  09F2  0CA7               	rrf	___lwdiv@divisor,f
  8185  09F3  0B89               	decfsz	9,f
  8186  09F4  29F1               	goto	u6575
  8187  09F5  3001               	movlw	1
  8188  09F6  02AC               	subwf	___lwdiv@counter,f
  8189  09F7  1D03               	btfss	3,2
  8190  09F8  29DE               	goto	l5803
  8191  09F9                     l5813:	
  8192  09F9  082E               	movf	___lwdiv@quotient+1,w
  8193  09FA  01A8               	clrf	?___lwdiv+1
  8194  09FB  07A8               	addwf	?___lwdiv+1,f
  8195  09FC  082D               	movf	___lwdiv@quotient,w
  8196  09FD  01A7               	clrf	?___lwdiv
  8197  09FE  07A7               	addwf	?___lwdiv,f
  8198  09FF  0008               	return
  8199  0A00                     __end_of___lwdiv:	
  8200                           
  8201                           	psect	text11
  8202  0847                     __ptext11:	
  8203 ;; *************** function ___bmul *****************
  8204 ;; Defined at:
  8205 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\bmul.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  multiplier      1    wreg     unsigned char 
  8208 ;;  multiplicand    1    7[BANK0 ] unsigned char 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  multiplier      1   10[BANK0 ] unsigned char 
  8211 ;;  product         1    9[BANK0 ] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      unsigned char 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8221 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8225 ;;Total ram usage:        4 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    2
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_sprintf
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           
  8236                           ;psect for function ___bmul
  8237  0847                     ___bmul:	
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8241                           ;___bmul@multiplier stored from wreg
  8242  0847  0020               	movlb	0	; select bank0
  8243  0848  00AA               	movwf	___bmul@multiplier
  8244  0849  01A9               	clrf	___bmul@product
  8245  084A                     l5743:	
  8246  084A  1C2A               	btfss	___bmul@multiplier,0
  8247  084B  2850               	goto	l5747
  8248  084C  0827               	movf	___bmul@multiplicand,w
  8249  084D  00A8               	movwf	??___bmul
  8250  084E  0828               	movf	??___bmul,w
  8251  084F  07A9               	addwf	___bmul@product,f
  8252  0850                     l5747:	
  8253  0850  1003               	clrc
  8254  0851  0DA7               	rlf	___bmul@multiplicand,f
  8255  0852  1003               	clrc
  8256  0853  0CAA               	rrf	___bmul@multiplier,f
  8257  0854  08AA               	movf	___bmul@multiplier,f
  8258  0855  1D03               	skipz
  8259  0856  284A               	goto	l5743
  8260  0857  0829               	movf	___bmul@product,w
  8261  0858  0008               	return
  8262  0859                     __end_of___bmul:	
  8263                           
  8264                           	psect	text12
  8265  0838                     __ptext12:	
  8266 ;; *************** function _isdigit *****************
  8267 ;; Defined at:
  8268 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  c               1    wreg     unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  c               1    8[BANK0 ] unsigned char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;		None               void
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8286 ;;Total ram usage:        2 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    2
  8289 ;; This function calls:
  8290 ;;		Nothing
  8291 ;; This function is called by:
  8292 ;;		_sprintf
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _isdigit
  8298  0838                     _isdigit:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8302                           ;isdigit@c stored from wreg
  8303  0838  0020               	movlb	0	; select bank0
  8304  0839  00A8               	movwf	isdigit@c
  8305  083A  01A7               	clrf	_isdigit$628
  8306  083B  303A               	movlw	58
  8307  083C  0228               	subwf	isdigit@c,w
  8308  083D  1803               	skipnc
  8309  083E  2845               	goto	l5615
  8310  083F  3030               	movlw	48
  8311  0840  0228               	subwf	isdigit@c,w
  8312  0841  1C03               	skipc
  8313  0842  2845               	goto	l5615
  8314  0843  01A7               	clrf	_isdigit$628
  8315  0844  0AA7               	incf	_isdigit$628,f
  8316  0845                     l5615:	
  8317  0845  0C27               	rrf	_isdigit$628,w
  8318  0846  0008               	return
  8319  0847                     __end_of_isdigit:	
  8320                           
  8321                           	psect	text13
  8322  0859                     __ptext13:	
  8323 ;; *************** function _DACSet *****************
  8324 ;; Defined at:
  8325 ;;		line 77 in file "DAC.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  Val             1    wreg     unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  Val             1    8[BANK0 ] unsigned char 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;		None               void
  8332 ;; Registers used:
  8333 ;;		wreg, status,2
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8343 ;;Total ram usage:        2 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    2
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_main
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           
  8354                           ;psect for function _DACSet
  8355  0859                     _DACSet:	
  8356                           
  8357                           ;incstack = 0
  8358                           ; Regs used in _DACSet: [wreg+status,2]
  8359                           ;DACSet@Val stored from wreg
  8360  0859  0020               	movlb	0	; select bank0
  8361  085A  00A8               	movwf	DACSet@Val
  8362                           
  8363                           ;DAC.c: 78: ADCON0Tmp = ADCON0;
  8364  085B  0021               	movlb	1	; select bank1
  8365  085C  081D               	movf	29,w	;volatile
  8366  085D  0020               	movlb	0	; select bank0
  8367  085E  00A7               	movwf	??_DACSet
  8368  085F  0827               	movf	??_DACSet,w
  8369  0860  0021               	movlb	1	; select bank1
  8370  0861  00E1               	movwf	_ADCON0Tmp^(0+128)
  8371                           
  8372                           ;DAC.c: 80: ADCON0 = (((ADCON0)&0b1000001) | 0b0111100);
  8373  0862  081D               	movf	29,w	;volatile
  8374  0863  3941               	andlw	65
  8375  0864  383C               	iorlw	60
  8376  0865  009D               	movwf	29	;volatile
  8377                           
  8378                           ;DAC.c: 81: _delay(20);
  8379  0866  3006               	movlw	6
  8380  0867  0020               	movlb	0	; select bank0
  8381  0868  00A7               	movwf	??_DACSet
  8382  0869                     u6807:	
  8383  0869  0BA7               	decfsz	??_DACSet,f
  8384  086A  2869               	goto	u6807
  8385  086B  0000               	nop
  8386                           
  8387                           ;DAC.c: 82: DAC1CON1 = Val;
  8388  086C  0020               	movlb	0	; select bank0
  8389  086D  0828               	movf	DACSet@Val,w
  8390  086E  0022               	movlb	2	; select bank2
  8391  086F  0099               	movwf	25	;volatile
  8392  0870  0008               	return
  8393  0871                     __end_of_DACSet:	
  8394                           
  8395                           	psect	text14
  8396  0871                     __ptext14:	
  8397 ;; *************** function _InitApp *****************
  8398 ;; Defined at:
  8399 ;;		line 30 in file "user.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;		None               void
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8417 ;;Total ram usage:        0 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    5
  8420 ;; This function calls:
  8421 ;;		_ADCIni
  8422 ;;		_PWMIni
  8423 ;;		_UARTIni
  8424 ;;		_DACInit
  8425 ;;		_DioIni
  8426 ;; This function is called by:
  8427 ;;		_main
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _InitApp
  8433  0871                     _InitApp:	
  8434                           
  8435                           ;user.c: 32: TMR0 = 205;
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  8439  0871  30CD               	movlw	205
  8440  0872  0020               	movlb	0	; select bank0
  8441  0873  0095               	movwf	21	;volatile
  8442                           
  8443                           ;user.c: 33: INTCON = 0b10100000;
  8444  0874  30A0               	movlw	160
  8445  0875  008B               	movwf	11	;volatile
  8446                           
  8447                           ;user.c: 39: OPTION_REG = 0b10000011;
  8448  0876  3083               	movlw	131
  8449  0877  0021               	movlb	1	; select bank1
  8450  0878  0095               	movwf	21	;volatile
  8451                           
  8452                           ;user.c: 48: TRISC2 = 0;
  8453  0879  110E               	bcf	14,2	;volatile
  8454                           
  8455                           ;user.c: 50: ADCIni(1, 0);
  8456  087A  0020               	movlb	0	; select bank0
  8457  087B  01A7               	clrf	?_ADCIni
  8458  087C  3001               	movlw	1
  8459  087D  3189  2196  3188   	fcall	_ADCIni
  8460                           
  8461                           ;user.c: 53: DACInit();
  8462  0880  3188  202B  3188   	fcall	_DACInit
  8463                           
  8464                           ;user.c: 56: PWMIni();
  8465  0883  3188  201F  3188   	fcall	_PWMIni
  8466                           
  8467                           ;user.c: 59: DioIni();
  8468  0886  3197  27E2  3188   	fcall	_DioIni
  8469                           
  8470                           ;user.c: 62: UARTIni();
  8471  0889  3197  27F3         	fcall	_UARTIni
  8472                           
  8473                           ;user.c: 67: TMR0IE = 1;
  8474  088B  168B               	bsf	11,5	;volatile
  8475                           
  8476                           ;user.c: 68: (GIE = 1);
  8477  088C  178B               	bsf	11,7	;volatile
  8478  088D  0008               	return
  8479  088E                     __end_of_InitApp:	
  8480                           
  8481                           	psect	text15
  8482  17E2                     __ptext15:	
  8483 ;; *************** function _DioIni *****************
  8484 ;; Defined at:
  8485 ;;		line 4 in file "dio.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;		None
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;		None               void
  8492 ;; Registers used:
  8493 ;;		None
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8503 ;;Total ram usage:        0 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    2
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_InitApp
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           
  8514                           ;psect for function _DioIni
  8515  17E2                     _DioIni:	
  8516                           
  8517                           ;dio.c: 5: ANSA7 = 0;
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in _DioIni: []
  8521  17E2  0023               	movlb	3	; select bank3
  8522  17E3  138C               	bcf	12,7	;volatile
  8523                           
  8524                           ;dio.c: 6: ANSA5 = 0;
  8525  17E4  128C               	bcf	12,5	;volatile
  8526                           
  8527                           ;dio.c: 7: TRISA7 = 1;
  8528  17E5  0021               	movlb	1	; select bank1
  8529  17E6  178C               	bsf	12,7	;volatile
  8530                           
  8531                           ;dio.c: 8: TRISA5 = 1;
  8532  17E7  168C               	bsf	12,5	;volatile
  8533                           
  8534                           ;dio.c: 10: TRISA6 = 1;
  8535  17E8  170C               	bsf	12,6	;volatile
  8536  17E9  0008               	return
  8537  17EA                     __end_of_DioIni:	
  8538                           
  8539                           	psect	text16
  8540  082B                     __ptext16:	
  8541 ;; *************** function _DACInit *****************
  8542 ;; Defined at:
  8543 ;;		line 37 in file "DAC.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;		None               void
  8550 ;; Registers used:
  8551 ;;		wreg, status,2
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8561 ;;Total ram usage:        0 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    2
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_InitApp
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _DACInit
  8573  082B                     _DACInit:	
  8574                           
  8575                           ;DAC.c: 38: TRISA2 = 0;
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in _DACInit: [wreg+status,2]
  8579  082B  0021               	movlb	1	; select bank1
  8580  082C  110C               	bcf	12,2	;volatile
  8581                           
  8582                           ;DAC.c: 39: ANSA2 = 1;
  8583  082D  0023               	movlb	3	; select bank3
  8584  082E  150C               	bsf	12,2	;volatile
  8585                           
  8586                           ;DAC.c: 41: DAC1NSS = 1;
  8587  082F  0022               	movlb	2	; select bank2
  8588  0830  1418               	bsf	24,0	;volatile
  8589                           
  8590                           ;DAC.c: 66: DAC1CON0 = DAC1CON0 & (0b11110010);
  8591  0831  0818               	movf	24,w	;volatile
  8592  0832  39F2               	andlw	242
  8593  0833  0098               	movwf	24	;volatile
  8594                           
  8595                           ;DAC.c: 68: DAC1OE1 = 1;
  8596  0834  1698               	bsf	24,5	;volatile
  8597                           
  8598                           ;DAC.c: 70: DAC1EN = 1;
  8599  0835  1798               	bsf	24,7	;volatile
  8600                           
  8601                           ;DAC.c: 72: DAC1CON1 = 0;
  8602  0836  0199               	clrf	25	;volatile
  8603  0837  0008               	return
  8604  0838                     __end_of_DACInit:	
  8605                           
  8606                           	psect	text17
  8607  17F3                     __ptext17:	
  8608 ;; *************** function _UARTIni *****************
  8609 ;; Defined at:
  8610 ;;		line 116 in file "UART.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;		None
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;		None
  8615 ;; Return value:  Size  Location     Type
  8616 ;;		None               void
  8617 ;; Registers used:
  8618 ;;		wreg, status,2
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8628 ;;Total ram usage:        0 bytes
  8629 ;; Hardware stack levels used:    1
  8630 ;; Hardware stack levels required when called:    2
  8631 ;; This function calls:
  8632 ;;		Nothing
  8633 ;; This function is called by:
  8634 ;;		_InitApp
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           
  8639                           ;psect for function _UARTIni
  8640  17F3                     _UARTIni:	
  8641                           
  8642                           ;UART.c: 118: TRISC6 = 1;
  8643                           
  8644                           ;incstack = 0
  8645                           ; Regs used in _UARTIni: [wreg+status,2]
  8646  17F3  0021               	movlb	1	; select bank1
  8647  17F4  170E               	bsf	14,6	;volatile
  8648                           
  8649                           ;UART.c: 120: TRISC7 = 1;
  8650  17F5  178E               	bsf	14,7	;volatile
  8651                           
  8652                           ;UART.c: 124: SPBRGH = 0;
  8653  17F6  0023               	movlb	3	; select bank3
  8654  17F7  019C               	clrf	28	;volatile
  8655                           
  8656                           ;UART.c: 125: SPBRGL = 68;
  8657  17F8  3044               	movlw	68
  8658  17F9  009B               	movwf	27	;volatile
  8659                           
  8660                           ;UART.c: 127: BRGH = 1;
  8661  17FA  151E               	bsf	30,2	;volatile
  8662                           
  8663                           ;UART.c: 130: BRG16 = 1;
  8664  17FB  159F               	bsf	31,3	;volatile
  8665                           
  8666                           ;UART.c: 132: SYNC = 0;
  8667  17FC  121E               	bcf	30,4	;volatile
  8668                           
  8669                           ;UART.c: 133: SPEN = 1;
  8670  17FD  179D               	bsf	29,7	;volatile
  8671                           
  8672                           ;UART.c: 142: CREN = 1;
  8673  17FE  161D               	bsf	29,4	;volatile
  8674  17FF  0008               	return
  8675  1800                     __end_of_UARTIni:	
  8676                           
  8677                           	psect	text18
  8678  081F                     __ptext18:	
  8679 ;; *************** function _PWMIni *****************
  8680 ;; Defined at:
  8681 ;;		line 152 in file "PWM.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;		None
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;		None
  8686 ;; Return value:  Size  Location     Type
  8687 ;;		None               void
  8688 ;; Registers used:
  8689 ;;		wreg, status,2, status,0, pclath, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 0/0
  8692 ;;		On exit  : 0/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8699 ;;Total ram usage:        0 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    4
  8702 ;; This function calls:
  8703 ;;		_PWMSetConfig
  8704 ;; This function is called by:
  8705 ;;		_InitApp
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           
  8710                           ;psect for function _PWMIni
  8711  081F                     _PWMIni:	
  8712                           
  8713                           ;PWM.c: 153: PWMSetConfig();
  8714                           
  8715                           ;incstack = 0
  8716                           ; Regs used in _PWMIni: [wreg+status,2+status,0+pclath+cstack]
  8717  081F  3188  20D8         	fcall	_PWMSetConfig
  8718  0821  0008               	return
  8719  0822                     __end_of_PWMIni:	
  8720                           
  8721                           	psect	text19
  8722  08D8                     __ptext19:	
  8723 ;; *************** function _PWMSetConfig *****************
  8724 ;; Defined at:
  8725 ;;		line 37 in file "PWM.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;		None
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;		None
  8730 ;; Return value:  Size  Location     Type
  8731 ;;		None               void
  8732 ;; Registers used:
  8733 ;;		wreg, status,2, status,0, pclath, cstack
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8743 ;;Total ram usage:        0 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    3
  8746 ;; This function calls:
  8747 ;;		_PWMSetDutyCycle
  8748 ;;		_PWMSetPeriod
  8749 ;;		_PWMSetPhase
  8750 ;; This function is called by:
  8751 ;;		_PWMIni
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           
  8756                           ;psect for function _PWMSetConfig
  8757  08D8                     _PWMSetConfig:	
  8758                           
  8759                           ;PWM.c: 53: ANSELC = ANSELC & 0b00000000;
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _PWMSetConfig: [wreg+status,2+status,0+pclath+cstack]
  8763  08D8  0023               	movlb	3	; select bank3
  8764  08D9  018E               	clrf	14	;volatile
  8765                           
  8766                           ;PWM.c: 54: PWMSetDutyCycle(32000);
  8767  08DA  3000               	movlw	0
  8768  08DB  0020               	movlb	0	; select bank0
  8769  08DC  00B6               	movwf	?_PWMSetDutyCycle
  8770  08DD  307D               	movlw	125
  8771  08DE  00B7               	movwf	?_PWMSetDutyCycle+1
  8772  08DF  3187  27F5  3188   	fcall	_PWMSetDutyCycle
  8773                           
  8774                           ;PWM.c: 55: PWMSetPeriod(64000);
  8775  08E2  3000               	movlw	0
  8776  08E3  0020               	movlb	0	; select bank0
  8777  08E4  00B6               	movwf	?_PWMSetPeriod
  8778  08E5  30FA               	movlw	250
  8779  08E6  00B7               	movwf	?_PWMSetPeriod+1
  8780  08E7  3197  27EA  3188   	fcall	_PWMSetPeriod
  8781                           
  8782                           ;PWM.c: 56: PWMSetPhase(0);
  8783  08EA  3000               	movlw	0
  8784  08EB  0020               	movlb	0	; select bank0
  8785  08EC  00A7               	movwf	?_PWMSetPhase
  8786  08ED  3000               	movlw	0
  8787  08EE  00A8               	movwf	?_PWMSetPhase+1
  8788  08EF  3188  2022         	fcall	_PWMSetPhase
  8789                           
  8790                           ;PWM.c: 78: PSMC1CLK = 0x01;
  8791  08F1  3001               	movlw	1
  8792  08F2  003D               	movlb	29	; select bank29
  8793  08F3  0094               	movwf	20	;volatile
  8794                           
  8795                           ;PWM.c: 82: PSMC1INT = 0x00;
  8796  08F4  01A0               	clrf	32	;volatile
  8797                           
  8798                           ;PWM.c: 86: PSMC1OEN = 0x03;
  8799  08F5  3003               	movlw	3
  8800  08F6  0095               	movwf	21	;volatile
  8801                           
  8802                           ;PWM.c: 87: PSMC1STR0 = 0x03;
  8803  08F7  3003               	movlw	3
  8804  08F8  00AE               	movwf	46	;volatile
  8805                           
  8806                           ;PWM.c: 88: PSMC1POL = 0x00;
  8807  08F9  0196               	clrf	22	;volatile
  8808                           
  8809                           ;PWM.c: 96: PSMC1PRSbits.P1PRST = 1;
  8810  08FA  141C               	bsf	28,0	;volatile
  8811                           
  8812                           ;PWM.c: 97: PSMC1PHSbits.P1PHST = 1;
  8813  08FB  141A               	bsf	26,0	;volatile
  8814                           
  8815                           ;PWM.c: 98: PSMC1DCSbits.P1DCST = 1;
  8816  08FC  141B               	bsf	27,0	;volatile
  8817                           
  8818                           ;PWM.c: 101: PSMC1DBR = 10;
  8819  08FD  300A               	movlw	10
  8820  08FE  00A9               	movwf	41	;volatile
  8821                           
  8822                           ;PWM.c: 102: PSMC1DBF = 10;
  8823  08FF  300A               	movlw	10
  8824  0900  00AA               	movwf	42	;volatile
  8825                           
  8826                           ;PWM.c: 106: PSMC1CON = 0b11110001;
  8827  0901  30F1               	movlw	241
  8828  0902  0091               	movwf	17	;volatile
  8829                           
  8830                           ;PWM.c: 114: TRISC0 = 0;
  8831  0903  0021               	movlb	1	; select bank1
  8832  0904  100E               	bcf	14,0	;volatile
  8833                           
  8834                           ;PWM.c: 115: TRISC1 = 0;
  8835  0905  108E               	bcf	14,1	;volatile
  8836  0906  0008               	return
  8837  0907                     __end_of_PWMSetConfig:	
  8838                           
  8839                           	psect	text20
  8840  0822                     __ptext20:	
  8841 ;; *************** function _PWMSetPhase *****************
  8842 ;; Defined at:
  8843 ;;		line 121 in file "PWM.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  cntPhase        2    7[BANK0 ] unsigned int 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;		None
  8848 ;; Return value:  Size  Location     Type
  8849 ;;		None               void
  8850 ;; Registers used:
  8851 ;;		wreg, status,2
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8861 ;;Total ram usage:        2 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    2
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_PWMSetConfig
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _PWMSetPhase
  8873  0822                     _PWMSetPhase:	
  8874                           
  8875                           ;PWM.c: 122: PSMC1PHL = cntPhase & 0x00FF;
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in _PWMSetPhase: [wreg+status,2]
  8879  0822  0020               	movlb	0	; select bank0
  8880  0823  0827               	movf	PWMSetPhase@cntPhase,w
  8881  0824  003D               	movlb	29	; select bank29
  8882  0825  00A1               	movwf	33	;volatile
  8883                           
  8884                           ;PWM.c: 123: PSMC1PHH = cntPhase>>8;
  8885  0826  0020               	movlb	0	; select bank0
  8886  0827  0828               	movf	PWMSetPhase@cntPhase+1,w
  8887  0828  003D               	movlb	29	; select bank29
  8888  0829  00A2               	movwf	34	;volatile
  8889  082A  0008               	return
  8890  082B                     __end_of_PWMSetPhase:	
  8891                           
  8892                           	psect	text21
  8893  17EA                     __ptext21:	
  8894 ;; *************** function _PWMSetPeriod *****************
  8895 ;; Defined at:
  8896 ;;		line 130 in file "PWM.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  cntPeriod       2   22[BANK0 ] unsigned int 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		wreg, status,2
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8914 ;;Total ram usage:        2 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    2
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_PWMSetConfig
  8921 ;;		_main
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _PWMSetPeriod
  8927  17EA                     _PWMSetPeriod:	
  8928                           
  8929                           ;PWM.c: 132: PSMC1PRL = cntPeriod & 0x00FF;
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _PWMSetPeriod: [wreg+status,2]
  8933  17EA  0020               	movlb	0	; select bank0
  8934  17EB  0836               	movf	PWMSetPeriod@cntPeriod,w
  8935  17EC  003D               	movlb	29	; select bank29
  8936  17ED  00A5               	movwf	37	;volatile
  8937                           
  8938                           ;PWM.c: 133: PSMC1PRH = cntPeriod>>8;
  8939  17EE  0020               	movlb	0	; select bank0
  8940  17EF  0837               	movf	PWMSetPeriod@cntPeriod+1,w
  8941  17F0  003D               	movlb	29	; select bank29
  8942  17F1  00A6               	movwf	38	;volatile
  8943  17F2  0008               	return
  8944  17F3                     __end_of_PWMSetPeriod:	
  8945                           
  8946                           	psect	text22
  8947  07F5                     __ptext22:	
  8948 ;; *************** function _PWMSetDutyCycle *****************
  8949 ;; Defined at:
  8950 ;;		line 141 in file "PWM.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  cntDutyCycle    2   22[BANK0 ] unsigned int 
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;		None
  8955 ;; Return value:  Size  Location     Type
  8956 ;;		None               void
  8957 ;; Registers used:
  8958 ;;		wreg, status,2
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8968 ;;Total ram usage:        2 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    2
  8971 ;; This function calls:
  8972 ;;		Nothing
  8973 ;; This function is called by:
  8974 ;;		_PWMSetConfig
  8975 ;;		_main
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _PWMSetDutyCycle
  8981  07F5                     _PWMSetDutyCycle:	
  8982                           
  8983                           ;PWM.c: 144: PSMC1DCL = cntDutyCycle & 0x00FF;
  8984                           
  8985                           ;incstack = 0
  8986                           ; Regs used in _PWMSetDutyCycle: [wreg+status,2]
  8987  07F5  0020               	movlb	0	; select bank0
  8988  07F6  0836               	movf	PWMSetDutyCycle@cntDutyCycle,w
  8989  07F7  003D               	movlb	29	; select bank29
  8990  07F8  00A3               	movwf	35	;volatile
  8991                           
  8992                           ;PWM.c: 145: PSMC1DCH = cntDutyCycle>>8;
  8993  07F9  0020               	movlb	0	; select bank0
  8994  07FA  0837               	movf	PWMSetDutyCycle@cntDutyCycle+1,w
  8995  07FB  003D               	movlb	29	; select bank29
  8996  07FC  00A4               	movwf	36	;volatile
  8997                           
  8998                           ;PWM.c: 147: PSMC1LD = 1;
  8999  07FD  1711               	bsf	17,6	;volatile
  9000  07FE  0008               	return
  9001  07FF                     __end_of_PWMSetDutyCycle:	
  9002                           
  9003                           	psect	text23
  9004  0996                     __ptext23:	
  9005 ;; *************** function _ADCIni *****************
  9006 ;; Defined at:
  9007 ;;		line 141 in file "ADC.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;  ANx             1    wreg     unsigned char 
  9010 ;;  Fosc            1    7[BANK0 ] unsigned char 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;  ANx             1    9[BANK0 ] unsigned char 
  9013 ;; Return value:  Size  Location     Type
  9014 ;;		None               void
  9015 ;; Registers used:
  9016 ;;		wreg, status,2, status,0
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9022 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9026 ;;Total ram usage:        3 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    2
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;;		_InitApp
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           
  9037                           ;psect for function _ADCIni
  9038  0996                     _ADCIni:	
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _ADCIni: [wreg+status,2+status,0]
  9042                           ;ADCIni@ANx stored from wreg
  9043  0996  0020               	movlb	0	; select bank0
  9044  0997  00A9               	movwf	ADCIni@ANx
  9045                           
  9046                           ;ADC.c: 142: TRISA = TRISA | (0b00000001<<ANx);
  9047  0998  3001               	movlw	1
  9048  0999  00A8               	movwf	??_ADCIni
  9049  099A  0A29               	incf	ADCIni@ANx,w
  9050  099B  299D               	goto	u4944
  9051  099C                     u4945:	
  9052  099C  35A8               	lslf	??_ADCIni,f
  9053  099D                     u4944:	
  9054  099D  0B89               	decfsz	9,f
  9055  099E  299C               	goto	u4945
  9056  099F  0828               	movf	??_ADCIni,w
  9057  09A0  0021               	movlb	1	; select bank1
  9058  09A1  040C               	iorwf	12,w	;volatile
  9059  09A2  008C               	movwf	12	;volatile
  9060                           
  9061                           ;ADC.c: 143: ANSELA = ANSELA | (0b00000001<<ANx);
  9062  09A3  3001               	movlw	1
  9063  09A4  0020               	movlb	0	; select bank0
  9064  09A5  00A8               	movwf	??_ADCIni
  9065  09A6  0A29               	incf	ADCIni@ANx,w
  9066  09A7  29A9               	goto	u4954
  9067  09A8                     u4955:	
  9068  09A8  35A8               	lslf	??_ADCIni,f
  9069  09A9                     u4954:	
  9070  09A9  0B89               	decfsz	9,f
  9071  09AA  29A8               	goto	u4955
  9072  09AB  0828               	movf	??_ADCIni,w
  9073  09AC  0023               	movlb	3	; select bank3
  9074  09AD  040C               	iorwf	12,w	;volatile
  9075  09AE  008C               	movwf	12	;volatile
  9076                           
  9077                           ;ADC.c: 144: ADCON1 = 0b11110000;
  9078  09AF  30F0               	movlw	240
  9079  09B0  0021               	movlb	1	; select bank1
  9080  09B1  009E               	movwf	30	;volatile
  9081                           
  9082                           ;ADC.c: 159: ADCON2 = 0b00001111;
  9083  09B2  300F               	movlw	15
  9084  09B3  009F               	movwf	31	;volatile
  9085                           
  9086                           ;ADC.c: 165: ADCON0 = (ANx<<2) & 0b01111100;
  9087  09B4  0020               	movlb	0	; select bank0
  9088  09B5  0829               	movf	ADCIni@ANx,w
  9089  09B6  00A8               	movwf	??_ADCIni
  9090  09B7  3001               	movlw	1
  9091  09B8                     u4965:	
  9092  09B8  35A8               	lslf	??_ADCIni,f
  9093  09B9  3EFF               	addlw	-1
  9094  09BA  1D03               	skipz
  9095  09BB  29B8               	goto	u4965
  9096  09BC  3528               	lslf	??_ADCIni,w
  9097  09BD  397C               	andlw	124
  9098  09BE  0021               	movlb	1	; select bank1
  9099  09BF  009D               	movwf	29	;volatile
  9100                           
  9101                           ;ADC.c: 173: ADON = 1;
  9102  09C0  141D               	bsf	29,0	;volatile
  9103                           
  9104                           ;ADC.c: 174: _delay(100);
  9105  09C1  3021               	movlw	33
  9106  09C2  0020               	movlb	0	; select bank0
  9107  09C3  00A8               	movwf	??_ADCIni
  9108  09C4                     u6817:	
  9109  09C4  0BA8               	decfsz	??_ADCIni,f
  9110  09C5  29C4               	goto	u6817
  9111                           
  9112                           ;ADC.c: 175: GO = 1;
  9113  09C6  0021               	movlb	1	; select bank1
  9114  09C7  149D               	bsf	29,1	;volatile
  9115  09C8  0008               	return
  9116  09C9                     __end_of_ADCIni:	
  9117                           
  9118                           	psect	text24
  9119  17CB                     __ptext24:	
  9120 ;; *************** function _ConfigureOscillator *****************
  9121 ;; Defined at:
  9122 ;;		line 21 in file "system.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;		None               void
  9129 ;; Registers used:
  9130 ;;		wreg
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:    2
  9143 ;; This function calls:
  9144 ;;		Nothing
  9145 ;; This function is called by:
  9146 ;;		_main
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _ConfigureOscillator
  9152  17CB                     _ConfigureOscillator:	
  9153                           
  9154                           ;system.c: 23: OSCCON= 0b11111100;
  9155                           
  9156                           ;incstack = 0
  9157                           ; Regs used in _ConfigureOscillator: [wreg]
  9158  17CB  30FC               	movlw	252
  9159  17CC  0021               	movlb	1	; select bank1
  9160  17CD  0099               	movwf	25	;volatile
  9161  17CE  0008               	return
  9162  17CF                     __end_of_ConfigureOscillator:	
  9163                           
  9164                           	psect	text25
  9165  0756                     __ptext25:	
  9166 ;; *************** function _UARTSend *****************
  9167 ;; Defined at:
  9168 ;;		line 167 in file "UART.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;  pData           1    wreg     PTR unsigned char 
  9171 ;;		 -> chBufADC(20), 
  9172 ;;  stLen           1    7[BANK0 ] unsigned char 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  pData           1   10[BANK0 ] PTR unsigned char 
  9175 ;;		 -> chBufADC(20), 
  9176 ;;  i               2   11[BANK0 ] int 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      unsigned char 
  9179 ;; Registers used:
  9180 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9186 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9187 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9190 ;;Total ram usage:        6 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:    2
  9193 ;; This function calls:
  9194 ;;		Nothing
  9195 ;; This function is called by:
  9196 ;;		_main
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           
  9201                           ;psect for function _UARTSend
  9202  0756                     _UARTSend:	
  9203                           
  9204                           ;incstack = 0
  9205                           ; Regs used in _UARTSend: [wreg+fsr1l+fsr1h+status,2+status,0]
  9206                           ;UARTSend@pData stored from wreg
  9207  0756  0020               	movlb	0	; select bank0
  9208  0757  00AA               	movwf	UARTSend@pData
  9209                           
  9210                           ;UART.c: 168: if (UART_cntTxUART ==0)
  9211  0758  08E3               	movf	_UART_cntTxUART,f	;volatile
  9212  0759  1D03               	skipz
  9213  075A  2FAB               	goto	l4957
  9214                           
  9215                           ;UART.c: 169: {
  9216                           ;UART.c: 170: if (stLen == 0)
  9217  075B  08A7               	movf	UARTSend@stLen,f
  9218  075C  1903               	btfsc	3,2
  9219  075D  2F73               	goto	l4939
  9220  075E  2F7E               	goto	l4941
  9221  075F                     l4935:	
  9222                           ;UART.c: 171: {
  9223                           ;UART.c: 172: while (*(pData + UART_cntTxUART) != '\0')
  9224                           
  9225                           
  9226                           ;UART.c: 173: {
  9227                           ;UART.c: 174: UART_chTxBuf[UART_cntTxUART]=pData[UART_cntTxUART];
  9228  075F  0863               	movf	_UART_cntTxUART,w
  9229  0760  072A               	addwf	UARTSend@pData,w
  9230  0761  00A8               	movwf	??_UARTSend
  9231  0762  0828               	movf	??_UARTSend,w
  9232  0763  0086               	movwf	6
  9233  0764  3001               	movlw	1	; select bank2/3
  9234  0765  0087               	movwf	7
  9235  0766  0801               	movf	1,w
  9236  0767  00A9               	movwf	??_UARTSend+1
  9237  0768  0863               	movf	_UART_cntTxUART,w
  9238  0769  3E34               	addlw	_UART_chTxBuf& (0+255)
  9239  076A  0086               	movwf	6
  9240  076B  3001               	movlw	1	; select bank2/3
  9241  076C  0087               	movwf	7
  9242  076D  0829               	movf	??_UARTSend+1,w
  9243  076E  0081               	movwf	1
  9244                           
  9245                           ;UART.c: 175: UART_cntTxUART++;
  9246  076F  3001               	movlw	1
  9247  0770  00A8               	movwf	??_UARTSend
  9248  0771  0828               	movf	??_UARTSend,w
  9249  0772  07E3               	addwf	_UART_cntTxUART,f	;volatile
  9250  0773                     l4939:	
  9251  0773  0863               	movf	_UART_cntTxUART,w
  9252  0774  072A               	addwf	UARTSend@pData,w
  9253  0775  00A8               	movwf	??_UARTSend
  9254  0776  0828               	movf	??_UARTSend,w
  9255  0777  0086               	movwf	6
  9256  0778  3001               	movlw	1	; select bank2/3
  9257  0779  0087               	movwf	7
  9258  077A  0881               	movf	1,f
  9259  077B  1903               	btfsc	3,2
  9260  077C  2FA5               	goto	l209
  9261  077D  2F5F               	goto	l4935
  9262  077E                     l4941:	
  9263                           ;UART.c: 176: }
  9264                           ;UART.c: 179: }
  9265                           
  9266                           
  9267                           ;UART.c: 180: else
  9268                           ;UART.c: 181: {
  9269                           ;UART.c: 182: for(int i=0; i<stLen;i++)
  9270  077E  01AB               	clrf	UARTSend@i
  9271  077F  01AC               	clrf	UARTSend@i+1
  9272  0780                     l4949:	
  9273  0780  082C               	movf	UARTSend@i+1,w
  9274  0781  3A80               	xorlw	128
  9275  0782  00A8               	movwf	??_UARTSend
  9276  0783  3080               	movlw	128
  9277  0784  0228               	subwf	??_UARTSend,w
  9278  0785  1D03               	skipz
  9279  0786  2F89               	goto	u5085
  9280  0787  0827               	movf	UARTSend@stLen,w
  9281  0788  022B               	subwf	UARTSend@i,w
  9282  0789                     u5085:	
  9283  0789  1803               	btfsc	3,0
  9284  078A  2FA5               	goto	l209
  9285                           
  9286                           ;UART.c: 183: {
  9287                           ;UART.c: 184: UART_chTxBuf[i] = pData[i];
  9288  078B  0020               	movlb	0	; select bank0
  9289  078C  082B               	movf	UARTSend@i,w
  9290  078D  072A               	addwf	UARTSend@pData,w
  9291  078E  00A8               	movwf	??_UARTSend
  9292  078F  0828               	movf	??_UARTSend,w
  9293  0790  0086               	movwf	6
  9294  0791  3001               	movlw	1	; select bank2/3
  9295  0792  0087               	movwf	7
  9296  0793  0801               	movf	1,w
  9297  0794  00A9               	movwf	??_UARTSend+1
  9298  0795  082B               	movf	UARTSend@i,w
  9299  0796  3E34               	addlw	_UART_chTxBuf& (0+255)
  9300  0797  0086               	movwf	6
  9301  0798  3001               	movlw	1	; select bank2/3
  9302  0799  0087               	movwf	7
  9303  079A  0829               	movf	??_UARTSend+1,w
  9304  079B  0081               	movwf	1
  9305                           
  9306                           ;UART.c: 185: UART_cntTxUART++;
  9307  079C  3001               	movlw	1
  9308  079D  00A8               	movwf	??_UARTSend
  9309  079E  0828               	movf	??_UARTSend,w
  9310  079F  07E3               	addwf	_UART_cntTxUART,f	;volatile
  9311  07A0  3001               	movlw	1
  9312  07A1  07AB               	addwf	UARTSend@i,f
  9313  07A2  3000               	movlw	0
  9314  07A3  3DAC               	addwfc	UARTSend@i+1,f
  9315  07A4  2F80               	goto	l4949
  9316  07A5                     l209:	
  9317                           
  9318                           ;UART.c: 186: }
  9319                           ;UART.c: 187: }
  9320                           ;UART.c: 190: TXIE = 1;
  9321  07A5  0021               	movlb	1	; select bank1
  9322  07A6  1611               	bsf	17,4	;volatile
  9323                           
  9324                           ;UART.c: 193: TXEN = 1;
  9325  07A7  0023               	movlb	3	; select bank3
  9326  07A8  169E               	bsf	30,5	;volatile
  9327                           
  9328                           ;UART.c: 195: return 1;
  9329  07A9  3001               	movlw	1
  9330                           
  9331                           ;UART.c: 196: }
  9332  07AA  0008               	return
  9333  07AB                     l4957:	
  9334                           
  9335                           ;UART.c: 197: else
  9336                           ;UART.c: 198: {
  9337                           ;UART.c: 199: return 0;
  9338  07AB  3000               	movlw	0
  9339  07AC  0008               	return
  9340  07AD                     __end_of_UARTSend:	
  9341                           
  9342                           	psect	text26
  9343  0A00                     __ptext26:	
  9344 ;; *************** function _ReadADC *****************
  9345 ;; Defined at:
  9346 ;;		line 179 in file "ADC.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  ANx             1    wreg     unsigned char 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  ANx             1   11[BANK0 ] unsigned char 
  9351 ;;  vADC            2   12[BANK0 ] int 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  2    7[BANK0 ] int 
  9354 ;; Registers used:
  9355 ;;		wreg, status,2, status,0
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9362 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9364 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9365 ;;Total ram usage:        7 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    2
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_main
  9372 ;;		_SearchingOffSet
  9373 ;;		_ScanFrq
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           
  9378                           ;psect for function _ReadADC
  9379  0A00                     _ReadADC:	
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _ReadADC: [wreg+status,2+status,0]
  9383                           ;ReadADC@ANx stored from wreg
  9384  0A00  0020               	movlb	0	; select bank0
  9385  0A01  00AB               	movwf	ReadADC@ANx
  9386                           
  9387                           ;ADC.c: 180: int vADC;
  9388                           ;ADC.c: 183: ADCON0 = (ADCON0&0b10000011)|((ANx<<2) & 0b01111100);
  9389  0A02  082B               	movf	ReadADC@ANx,w
  9390  0A03  00A9               	movwf	??_ReadADC
  9391  0A04  3002               	movlw	2
  9392  0A05                     u4975:	
  9393  0A05  35A9               	lslf	??_ReadADC,f
  9394  0A06  0B89               	decfsz	9,f
  9395  0A07  2A05               	goto	u4975
  9396  0A08  307C               	movlw	124
  9397  0A09  0529               	andwf	??_ReadADC,w
  9398  0A0A  00AA               	movwf	??_ReadADC+1
  9399  0A0B  0021               	movlb	1	; select bank1
  9400  0A0C  081D               	movf	29,w	;volatile
  9401  0A0D  3983               	andlw	131
  9402  0A0E  0020               	movlb	0	; select bank0
  9403  0A0F  042A               	iorwf	??_ReadADC+1,w
  9404  0A10  0021               	movlb	1	; select bank1
  9405  0A11  009D               	movwf	29	;volatile
  9406                           
  9407                           ;ADC.c: 184: ADON = 1;
  9408  0A12  141D               	bsf	29,0	;volatile
  9409                           
  9410                           ;ADC.c: 185: _delay(200);
  9411  0A13  3042               	movlw	66
  9412  0A14  0020               	movlb	0	; select bank0
  9413  0A15  00A9               	movwf	??_ReadADC
  9414  0A16                     u6827:	
  9415  0A16  0BA9               	decfsz	??_ReadADC,f
  9416  0A17  2A16               	goto	u6827
  9417  0A18  0000               	nop
  9418                           
  9419                           ;ADC.c: 186: GO = 1;
  9420  0A19  0021               	movlb	1	; select bank1
  9421  0A1A  149D               	bsf	29,1	;volatile
  9422  0A1B                     l55:	
  9423                           ;ADC.c: 187: while (DONE){};
  9424                           
  9425  0A1B  189D               	btfsc	29,1	;volatile
  9426  0A1C  2A1B               	goto	l55
  9427                           
  9428                           ;ADC.c: 189: vADC = ADRESH;
  9429  0A1D  081C               	movf	28,w	;volatile
  9430  0A1E  0020               	movlb	0	; select bank0
  9431  0A1F  00A9               	movwf	??_ReadADC
  9432  0A20  01AA               	clrf	??_ReadADC+1
  9433  0A21  0829               	movf	??_ReadADC,w
  9434  0A22  00AC               	movwf	ReadADC@vADC
  9435  0A23  082A               	movf	??_ReadADC+1,w
  9436  0A24  00AD               	movwf	ReadADC@vADC+1
  9437                           
  9438                           ;ADC.c: 190: vADC <<=8;
  9439  0A25  3008               	movlw	8
  9440  0A26                     u4995:	
  9441  0A26  35AC               	lslf	ReadADC@vADC,f
  9442  0A27  0DAD               	rlf	ReadADC@vADC+1,f
  9443  0A28  0B89               	decfsz	9,f
  9444  0A29  2A26               	goto	u4995
  9445                           
  9446                           ;ADC.c: 191: vADC |=ADRESL;
  9447  0A2A  0021               	movlb	1	; select bank1
  9448  0A2B  081B               	movf	27,w	;volatile
  9449  0A2C  0020               	movlb	0	; select bank0
  9450  0A2D  00A9               	movwf	??_ReadADC
  9451  0A2E  01AA               	clrf	??_ReadADC+1
  9452  0A2F  0829               	movf	??_ReadADC,w
  9453  0A30  04AC               	iorwf	ReadADC@vADC,f
  9454  0A31  082A               	movf	??_ReadADC+1,w
  9455  0A32  04AD               	iorwf	ReadADC@vADC+1,f
  9456                           
  9457                           ;ADC.c: 193: ADIF = 1;
  9458  0A33  1711               	bsf	17,6	;volatile
  9459                           
  9460                           ;ADC.c: 194: GO=1;
  9461  0A34  0021               	movlb	1	; select bank1
  9462  0A35  149D               	bsf	29,1	;volatile
  9463                           
  9464                           ;ADC.c: 196: return vADC;
  9465  0A36  0020               	movlb	0	; select bank0
  9466  0A37  082D               	movf	ReadADC@vADC+1,w
  9467  0A38  01A8               	clrf	?_ReadADC+1
  9468  0A39  07A8               	addwf	?_ReadADC+1,f
  9469  0A3A  082C               	movf	ReadADC@vADC,w
  9470  0A3B  01A7               	clrf	?_ReadADC
  9471  0A3C  07A7               	addwf	?_ReadADC,f
  9472  0A3D  0008               	return
  9473  0A3E                     __end_of_ReadADC:	
  9474                           
  9475                           	psect	intentry
  9476  0004                     __pintentry:	
  9477 ;; *************** function _isr *****************
  9478 ;; Defined at:
  9479 ;;		line 53 in file "interrupts.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9495 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9496 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9497 ;;Total ram usage:        7 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    1
  9500 ;; This function calls:
  9501 ;;		i1_PWMSetPeriod
  9502 ;;		i1_PWMSetDutyCycle
  9503 ;;		i1___lmul
  9504 ;; This function is called by:
  9505 ;;		Interrupt level 1
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509  0004                     _isr:	
  9510                           
  9511                           ;incstack = 0
  9512                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  9513  0004  3180               	pagesel	$
  9514  0005  0020               	movlb	0	; select bank0
  9515  0006  087F               	movf	127,w
  9516  0007  00A6               	movwf	??_isr+6
  9517                           
  9518                           ;interrupts.c: 79: (GIE = 0);
  9519  0008  138B               	bcf	11,7	;volatile
  9520                           
  9521                           ;interrupts.c: 81: if(TMR0IE && TMR0IF)
  9522  0009  1A8B               	btfsc	11,5	;volatile
  9523  000A  1D0B               	btfss	11,2	;volatile
  9524  000B  281F               	goto	i1l4651
  9525                           
  9526                           ;interrupts.c: 82: {
  9527                           ;interrupts.c: 83: if (counter == 100)
  9528  000C  3064               	movlw	100
  9529  000D  0021               	movlb	1	; select bank1
  9530  000E  0648               	xorwf	_counter^(0+128),w	;volatile
  9531  000F  0449               	iorwf	(_counter+1)^(0+128),w	;volatile
  9532  0010  1D03               	skipz
  9533  0011  2816               	goto	i1l4645
  9534                           
  9535                           ;interrupts.c: 84: {
  9536                           ;interrupts.c: 85: counter = 0;
  9537  0012  01C8               	clrf	_counter^(0+128)	;volatile
  9538  0013  01C9               	clrf	(_counter+1)^(0+128)	;volatile
  9539                           
  9540                           ;interrupts.c: 86: flgTicTac = 1;
  9541  0014  0020               	movlb	0	; select bank0
  9542  0015  1567               	bsf	_flgTicTac/(0+8),_flgTicTac& (0+7)	;volatile
  9543  0016                     i1l4645:	
  9544                           
  9545                           ;interrupts.c: 87: }
  9546                           ;interrupts.c: 88: ++counter;
  9547  0016  3001               	movlw	1
  9548  0017  0021               	movlb	1	; select bank1
  9549  0018  07C8               	addwf	_counter^(0+128),f	;volatile
  9550  0019  3000               	movlw	0
  9551  001A  3DC9               	addwfc	(_counter+1)^(0+128),f	;volatile
  9552                           
  9553                           ;interrupts.c: 89: TMR0IF=0;
  9554  001B  110B               	bcf	11,2	;volatile
  9555                           
  9556                           ;interrupts.c: 90: TMR0 = 205;
  9557  001C  30CD               	movlw	205
  9558  001D  0020               	movlb	0	; select bank0
  9559  001E  0095               	movwf	21	;volatile
  9560  001F                     i1l4651:	
  9561                           
  9562                           ;interrupts.c: 91: }
  9563                           ;interrupts.c: 94: if (P1TPRIE && P1TPRIF)
  9564  001F  003D               	movlb	29	; select bank29
  9565  0020  1A20               	btfsc	32,4	;volatile
  9566  0021  1C20               	btfss	32,0	;volatile
  9567  0022  28A8               	goto	i1l4679
  9568                           
  9569                           ;interrupts.c: 95: {
  9570                           ;interrupts.c: 97: cntPerd++;
  9571  0023  3001               	movlw	1
  9572  0024  0020               	movlb	0	; select bank0
  9573  0025  00A0               	movwf	??_isr
  9574  0026  0820               	movf	??_isr,w
  9575  0027  0021               	movlb	1	; select bank1
  9576  0028  07E6               	addwf	_cntPerd^(0+128),f
  9577                           
  9578                           ;interrupts.c: 98: if (flgPSMC==0)
  9579  0029  0020               	movlb	0	; select bank0
  9580  002A  18E7               	btfsc	_flgPSMC/(0+8),_flgPSMC& (0+7)	;volatile
  9581  002B  2896               	goto	i1l4669
  9582                           
  9583                           ;interrupts.c: 99: {
  9584                           ;interrupts.c: 100: if (cntPerd == 40)
  9585  002C  0021               	movlb	1	; select bank1
  9586  002D  0866               	movf	_cntPerd^(0+128),w
  9587  002E  3A28               	xorlw	40
  9588  002F  1D03               	skipz
  9589  0030  2835               	goto	i1l4665
  9590                           
  9591                           ;interrupts.c: 101: {
  9592                           ;interrupts.c: 102: flgPSMC = 1;
  9593  0031  0020               	movlb	0	; select bank0
  9594  0032  14E7               	bsf	_flgPSMC/(0+8),_flgPSMC& (0+7)	;volatile
  9595                           
  9596                           ;interrupts.c: 103: cntPerd = 0;
  9597  0033  0021               	movlb	1	; select bank1
  9598  0034  01E6               	clrf	_cntPerd^(0+128)
  9599  0035                     i1l4665:	
  9600                           
  9601                           ;interrupts.c: 104: }
  9602                           ;interrupts.c: 107: PWMSetPeriod (16000-((uint32_t)15600*vPWM)/4096);
  9603  0035  0020               	movlb	0	; select bank0
  9604  0036  0865               	movf	_vPWM,w
  9605  0037  00F0               	movwf	?i1___lmul
  9606  0038  0866               	movf	_vPWM+1,w
  9607  0039  00F1               	movwf	?i1___lmul+1
  9608  003A  01F2               	clrf	?i1___lmul+2
  9609  003B  01F3               	clrf	?i1___lmul+3
  9610  003C  3000               	movlw	0
  9611  003D  00F7               	movwf	?i1___lmul+7
  9612  003E  3000               	movlw	0
  9613  003F  00F6               	movwf	?i1___lmul+6
  9614  0040  303C               	movlw	60
  9615  0041  00F5               	movwf	?i1___lmul+5
  9616  0042  30F0               	movlw	240
  9617  0043  00F4               	movwf	?i1___lmul+4
  9618  0044  3189  2136  3180   	fcall	i1___lmul
  9619  0047  0870               	movf	?i1___lmul,w
  9620  0048  0020               	movlb	0	; select bank0
  9621  0049  00A0               	movwf	??_isr
  9622  004A  0871               	movf	?i1___lmul+1,w
  9623  004B  00A1               	movwf	??_isr+1
  9624  004C  0872               	movf	?i1___lmul+2,w
  9625  004D  00A2               	movwf	??_isr+2
  9626  004E  0873               	movf	?i1___lmul+3,w
  9627  004F  00A3               	movwf	??_isr+3
  9628  0050  300C               	movlw	12
  9629  0051                     u482_25:	
  9630  0051  36A3               	lsrf	??_isr+3,f
  9631  0052  0CA2               	rrf	??_isr+2,f
  9632  0053  0CA1               	rrf	??_isr+1,f
  9633  0054  0CA0               	rrf	??_isr,f
  9634  0055  0B89               	decfsz	9,f
  9635  0056  2851               	goto	u482_25
  9636  0057  0920               	comf	??_isr,w
  9637  0058  00A4               	movwf	??_isr+4
  9638  0059  0921               	comf	??_isr+1,w
  9639  005A  00A5               	movwf	??_isr+5
  9640  005B  0AA4               	incf	??_isr+4,f
  9641  005C  1903               	skipnz
  9642  005D  0AA5               	incf	??_isr+5,f
  9643  005E  0824               	movf	??_isr+4,w
  9644  005F  3E80               	addlw	128
  9645  0060  00FC               	movwf	?i1_PWMSetPeriod
  9646  0061  303E               	movlw	62
  9647  0062  3D25               	addwfc	??_isr+5,w
  9648  0063  00FD               	movwf	?i1_PWMSetPeriod+1
  9649  0064  3197  27CF  3180   	fcall	i1_PWMSetPeriod
  9650                           
  9651                           ;interrupts.c: 108: PWMSetDutyCycle (8000-((uint32_t)15600*vPWM)/8192);
  9652  0067  0020               	movlb	0	; select bank0
  9653  0068  0865               	movf	_vPWM,w
  9654  0069  00F0               	movwf	?i1___lmul
  9655  006A  0866               	movf	_vPWM+1,w
  9656  006B  00F1               	movwf	?i1___lmul+1
  9657  006C  01F2               	clrf	?i1___lmul+2
  9658  006D  01F3               	clrf	?i1___lmul+3
  9659  006E  3000               	movlw	0
  9660  006F  00F7               	movwf	?i1___lmul+7
  9661  0070  3000               	movlw	0
  9662  0071  00F6               	movwf	?i1___lmul+6
  9663  0072  303C               	movlw	60
  9664  0073  00F5               	movwf	?i1___lmul+5
  9665  0074  30F0               	movlw	240
  9666  0075  00F4               	movwf	?i1___lmul+4
  9667  0076  3189  2136  3180   	fcall	i1___lmul
  9668  0079  0870               	movf	?i1___lmul,w
  9669  007A  0020               	movlb	0	; select bank0
  9670  007B  00A0               	movwf	??_isr
  9671  007C  0871               	movf	?i1___lmul+1,w
  9672  007D  00A1               	movwf	??_isr+1
  9673  007E  0872               	movf	?i1___lmul+2,w
  9674  007F  00A2               	movwf	??_isr+2
  9675  0080  0873               	movf	?i1___lmul+3,w
  9676  0081  00A3               	movwf	??_isr+3
  9677  0082  300D               	movlw	13
  9678  0083                     u483_25:	
  9679  0083  36A3               	lsrf	??_isr+3,f
  9680  0084  0CA2               	rrf	??_isr+2,f
  9681  0085  0CA1               	rrf	??_isr+1,f
  9682  0086  0CA0               	rrf	??_isr,f
  9683  0087  0B89               	decfsz	9,f
  9684  0088  2883               	goto	u483_25
  9685  0089  0920               	comf	??_isr,w
  9686  008A  00A4               	movwf	??_isr+4
  9687  008B  0921               	comf	??_isr+1,w
  9688  008C  00A5               	movwf	??_isr+5
  9689  008D  0AA4               	incf	??_isr+4,f
  9690  008E  1903               	skipnz
  9691  008F  0AA5               	incf	??_isr+5,f
  9692  0090  0824               	movf	??_isr+4,w
  9693  0091  3E40               	addlw	64
  9694  0092  00FC               	movwf	?i1_PWMSetDutyCycle
  9695  0093  301F               	movlw	31
  9696  0094  3D25               	addwfc	??_isr+5,w
  9697  0095  28A2               	goto	L10
  9698  0096                     i1l4669:	
  9699                           ;interrupts.c: 111: }
  9700                           
  9701                           
  9702                           ;interrupts.c: 112: else
  9703                           ;interrupts.c: 113: {
  9704                           ;interrupts.c: 114: if (cntPerd == 200)
  9705  0096  0021               	movlb	1	; select bank1
  9706  0097  0866               	movf	_cntPerd^(0+128),w
  9707  0098  3AC8               	xorlw	200
  9708  0099  1D03               	skipz
  9709  009A  289F               	goto	i1l4675
  9710                           
  9711                           ;interrupts.c: 115: {
  9712                           ;interrupts.c: 116: flgPSMC = 0;
  9713  009B  0020               	movlb	0	; select bank0
  9714  009C  10E7               	bcf	_flgPSMC/(0+8),_flgPSMC& (0+7)	;volatile
  9715                           
  9716                           ;interrupts.c: 117: cntPerd = 0;
  9717  009D  0021               	movlb	1	; select bank1
  9718  009E  01E6               	clrf	_cntPerd^(0+128)
  9719  009F                     i1l4675:	
  9720                           
  9721                           ;interrupts.c: 118: }
  9722                           ;interrupts.c: 120: PWMSetDutyCycle (0);
  9723  009F  3000               	movlw	0
  9724  00A0  00FC               	movwf	?i1_PWMSetDutyCycle
  9725  00A1  3000               	movlw	0
  9726  00A2                     L10:	
  9727  00A2  00FD               	movwf	?i1_PWMSetDutyCycle+1
  9728  00A3  3197  27DB  3180   	fcall	i1_PWMSetDutyCycle
  9729                           
  9730                           ;interrupts.c: 121: }
  9731                           ;interrupts.c: 123: P1TPRIF = 0;
  9732  00A6  003D               	movlb	29	; select bank29
  9733  00A7  1020               	bcf	32,0	;volatile
  9734  00A8                     i1l4679:	
  9735                           
  9736                           ;interrupts.c: 125: }
  9737                           ;interrupts.c: 131: if (RCIE && RCIF)
  9738  00A8  0021               	movlb	1	; select bank1
  9739  00A9  1E91               	btfss	17,5	;volatile
  9740  00AA  28BD               	goto	i1l4687
  9741  00AB  0020               	movlb	0	; select bank0
  9742  00AC  1E91               	btfss	17,5	;volatile
  9743  00AD  28BD               	goto	i1l4687
  9744                           
  9745                           ;interrupts.c: 132: {
  9746                           ;interrupts.c: 133: UART_chRxBuf[UART_cntRxUART++] = RCREG;
  9747  00AE  0023               	movlb	3	; select bank3
  9748  00AF  0819               	movf	25,w	;volatile
  9749  00B0  0020               	movlb	0	; select bank0
  9750  00B1  00A0               	movwf	??_isr
  9751  00B2  0862               	movf	_UART_cntRxUART,w
  9752  00B3  3EA0               	addlw	_UART_chRxBuf& (0+255)
  9753  00B4  0086               	movwf	6
  9754  00B5  3001               	movlw	1	; select bank3/4
  9755  00B6  0087               	movwf	7
  9756  00B7  0820               	movf	??_isr,w
  9757  00B8  0081               	movwf	1
  9758  00B9  3001               	movlw	1
  9759  00BA  00A0               	movwf	??_isr
  9760  00BB  0820               	movf	??_isr,w
  9761  00BC  07E2               	addwf	_UART_cntRxUART,f	;volatile
  9762  00BD                     i1l4687:	
  9763                           
  9764                           ;interrupts.c: 134: }
  9765                           ;interrupts.c: 137: if (TXIE && TXIF)
  9766  00BD  0021               	movlb	1	; select bank1
  9767  00BE  1E11               	btfss	17,4	;volatile
  9768  00BF  28E1               	goto	i1l293
  9769  00C0  0020               	movlb	0	; select bank0
  9770  00C1  1E11               	btfss	17,4	;volatile
  9771  00C2  28E1               	goto	i1l293
  9772                           
  9773                           ;interrupts.c: 139: {
  9774                           ;interrupts.c: 140: if ((UART_cntTxUART!=0))
  9775  00C3  0863               	movf	_UART_cntTxUART,w	;volatile
  9776  00C4  1903               	btfsc	3,2
  9777  00C5  28DD               	goto	i1l294
  9778                           
  9779                           ;interrupts.c: 141: {
  9780                           ;interrupts.c: 142: TXREG = UART_chTxBuf[stLen];
  9781  00C6  0021               	movlb	1	; select bank1
  9782  00C7  086D               	movf	_stLen^(0+128),w
  9783  00C8  3E34               	addlw	_UART_chTxBuf& (0+255)
  9784  00C9  0086               	movwf	6
  9785  00CA  3001               	movlw	1	; select bank2/3
  9786  00CB  0087               	movwf	7
  9787  00CC  0801               	movf	1,w
  9788  00CD  0023               	movlb	3	; select bank3
  9789  00CE  009A               	movwf	26	;volatile
  9790                           
  9791                           ;interrupts.c: 145: stLen++;
  9792  00CF  3001               	movlw	1
  9793  00D0  0020               	movlb	0	; select bank0
  9794  00D1  00A0               	movwf	??_isr
  9795  00D2  0820               	movf	??_isr,w
  9796  00D3  0021               	movlb	1	; select bank1
  9797  00D4  07ED               	addwf	_stLen^(0+128),f
  9798                           
  9799                           ;interrupts.c: 147: if (stLen == UART_cntTxUART)
  9800  00D5  086D               	movf	_stLen^(0+128),w
  9801  00D6  0020               	movlb	0	; select bank0
  9802  00D7  0663               	xorwf	_UART_cntTxUART,w	;volatile
  9803  00D8  1D03               	skipz
  9804  00D9  28E1               	goto	i1l293
  9805                           
  9806                           ;interrupts.c: 148: {
  9807                           ;interrupts.c: 149: UART_cntTxUART = 0;
  9808  00DA  01E3               	clrf	_UART_cntTxUART	;volatile
  9809                           
  9810                           ;interrupts.c: 150: stLen = 0;
  9811  00DB  0021               	movlb	1	; select bank1
  9812  00DC  01ED               	clrf	_stLen^(0+128)
  9813  00DD                     i1l294:	
  9814                           ;interrupts.c: 154: }
  9815                           ;interrupts.c: 155: }
  9816                           
  9817                           ;interrupts.c: 152: TXIE = 0;
  9818                           
  9819                           ;interrupts.c: 151: TXEN = 0;
  9820                           
  9821                           
  9822                           ;interrupts.c: 156: else
  9823                           ;interrupts.c: 157: {
  9824                           ;interrupts.c: 159: TXEN = 0;
  9825  00DD  0023               	movlb	3	; select bank3
  9826  00DE  129E               	bcf	30,5	;volatile
  9827                           
  9828                           ;interrupts.c: 160: TXIE = 0;
  9829  00DF  0021               	movlb	1	; select bank1
  9830  00E0  1211               	bcf	17,4	;volatile
  9831  00E1                     i1l293:	
  9832                           
  9833                           ;interrupts.c: 161: }
  9834                           ;interrupts.c: 162: }
  9835                           ;interrupts.c: 167: if (ADIE&&ADIF)
  9836  00E1  0021               	movlb	1	; select bank1
  9837  00E2  1F11               	btfss	17,6	;volatile
  9838  00E3  2923               	goto	i1l4729
  9839  00E4  0020               	movlb	0	; select bank0
  9840  00E5  1F11               	btfss	17,6	;volatile
  9841  00E6  2923               	goto	i1l4729
  9842                           
  9843                           ;interrupts.c: 168: {
  9844                           ;interrupts.c: 170: if (idxADC<10)
  9845  00E7  300A               	movlw	10
  9846  00E8  0021               	movlb	1	; select bank1
  9847  00E9  026C               	subwf	_idxADC^(0+128),w
  9848  00EA  1803               	skipnc
  9849  00EB  28F5               	goto	i1l4713
  9850                           
  9851                           ;interrupts.c: 171: {
  9852                           ;interrupts.c: 172: idxADC++;
  9853  00EC  3001               	movlw	1
  9854  00ED  0020               	movlb	0	; select bank0
  9855  00EE  00A0               	movwf	??_isr
  9856  00EF  0820               	movf	??_isr,w
  9857  00F0  0021               	movlb	1	; select bank1
  9858  00F1  07EC               	addwf	_idxADC^(0+128),f
  9859                           
  9860                           ;interrupts.c: 173: flgADCAryFull = 0;
  9861  00F2  0020               	movlb	0	; select bank0
  9862  00F3  1067               	bcf	_flgADCAryFull/(0+8),_flgADCAryFull& (0+7)	;volatile
  9863                           
  9864                           ;interrupts.c: 174: }
  9865  00F4  28FC               	goto	i1l4721
  9866  00F5                     i1l4713:	
  9867                           
  9868                           ;interrupts.c: 175: else
  9869                           ;interrupts.c: 176: {
  9870                           ;interrupts.c: 177: idxADC = 0;
  9871  00F5  0021               	movlb	1	; select bank1
  9872  00F6  01EC               	clrf	_idxADC^(0+128)
  9873                           
  9874                           ;interrupts.c: 178: flgADCAryFull = 1;
  9875  00F7  0020               	movlb	0	; select bank0
  9876  00F8  1467               	bsf	_flgADCAryFull/(0+8),_flgADCAryFull& (0+7)	;volatile
  9877                           
  9878                           ;interrupts.c: 179: ADIE = 0;
  9879  00F9  0021               	movlb	1	; select bank1
  9880  00FA  1311               	bcf	17,6	;volatile
  9881                           
  9882                           ;interrupts.c: 181: TXIE = 1;
  9883  00FB  1611               	bsf	17,4	;volatile
  9884  00FC                     i1l4721:	
  9885                           
  9886                           ;interrupts.c: 182: }
  9887                           ;interrupts.c: 184: ADC_vADCAry[idxADC] = ADRESH<<8;
  9888  00FC  0021               	movlb	1	; select bank1
  9889  00FD  081C               	movf	28,w	;volatile
  9890  00FE  0020               	movlb	0	; select bank0
  9891  00FF  00A0               	movwf	??_isr
  9892  0100  01A1               	clrf	??_isr+1
  9893  0101  0820               	movf	??_isr,w
  9894  0102  00A1               	movwf	??_isr+1
  9895  0103  01A0               	clrf	??_isr
  9896  0104  0021               	movlb	1	; select bank1
  9897  0105  356C               	lslf	_idxADC^(0+128),w
  9898  0106  3E20               	addlw	_ADC_vADCAry& (0+255)
  9899  0107  0086               	movwf	6
  9900  0108  3001               	movlw	1	; select bank2/3
  9901  0109  0087               	movwf	7
  9902  010A  0020               	movlb	0	; select bank0
  9903  010B  0820               	movf	??_isr,w
  9904  010C  3FC0               	movwi [0]fsr1
  9905  010D  0821               	movf	??_isr+1,w
  9906  010E  3FC1               	movwi [1]fsr1
  9907                           
  9908                           ;interrupts.c: 186: ADC_vADCAry[idxADC] |=ADRESL;
  9909  010F  0021               	movlb	1	; select bank1
  9910  0110  081B               	movf	27,w	;volatile
  9911  0111  0020               	movlb	0	; select bank0
  9912  0112  00A0               	movwf	??_isr
  9913  0113  01A1               	clrf	??_isr+1
  9914  0114  0021               	movlb	1	; select bank1
  9915  0115  356C               	lslf	_idxADC^(0+128),w
  9916  0116  3E20               	addlw	_ADC_vADCAry& (0+255)
  9917  0117  0086               	movwf	6
  9918  0118  3001               	movlw	1	; select bank2/3
  9919  0119  0087               	movwf	7
  9920  011A  0020               	movlb	0	; select bank0
  9921  011B  0820               	movf	??_isr,w
  9922  011C  0481               	iorwf	1,f
  9923  011D  3141               	addfsr 1,1
  9924  011E  0821               	movf	??_isr+1,w
  9925  011F  0481               	iorwf	1,f
  9926                           
  9927                           ;interrupts.c: 188: ADIF = 0;
  9928  0120  1311               	bcf	17,6	;volatile
  9929                           
  9930                           ;interrupts.c: 189: GO=1;
  9931  0121  0021               	movlb	1	; select bank1
  9932  0122  149D               	bsf	29,1	;volatile
  9933  0123                     i1l4729:	
  9934                           
  9935                           ;interrupts.c: 190: }
  9936                           ;interrupts.c: 193: (GIE = 1);
  9937  0123  178B               	bsf	11,7	;volatile
  9938  0124  0020               	movlb	0	; select bank0
  9939  0125  0826               	movf	??_isr+6,w
  9940  0126  00FF               	movwf	127
  9941  0127  0009               	retfie
  9942  0128                     __end_of_isr:	
  9943                           
  9944                           	psect	text28
  9945  0936                     __ptext28:	
  9946 ;; *************** function i1___lmul *****************
  9947 ;; Defined at:
  9948 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lmul.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  multiplier      4    0[COMMON] unsigned long 
  9951 ;;  multiplicand    4    4[COMMON] unsigned long 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  __lmul          4    8[COMMON] unsigned long 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  4    0[COMMON] unsigned long 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9963 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9966 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9967 ;;Total ram usage:       12 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_isr
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function i1___lmul
  9978  0936                     i1___lmul:	
  9979                           
  9980                           ;incstack = 0
  9981                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  9982  0936  3000               	movlw	0
  9983  0937  00FB               	movwf	i1___lmul@product+3
  9984  0938  3000               	movlw	0
  9985  0939  00FA               	movwf	i1___lmul@product+2
  9986  093A  3000               	movlw	0
  9987  093B  00F9               	movwf	i1___lmul@product+1
  9988  093C  3000               	movlw	0
  9989  093D  00F8               	movwf	i1___lmul@product
  9990  093E                     i1l4613:	
  9991  093E  1C70               	btfss	i1___lmul@multiplier,0
  9992  093F  2948               	goto	i1l4617
  9993  0940  0874               	movf	i1___lmul@multiplicand,w
  9994  0941  07F8               	addwf	i1___lmul@product,f
  9995  0942  0875               	movf	i1___lmul@multiplicand+1,w
  9996  0943  3DF9               	addwfc	i1___lmul@product+1,f
  9997  0944  0876               	movf	i1___lmul@multiplicand+2,w
  9998  0945  3DFA               	addwfc	i1___lmul@product+2,f
  9999  0946  0877               	movf	i1___lmul@multiplicand+3,w
 10000  0947  3DFB               	addwfc	i1___lmul@product+3,f
 10001  0948                     i1l4617:	
 10002  0948  3001               	movlw	1
 10003  0949                     u472_25:	
 10004  0949  35F4               	lslf	i1___lmul@multiplicand,f
 10005  094A  0DF5               	rlf	i1___lmul@multiplicand+1,f
 10006  094B  0DF6               	rlf	i1___lmul@multiplicand+2,f
 10007  094C  0DF7               	rlf	i1___lmul@multiplicand+3,f
 10008  094D  0B89               	decfsz	9,f
 10009  094E  2949               	goto	u472_25
 10010  094F  3001               	movlw	1
 10011  0950                     u473_25:	
 10012  0950  36F3               	lsrf	i1___lmul@multiplier+3,f
 10013  0951  0CF2               	rrf	i1___lmul@multiplier+2,f
 10014  0952  0CF1               	rrf	i1___lmul@multiplier+1,f
 10015  0953  0CF0               	rrf	i1___lmul@multiplier,f
 10016  0954  0B89               	decfsz	9,f
 10017  0955  2950               	goto	u473_25
 10018  0956  0873               	movf	i1___lmul@multiplier+3,w
 10019  0957  0472               	iorwf	i1___lmul@multiplier+2,w
 10020  0958  0471               	iorwf	i1___lmul@multiplier+1,w
 10021  0959  0470               	iorwf	i1___lmul@multiplier,w
 10022  095A  1D03               	skipz
 10023  095B  293E               	goto	i1l4613
 10024  095C  087B               	movf	i1___lmul@product+3,w
 10025  095D  00F3               	movwf	?i1___lmul+3
 10026  095E  087A               	movf	i1___lmul@product+2,w
 10027  095F  00F2               	movwf	?i1___lmul+2
 10028  0960  0879               	movf	i1___lmul@product+1,w
 10029  0961  00F1               	movwf	?i1___lmul+1
 10030  0962  0878               	movf	i1___lmul@product,w
 10031  0963  00F0               	movwf	?i1___lmul
 10032  0964  0020               	movlb	0	; select bank0
 10033  0965  0008               	return
 10034  0966                     __end_ofi1___lmul:	
 10035                           
 10036                           	psect	text29
 10037  17DB                     __ptext29:	
 10038 ;; *************** function i1_PWMSetDutyCycle *****************
 10039 ;; Defined at:
 10040 ;;		line 141 in file "PWM.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  cntDutyCycle    2   12[COMMON] unsigned int 
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg, status,2
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10058 ;;Total ram usage:        2 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; This function calls:
 10061 ;;		Nothing
 10062 ;; This function is called by:
 10063 ;;		_isr
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           
 10068                           ;psect for function i1_PWMSetDutyCycle
 10069  17DB                     i1_PWMSetDutyCycle:	
 10070                           
 10071                           ;PWM.c: 144: PSMC1DCL = cntDutyCycle & 0x00FF;
 10072                           
 10073                           ;incstack = 0
 10074                           ; Regs used in i1_PWMSetDutyCycle: [wreg+status,2]
 10075  17DB  087C               	movf	i1PWMSetDutyCycle@cntDutyCycle,w
 10076  17DC  003D               	movlb	29	; select bank29
 10077  17DD  00A3               	movwf	35	;volatile
 10078                           
 10079                           ;PWM.c: 145: PSMC1DCH = cntDutyCycle>>8;
 10080  17DE  087D               	movf	i1PWMSetDutyCycle@cntDutyCycle+1,w
 10081  17DF  00A4               	movwf	36	;volatile
 10082                           
 10083                           ;PWM.c: 147: PSMC1LD = 1;
 10084  17E0  1711               	bsf	17,6	;volatile
 10085  17E1  0008               	return
 10086  17E2                     __end_ofi1_PWMSetDutyCycle:	
 10087                           
 10088                           	psect	text30
 10089  17CF                     __ptext30:	
 10090 ;; *************** function i1_PWMSetPeriod *****************
 10091 ;; Defined at:
 10092 ;;		line 130 in file "PWM.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  cntPeriod       2   12[COMMON] unsigned int 
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;		None
 10097 ;; Return value:  Size  Location     Type
 10098 ;;		None               void
 10099 ;; Registers used:
 10100 ;;		wreg, status,2
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10110 ;;Total ram usage:        2 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_isr
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function i1_PWMSetPeriod
 10121  17CF                     i1_PWMSetPeriod:	
 10122                           
 10123                           ;PWM.c: 132: PSMC1PRL = cntPeriod & 0x00FF;
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in i1_PWMSetPeriod: [wreg+status,2]
 10127  17CF  087C               	movf	i1PWMSetPeriod@cntPeriod,w
 10128  17D0  003D               	movlb	29	; select bank29
 10129  17D1  00A5               	movwf	37	;volatile
 10130                           
 10131                           ;PWM.c: 133: PSMC1PRH = cntPeriod>>8;
 10132  17D2  087D               	movf	i1PWMSetPeriod@cntPeriod+1,w
 10133  17D3  00A6               	movwf	38	;volatile
 10134  17D4  0008               	return
 10135  17D5                     __end_ofi1_PWMSetPeriod:	
 10136  007E                     btemp	set	126	;btemp
 10137  007E                     wtemp0	set	126
 10138                           
 10139                           	psect	maintext_split_1
 10140  0C95                     l5223:	
 10141                           ;main.c: 383: {
 10142                           ;main.c: 384: case 1:
 10143                           
 10144                           
 10145                           ;main.c: 385: {
 10146                           ;main.c: 386: if (cntCur > 50)
 10147  0C95  0021               	movlb	1	; select bank1
 10148  0C96  0841               	movf	(_cntCur+1)^(0+128),w
 10149  0C97  3A80               	xorlw	128
 10150  0C98  00FF               	movwf	127
 10151  0C99  3080               	movlw	128
 10152  0C9A  027F               	subwf	127,w
 10153  0C9B  1D03               	skipz
 10154  0C9C  2C9F               	goto	u5535
 10155  0C9D  3033               	movlw	51
 10156  0C9E  0240               	subwf	_cntCur^(0+128),w
 10157  0C9F                     u5535:	
 10158  0C9F  1C03               	skipc
 10159  0CA0  2CA7               	goto	l5229
 10160                           
 10161                           ;main.c: 387: {
 10162                           ;main.c: 388: RC2 = !RC2;
 10163  0CA1  3004               	movlw	4
 10164  0CA2  0020               	movlb	0	; select bank0
 10165  0CA3  068E               	xorwf	14,f
 10166                           
 10167                           ;main.c: 389: cntCur = 0;
 10168  0CA4  0021               	movlb	1	; select bank1
 10169  0CA5  01C0               	clrf	_cntCur^(0+128)
 10170  0CA6  01C1               	clrf	(_cntCur+1)^(0+128)
 10171  0CA7                     l5229:	
 10172                           
 10173                           ;main.c: 390: }
 10174                           ;main.c: 391: cntNoPres=0;
 10175  0CA7  0021               	movlb	1	; select bank1
 10176  0CA8  01C2               	clrf	_cntNoPres^(0+128)
 10177  0CA9  01C3               	clrf	(_cntNoPres+1)^(0+128)
 10178                           
 10179                           ;main.c: 392: flgStepDwn = 0;
 10180  0CAA  01EA               	clrf	_flgStepDwn^(0+128)
 10181                           
 10182                           ;main.c: 393: flgTurnOnDly_Offset = 0;
 10183  0CAB  01EB               	clrf	_flgTurnOnDly_Offset^(0+128)
 10184                           
 10185                           ;main.c: 394: cntTurnOnDly_Offset = 0;
 10186  0CAC  01E7               	clrf	_cntTurnOnDly_Offset^(0+128)
 10187                           
 10188                           ;main.c: 395: cntStepDwn = 0;
 10189  0CAD  01C6               	clrf	_cntStepDwn^(0+128)
 10190  0CAE  01C7               	clrf	(_cntStepDwn+1)^(0+128)
 10191                           
 10192                           ;main.c: 396: break;
 10193  0CAF  2CF3               	goto	l5273
 10194  0CB0                     l5239:	
 10195                           ;main.c: 397: }
 10196                           ;main.c: 398: case 2:
 10197                           
 10198                           
 10199                           ;main.c: 399: {
 10200                           ;main.c: 400: if (cntCur > 25)
 10201  0CB0  0021               	movlb	1	; select bank1
 10202  0CB1  0841               	movf	(_cntCur+1)^(0+128),w
 10203  0CB2  3A80               	xorlw	128
 10204  0CB3  00FF               	movwf	127
 10205  0CB4  3080               	movlw	128
 10206  0CB5  027F               	subwf	127,w
 10207  0CB6  1D03               	skipz
 10208  0CB7  2CCE               	goto	u5565
 10209  0CB8  301A               	movlw	26
 10210  0CB9  2CCD               	goto	L7
 10211  0CBA                     l5247:	
 10212                           ;main.c: 407: }
 10213                           ;main.c: 408: case 3:
 10214                           
 10215                           ;main.c: 406: break;
 10216                           
 10217                           ;main.c: 404: }
 10218                           ;main.c: 405: cntNoPres=0;
 10219                           
 10220                           ;main.c: 403: cntCur = 0;
 10221                           
 10222                           ;main.c: 401: {
 10223                           ;main.c: 402: RC2 = !RC2;
 10224                           
 10225                           
 10226                           ;main.c: 409: {
 10227                           ;main.c: 410: if (cntCur > 12)
 10228  0CBA  0021               	movlb	1	; select bank1
 10229  0CBB  0841               	movf	(_cntCur+1)^(0+128),w
 10230  0CBC  3A80               	xorlw	128
 10231  0CBD  00FF               	movwf	127
 10232  0CBE  3080               	movlw	128
 10233  0CBF  027F               	subwf	127,w
 10234  0CC0  1D03               	skipz
 10235  0CC1  2CCE               	goto	u5565
 10236  0CC2  300D               	movlw	13
 10237  0CC3  2CCD               	goto	L7
 10238  0CC4                     l5255:	
 10239                           ;main.c: 417: }
 10240                           ;main.c: 418: case 4:
 10241                           
 10242                           ;main.c: 416: break;
 10243                           
 10244                           ;main.c: 414: }
 10245                           ;main.c: 415: cntNoPres=0;
 10246                           
 10247                           ;main.c: 413: cntCur = 0;
 10248                           
 10249                           ;main.c: 411: {
 10250                           ;main.c: 412: RC2 = !RC2;
 10251                           
 10252                           
 10253                           ;main.c: 419: {
 10254                           ;main.c: 420: if (cntCur > 6)
 10255  0CC4  0021               	movlb	1	; select bank1
 10256  0CC5  0841               	movf	(_cntCur+1)^(0+128),w
 10257  0CC6  3A80               	xorlw	128
 10258  0CC7  00FF               	movwf	127
 10259  0CC8  3080               	movlw	128
 10260  0CC9  027F               	subwf	127,w
 10261  0CCA  1D03               	skipz
 10262  0CCB  2CCE               	goto	u5565
 10263  0CCC  3007               	movlw	7
 10264  0CCD                     L7:	
 10265  0CCD  0240               	subwf	_cntCur^(0+128),w
 10266  0CCE                     u5565:	
 10267  0CCE  1C03               	skipc
 10268  0CCF  2CD6               	goto	l5261
 10269                           
 10270                           ;main.c: 421: {
 10271                           ;main.c: 422: RC2 = !RC2;
 10272  0CD0  3004               	movlw	4
 10273  0CD1  0020               	movlb	0	; select bank0
 10274  0CD2  068E               	xorwf	14,f
 10275                           
 10276                           ;main.c: 423: cntCur = 0;
 10277  0CD3  0021               	movlb	1	; select bank1
 10278  0CD4  01C0               	clrf	_cntCur^(0+128)
 10279  0CD5  01C1               	clrf	(_cntCur+1)^(0+128)
 10280  0CD6                     l5261:	
 10281                           
 10282                           ;main.c: 424: }
 10283                           ;main.c: 425: cntNoPres=0;
 10284  0CD6  0021               	movlb	1	; select bank1
 10285  0CD7  01C2               	clrf	_cntNoPres^(0+128)
 10286  0CD8  01C3               	clrf	(_cntNoPres+1)^(0+128)
 10287                           
 10288                           ;main.c: 426: break;
 10289  0CD9  2CF3               	goto	l5273
 10290  0CDA                     l490:	
 10291                           ;main.c: 427: }
 10292                           ;main.c: 428: default:
 10293                           
 10294                           
 10295                           ;main.c: 429: {
 10296                           ;main.c: 430: RC2 = 0;
 10297  0CDA  0020               	movlb	0	; select bank0
 10298  0CDB  110E               	bcf	14,2	;volatile
 10299                           
 10300                           ;main.c: 431: cntCur = 0;
 10301  0CDC  0021               	movlb	1	; select bank1
 10302  0CDD  01C0               	clrf	_cntCur^(0+128)
 10303  0CDE  01C1               	clrf	(_cntCur+1)^(0+128)
 10304                           
 10305                           ;main.c: 432: cntNoPres++;
 10306  0CDF  3001               	movlw	1
 10307  0CE0  07C2               	addwf	_cntNoPres^(0+128),f
 10308  0CE1  3000               	movlw	0
 10309  0CE2  3DC3               	addwfc	(_cntNoPres+1)^(0+128),f
 10310                           
 10311                           ;main.c: 433: }
 10312                           ;main.c: 434: }
 10313  0CE3  2CF3               	goto	l5273
 10314  0CE4                     l5267:	
 10315  0CE4  0023               	movlb	3	; select bank3
 10316  0CE5  083B               	movf	main@stBlinking^(0+384),w
 10317                           
 10318                           ; Switch size 1, requested type "space"
 10319                           ; Number of cases is 4, Range of values is 1 to 4
 10320                           ; switch strategies available:
 10321                           ; Name         Instructions Cycles
 10322                           ; simple_byte           13     7 (average)
 10323                           ; direct_byte           17     9 (fixed)
 10324                           ; jumptable            263     9 (fixed)
 10325                           ;	Chosen strategy is simple_byte
 10326  0CE6  3A01               	xorlw	1	; case 1
 10327  0CE7  1903               	skipnz
 10328  0CE8  2C95               	goto	l5223
 10329  0CE9  3A03               	xorlw	3	; case 2
 10330  0CEA  1903               	skipnz
 10331  0CEB  2CB0               	goto	l5239
 10332  0CEC  3A01               	xorlw	1	; case 3
 10333  0CED  1903               	skipnz
 10334  0CEE  2CBA               	goto	l5247
 10335  0CEF  3A07               	xorlw	7	; case 4
 10336  0CF0  1903               	skipnz
 10337  0CF1  2CC4               	goto	l5255
 10338  0CF2  2CDA               	goto	l490
 10339  0CF3                     l5273:	
 10340                           ;main.c: 437: {
 10341                           
 10342                           
 10343                           ;main.c: 440: }
 10344                           ;main.c: 442: vADCANFlt = vADCANOld+(vADCAN0-vADCANOld)/15;
 10345  0CF3  300F               	movlw	15
 10346  0CF4  0020               	movlb	0	; select bank0
 10347  0CF5  00A7               	movwf	?___awdiv
 10348  0CF6  3000               	movlw	0
 10349  0CF7  00A8               	movwf	?___awdiv+1
 10350  0CF8  0021               	movlb	1	; select bank1
 10351  0CF9  094E               	comf	_vADCANOld^(0+128),w
 10352  0CFA  0020               	movlb	0	; select bank0
 10353  0CFB  00C8               	movwf	??_main
 10354  0CFC  0021               	movlb	1	; select bank1
 10355  0CFD  094F               	comf	(_vADCANOld+1)^(0+128),w
 10356  0CFE  0020               	movlb	0	; select bank0
 10357  0CFF  00C9               	movwf	??_main+1
 10358  0D00  0AC8               	incf	??_main,f
 10359  0D01  1903               	skipnz
 10360  0D02  0AC9               	incf	??_main+1,f
 10361  0D03  0021               	movlb	1	; select bank1
 10362  0D04  084A               	movf	_vADCAN0^(0+128),w
 10363  0D05  0020               	movlb	0	; select bank0
 10364  0D06  0748               	addwf	??_main,w
 10365  0D07  00A9               	movwf	?___awdiv+2
 10366  0D08  0021               	movlb	1	; select bank1
 10367  0D09  084B               	movf	(_vADCAN0+1)^(0+128),w
 10368  0D0A  0020               	movlb	0	; select bank0
 10369  0D0B  3D49               	addwfc	??_main+1,w
 10370  0D0C  00AA               	movwf	?___awdiv+3
 10371  0D0D  318A  2281  318C   	fcall	___awdiv
 10372  0D10  0021               	movlb	1	; select bank1
 10373  0D11  084E               	movf	_vADCANOld^(0+128),w
 10374  0D12  0020               	movlb	0	; select bank0
 10375  0D13  0727               	addwf	?___awdiv,w
 10376  0D14  0021               	movlb	1	; select bank1
 10377  0D15  00CC               	movwf	_vADCANFlt^(0+128)
 10378  0D16  084F               	movf	(_vADCANOld+1)^(0+128),w
 10379  0D17  0020               	movlb	0	; select bank0
 10380  0D18  3D28               	addwfc	?___awdiv+1,w
 10381  0D19  0021               	movlb	1	; select bank1
 10382  0D1A  00CD               	movwf	(_vADCANFlt+1)^(0+128)
 10383                           
 10384                           ;main.c: 444: if ((vADCANFlt==vADCANOld)&&(vADCAN0!=vADCANOld))
 10385  0D1B  084F               	movf	(_vADCANOld+1)^(0+128),w
 10386  0D1C  064D               	xorwf	(_vADCANFlt+1)^(0+128),w
 10387  0D1D  1D03               	skipz
 10388  0D1E  2D21               	goto	u5575
 10389  0D1F  084E               	movf	_vADCANOld^(0+128),w
 10390  0D20  064C               	xorwf	_vADCANFlt^(0+128),w
 10391  0D21                     u5575:	
 10392  0D21  1D03               	skipz
 10393  0D22  2D45               	goto	l5285
 10394  0D23  084F               	movf	(_vADCANOld+1)^(0+128),w
 10395  0D24  064B               	xorwf	(_vADCAN0+1)^(0+128),w
 10396  0D25  1D03               	skipz
 10397  0D26  2D29               	goto	u5585
 10398  0D27  084E               	movf	_vADCANOld^(0+128),w
 10399  0D28  064A               	xorwf	_vADCAN0^(0+128),w
 10400  0D29                     u5585:	
 10401  0D29  1903               	skipnz
 10402  0D2A  2D45               	goto	l5285
 10403                           
 10404                           ;main.c: 445: {
 10405                           ;main.c: 446: if ((vADCAN0>vADCANOld))
 10406  0D2B  084F               	movf	(_vADCANOld+1)^(0+128),w
 10407  0D2C  3A80               	xorlw	128
 10408  0D2D  0020               	movlb	0	; select bank0
 10409  0D2E  00C8               	movwf	??_main
 10410  0D2F  0021               	movlb	1	; select bank1
 10411  0D30  084B               	movf	(_vADCAN0+1)^(0+128),w
 10412  0D31  3A80               	xorlw	128
 10413  0D32  0020               	movlb	0	; select bank0
 10414  0D33  0248               	subwf	??_main,w
 10415  0D34  1D03               	skipz
 10416  0D35  2D39               	goto	u5595
 10417  0D36  0021               	movlb	1	; select bank1
 10418  0D37  084A               	movf	_vADCAN0^(0+128),w
 10419  0D38  024E               	subwf	_vADCANOld^(0+128),w
 10420  0D39                     u5595:	
 10421  0D39  1803               	skipnc
 10422  0D3A  2D40               	goto	l5283
 10423                           
 10424                           ;main.c: 447: {
 10425                           ;main.c: 448: vADCANFlt++;
 10426  0D3B  3001               	movlw	1
 10427  0D3C  0021               	movlb	1	; select bank1
 10428  0D3D  07CC               	addwf	_vADCANFlt^(0+128),f
 10429  0D3E  3000               	movlw	0
 10430  0D3F  2D44               	goto	L5
 10431  0D40                     l5283:	
 10432                           ;main.c: 449: }
 10433                           
 10434                           
 10435                           ;main.c: 450: else
 10436                           ;main.c: 451: {
 10437                           ;main.c: 452: vADCANFlt--;
 10438  0D40  30FF               	movlw	255
 10439  0D41  0021               	movlb	1	; select bank1
 10440  0D42  07CC               	addwf	_vADCANFlt^(0+128),f
 10441  0D43  30FF               	movlw	255
 10442  0D44                     L5:	
 10443  0D44  3DCD               	addwfc	(_vADCANFlt+1)^(0+128),f
 10444  0D45                     l5285:	
 10445                           
 10446                           ;main.c: 453: }
 10447                           ;main.c: 454: }
 10448                           ;main.c: 456: vADCANOld = vADCANFlt;
 10449  0D45  084D               	movf	(_vADCANFlt+1)^(0+128),w
 10450  0D46  01CF               	clrf	(_vADCANOld+1)^(0+128)
 10451  0D47  07CF               	addwf	(_vADCANOld+1)^(0+128),f
 10452  0D48  084C               	movf	_vADCANFlt^(0+128),w
 10453  0D49  01CE               	clrf	_vADCANOld^(0+128)
 10454  0D4A  07CE               	addwf	_vADCANOld^(0+128),f
 10455                           
 10456                           ;main.c: 466: if (RA7==1)
 10457  0D4B  0020               	movlb	0	; select bank0
 10458  0D4C  1F8C               	btfss	12,7	;volatile
 10459  0D4D  2DB1               	goto	l5291
 10460                           
 10461                           ;main.c: 467: {
 10462                           ;main.c: 468: PWMSetPeriod (64000-((uint32_t)63872*vPWM)/2048);
 10463  0D4E  0865               	movf	_vPWM,w
 10464  0D4F  00A7               	movwf	?___lmul
 10465  0D50  0866               	movf	_vPWM+1,w
 10466  0D51  00A8               	movwf	?___lmul+1
 10467  0D52  01A9               	clrf	?___lmul+2
 10468  0D53  01AA               	clrf	?___lmul+3
 10469  0D54  3000               	movlw	0
 10470  0D55  00AE               	movwf	?___lmul+7
 10471  0D56  3000               	movlw	0
 10472  0D57  00AD               	movwf	?___lmul+6
 10473  0D58  30F9               	movlw	249
 10474  0D59  00AC               	movwf	?___lmul+5
 10475  0D5A  3080               	movlw	128
 10476  0D5B  00AB               	movwf	?___lmul+4
 10477  0D5C  3189  2166  318C   	fcall	___lmul
 10478  0D5F  0020               	movlb	0	; select bank0
 10479  0D60  0827               	movf	?___lmul,w
 10480  0D61  00C8               	movwf	??_main
 10481  0D62  0828               	movf	?___lmul+1,w
 10482  0D63  00C9               	movwf	??_main+1
 10483  0D64  0829               	movf	?___lmul+2,w
 10484  0D65  00CA               	movwf	??_main+2
 10485  0D66  082A               	movf	?___lmul+3,w
 10486  0D67  00CB               	movwf	??_main+3
 10487  0D68  300B               	movlw	11
 10488  0D69                     u5615:	
 10489  0D69  36CB               	lsrf	??_main+3,f
 10490  0D6A  0CCA               	rrf	??_main+2,f
 10491  0D6B  0CC9               	rrf	??_main+1,f
 10492  0D6C  0CC8               	rrf	??_main,f
 10493  0D6D  0B89               	decfsz	9,f
 10494  0D6E  2D69               	goto	u5615
 10495  0D6F  0948               	comf	??_main,w
 10496  0D70  00CC               	movwf	??_main+4
 10497  0D71  0949               	comf	??_main+1,w
 10498  0D72  00CD               	movwf	??_main+5
 10499  0D73  0ACC               	incf	??_main+4,f
 10500  0D74  1903               	skipnz
 10501  0D75  0ACD               	incf	??_main+5,f
 10502  0D76  084C               	movf	??_main+4,w
 10503  0D77  3E00               	addlw	0
 10504  0D78  00B6               	movwf	?_PWMSetPeriod
 10505  0D79  30FA               	movlw	250
 10506  0D7A  3D4D               	addwfc	??_main+5,w
 10507  0D7B  00B7               	movwf	?_PWMSetPeriod+1
 10508  0D7C  3197  27EA  318C   	fcall	_PWMSetPeriod
 10509                           
 10510                           ;main.c: 469: PWMSetDutyCycle (32000-((uint32_t)63872*vPWM)/4096);
 10511  0D7F  0020               	movlb	0	; select bank0
 10512  0D80  0865               	movf	_vPWM,w
 10513  0D81  00A7               	movwf	?___lmul
 10514  0D82  0866               	movf	_vPWM+1,w
 10515  0D83  00A8               	movwf	?___lmul+1
 10516  0D84  01A9               	clrf	?___lmul+2
 10517  0D85  01AA               	clrf	?___lmul+3
 10518  0D86  3000               	movlw	0
 10519  0D87  00AE               	movwf	?___lmul+7
 10520  0D88  3000               	movlw	0
 10521  0D89  00AD               	movwf	?___lmul+6
 10522  0D8A  30F9               	movlw	249
 10523  0D8B  00AC               	movwf	?___lmul+5
 10524  0D8C  3080               	movlw	128
 10525  0D8D  00AB               	movwf	?___lmul+4
 10526  0D8E  3189  2166  318C   	fcall	___lmul
 10527  0D91  0020               	movlb	0	; select bank0
 10528  0D92  0827               	movf	?___lmul,w
 10529  0D93  00C8               	movwf	??_main
 10530  0D94  0828               	movf	?___lmul+1,w
 10531  0D95  00C9               	movwf	??_main+1
 10532  0D96  0829               	movf	?___lmul+2,w
 10533  0D97  00CA               	movwf	??_main+2
 10534  0D98  082A               	movf	?___lmul+3,w
 10535  0D99  00CB               	movwf	??_main+3
 10536  0D9A  300C               	movlw	12
 10537  0D9B                     u5625:	
 10538  0D9B  36CB               	lsrf	??_main+3,f
 10539  0D9C  0CCA               	rrf	??_main+2,f
 10540  0D9D  0CC9               	rrf	??_main+1,f
 10541  0D9E  0CC8               	rrf	??_main,f
 10542  0D9F  0B89               	decfsz	9,f
 10543  0DA0  2D9B               	goto	u5625
 10544  0DA1  0948               	comf	??_main,w
 10545  0DA2  00CC               	movwf	??_main+4
 10546  0DA3  0949               	comf	??_main+1,w
 10547  0DA4  00CD               	movwf	??_main+5
 10548  0DA5  0ACC               	incf	??_main+4,f
 10549  0DA6  1903               	skipnz
 10550  0DA7  0ACD               	incf	??_main+5,f
 10551  0DA8  084C               	movf	??_main+4,w
 10552  0DA9  3E00               	addlw	0
 10553  0DAA  00B6               	movwf	?_PWMSetDutyCycle
 10554  0DAB  307D               	movlw	125
 10555  0DAC  3D4D               	addwfc	??_main+5,w
 10556  0DAD  00B7               	movwf	?_PWMSetDutyCycle+1
 10557  0DAE  3187  27F5  318C   	fcall	_PWMSetDutyCycle
 10558  0DB1                     l5291:	
 10559                           
 10560                           ;main.c: 470: }
 10561                           ;main.c: 477: cntUARTSend++;
 10562  0DB1  3001               	movlw	1
 10563  0DB2  0020               	movlb	0	; select bank0
 10564  0DB3  00C8               	movwf	??_main
 10565  0DB4  0848               	movf	??_main,w
 10566  0DB5  0021               	movlb	1	; select bank1
 10567  0DB6  07E8               	addwf	_cntUARTSend^(0+128),f
 10568                           
 10569                           ;main.c: 478: if (cntUARTSend%4 ==0)
 10570  0DB7  0868               	movf	_cntUARTSend^(0+128),w
 10571  0DB8  3903               	andlw	3
 10572  0DB9  1D03               	btfss	3,2
 10573  0DBA  2DCC               	goto	l5301
 10574                           
 10575                           ;main.c: 479: {
 10576                           ;main.c: 480: vUART = vADCAN9;
 10577  0DBB  0020               	movlb	0	; select bank0
 10578  0DBC  0861               	movf	main@vADCAN9+1,w
 10579  0DBD  0021               	movlb	1	; select bank1
 10580  0DBE  01DD               	clrf	(main@vUART+1)^(0+128)
 10581  0DBF  07DD               	addwf	(main@vUART+1)^(0+128),f
 10582  0DC0  0020               	movlb	0	; select bank0
 10583  0DC1  0860               	movf	main@vADCAN9,w
 10584  0DC2  0021               	movlb	1	; select bank1
 10585  0DC3  01DC               	clrf	main@vUART^(0+128)
 10586  0DC4  07DC               	addwf	main@vUART^(0+128),f
 10587                           
 10588                           ;main.c: 481: vUART_off = vSenOff -(90);
 10589  0DC5  0856               	movf	_vSenOff^(0+128),w
 10590  0DC6  3EA6               	addlw	166
 10591  0DC7  00DE               	movwf	main@vUART_off^(0+128)
 10592  0DC8  30FF               	movlw	255
 10593  0DC9  3D57               	addwfc	(_vSenOff+1)^(0+128),w
 10594  0DCA  00DF               	movwf	(main@vUART_off+1)^(0+128)
 10595  0DCB  2DE5               	goto	l5311
 10596  0DCC                     l5301:	
 10597                           ;main.c: 484: }
 10598                           
 10599                           ;main.c: 483: UARTSend(chBufADC,0);
 10600                           
 10601                           ;main.c: 482: sprintf(chBufADC,"%0.4dA%0.4d\r\n",vUART,vUART_off);
 10602                           
 10603                           
 10604                           ;main.c: 485: else if (cntUARTSend%3 == 0)
 10605  0DCC  3003               	movlw	3
 10606  0DCD  0020               	movlb	0	; select bank0
 10607  0DCE  00A7               	movwf	?___awmod
 10608  0DCF  3000               	movlw	0
 10609  0DD0  00A8               	movwf	?___awmod+1
 10610  0DD1  0021               	movlb	1	; select bank1
 10611  0DD2  0868               	movf	_cntUARTSend^(0+128),w
 10612  0DD3  0020               	movlb	0	; select bank0
 10613  0DD4  00C8               	movwf	??_main
 10614  0DD5  01C9               	clrf	??_main+1
 10615  0DD6  0848               	movf	??_main,w
 10616  0DD7  00A9               	movwf	?___awmod+2
 10617  0DD8  0849               	movf	??_main+1,w
 10618  0DD9  00AA               	movwf	?___awmod+3
 10619  0DDA  3187  27AD  318C   	fcall	___awmod
 10620  0DDD  0020               	movlb	0	; select bank0
 10621  0DDE  0828               	movf	?___awmod+1,w
 10622  0DDF  0427               	iorwf	?___awmod,w
 10623  0DE0  1D03               	skipz
 10624  0DE1  2DE4               	goto	l498
 10625                           
 10626                           ;main.c: 486: {
 10627                           ;main.c: 487: sprintf(chBufADC,"%0.4dA%0.4d\r\n",vUART,vUART_off);
 10628  0DE2  300B               	movlw	(STR_2| (0+32768))& (0+255)
 10629  0DE3  2DE7               	goto	L6
 10630  0DE4                     l498:	
 10631                           ;main.c: 489: }
 10632                           
 10633                           ;main.c: 488: UARTSend(chBufADC,0);
 10634                           
 10635                           
 10636                           ;main.c: 490: else if (cntUARTSend%2 == 0)
 10637  0DE4  0021               	movlb	1	; select bank1
 10638  0DE5                     l5311:	
 10639                           ;main.c: 494: }
 10640                           
 10641                           ;main.c: 493: UARTSend(chBufADC,0);
 10642                           
 10643                           ;main.c: 491: {
 10644                           ;main.c: 492: sprintf(chBufADC,"%0.4dA%0.4d\r\n",vUART,vUART_off);
 10645                           
 10646                           
 10647                           ;main.c: 495: else
 10648                           ;main.c: 496: {
 10649                           ;main.c: 497: sprintf(chBufADC,"%0.4dA%0.4d\r\n",vUART,vUART_off);
 10650  0DE5  300B               	movlw	(STR_2| (0+32768))& (0+255)
 10651  0DE6  0020               	movlb	0	; select bank0
 10652  0DE7                     L6:	
 10653  0DE7  00C8               	movwf	??_main
 10654  0DE8  0848               	movf	??_main,w
 10655  0DE9  00B5               	movwf	?_sprintf
 10656  0DEA  0021               	movlb	1	; select bank1
 10657  0DEB  085D               	movf	(main@vUART+1)^(0+128),w
 10658  0DEC  0020               	movlb	0	; select bank0
 10659  0DED  01B7               	clrf	?_sprintf+2
 10660  0DEE  07B7               	addwf	?_sprintf+2,f
 10661  0DEF  0021               	movlb	1	; select bank1
 10662  0DF0  085C               	movf	main@vUART^(0+128),w
 10663  0DF1  0020               	movlb	0	; select bank0
 10664  0DF2  01B6               	clrf	?_sprintf+1
 10665  0DF3  07B6               	addwf	?_sprintf+1,f
 10666  0DF4  0021               	movlb	1	; select bank1
 10667  0DF5  085F               	movf	(main@vUART_off+1)^(0+128),w
 10668  0DF6  0020               	movlb	0	; select bank0
 10669  0DF7  01B9               	clrf	?_sprintf+4
 10670  0DF8  07B9               	addwf	?_sprintf+4,f
 10671  0DF9  0021               	movlb	1	; select bank1
 10672  0DFA  085E               	movf	main@vUART_off^(0+128),w
 10673  0DFB  0020               	movlb	0	; select bank0
 10674  0DFC  01B8               	clrf	?_sprintf+3
 10675  0DFD  07B8               	addwf	?_sprintf+3,f
 10676  0DFE  3056               	movlw	_chBufADC& (0+255)
 10677  0DFF  318A  22D5  318C   	fcall	_sprintf
 10678                           
 10679                           ;main.c: 498: UARTSend(chBufADC,0);
 10680  0E02  0020               	movlb	0	; select bank0
 10681  0E03  01A7               	clrf	?_UARTSend
 10682  0E04  3056               	movlw	_chBufADC& (0+255)
 10683  0E05  3187  2756  318C   	fcall	_UARTSend
 10684                           
 10685                           ;main.c: 499: }
 10686                           ;main.c: 501: if ((RA7==0)&&(RA7Old==1))
 10687  0E08  0020               	movlb	0	; select bank0
 10688  0E09  1B8C               	btfsc	12,7	;volatile
 10689  0E0A  2E22               	goto	l5321
 10690  0E0B  0021               	movlb	1	; select bank1
 10691  0E0C  0862               	movf	_RA7Old^(0+128),w
 10692  0E0D  3A01               	xorlw	1
 10693  0E0E  1D03               	skipz
 10694  0E0F  2E22               	goto	l5321
 10695                           
 10696                           ;main.c: 502: {
 10697                           ;main.c: 503: (void)eeprom_write(0x06,vPWM);
 10698  0E10  0020               	movlb	0	; select bank0
 10699  0E11  0865               	movf	_vPWM,w
 10700  0E12  00C8               	movwf	??_main
 10701  0E13  0848               	movf	??_main,w
 10702  0E14  00A7               	movwf	?_eeprom_write
 10703  0E15  3006               	movlw	6
 10704  0E16  3188  20AC  318C   	fcall	_eeprom_write
 10705                           
 10706                           ;main.c: 504: (void)eeprom_write(0x07,(vPWM>>8));
 10707  0E19  0020               	movlb	0	; select bank0
 10708  0E1A  0866               	movf	_vPWM+1,w
 10709  0E1B  00C8               	movwf	??_main
 10710  0E1C  0848               	movf	??_main,w
 10711  0E1D  00A7               	movwf	?_eeprom_write
 10712  0E1E  3007               	movlw	7
 10713  0E1F  3188  20AC  318C   	fcall	_eeprom_write
 10714  0E22                     l5321:	
 10715                           
 10716                           ;main.c: 505: }
 10717                           ;main.c: 507: RA7Old = RA7;
 10718  0E22  3000               	movlw	0
 10719  0E23  0020               	movlb	0	; select bank0
 10720  0E24  1B8C               	btfsc	12,7	;volatile
 10721  0E25  3001               	movlw	1
 10722  0E26  00C8               	movwf	??_main
 10723  0E27  0848               	movf	??_main,w
 10724  0E28  0021               	movlb	1	; select bank1
 10725  0E29  00E2               	movwf	_RA7Old^(0+128)
 10726                           
 10727                           ;main.c: 508: Voff_Old = Voff;
 10728  0E2A  0020               	movlb	0	; select bank0
 10729  0E2B  0864               	movf	_Voff,w
 10730  0E2C  00C8               	movwf	??_main
 10731  0E2D  01C9               	clrf	??_main+1
 10732  0E2E  0848               	movf	??_main,w
 10733  0E2F  0022               	movlb	2	; select bank2
 10734  0E30  00D0               	movwf	_Voff_Old^(0+256)
 10735  0E31  0020               	movlb	0	; select bank0
 10736  0E32  0849               	movf	??_main+1,w
 10737  0E33  0022               	movlb	2	; select bank2
 10738  0E34  00D1               	movwf	(_Voff_Old+1)^(0+256)
 10739                           
 10740                           ;main.c: 509: vADCAN9_Old = vADCAN9;
 10741  0E35  0020               	movlb	0	; select bank0
 10742  0E36  0861               	movf	main@vADCAN9+1,w
 10743  0E37  0021               	movlb	1	; select bank1
 10744  0E38  01DB               	clrf	(main@vADCAN9_Old+1)^(0+128)
 10745  0E39  07DB               	addwf	(main@vADCAN9_Old+1)^(0+128),f
 10746  0E3A  0020               	movlb	0	; select bank0
 10747  0E3B  0860               	movf	main@vADCAN9,w
 10748  0E3C  0021               	movlb	1	; select bank1
 10749  0E3D  01DA               	clrf	main@vADCAN9_Old^(0+128)
 10750  0E3E  07DA               	addwf	main@vADCAN9_Old^(0+128),f
 10751  0E3F                     l5327:	
 10752                           
 10753                           ;main.c: 511: }
 10754                           ;main.c: 514: if ((cntOS%1000==0)&&(stBlinking==0))
 10755  0E3F  3000               	movlw	0
 10756  0E40  0020               	movlb	0	; select bank0
 10757  0E41  00AA               	movwf	?___llmod+3
 10758  0E42  3000               	movlw	0
 10759  0E43  00A9               	movwf	?___llmod+2
 10760  0E44  3003               	movlw	3
 10761  0E45  00A8               	movwf	?___llmod+1
 10762  0E46  30E8               	movlw	232
 10763  0E47  00A7               	movwf	?___llmod
 10764  0E48  0022               	movlb	2	; select bank2
 10765  0E49  084F               	movf	(_cntOS+3)^(0+256),w
 10766  0E4A  0020               	movlb	0	; select bank0
 10767  0E4B  00AE               	movwf	?___llmod+7
 10768  0E4C  0022               	movlb	2	; select bank2
 10769  0E4D  084E               	movf	(_cntOS+2)^(0+256),w
 10770  0E4E  0020               	movlb	0	; select bank0
 10771  0E4F  00AD               	movwf	?___llmod+6
 10772  0E50  0022               	movlb	2	; select bank2
 10773  0E51  084D               	movf	(_cntOS+1)^(0+256),w
 10774  0E52  0020               	movlb	0	; select bank0
 10775  0E53  00AC               	movwf	?___llmod+5
 10776  0E54  0022               	movlb	2	; select bank2
 10777  0E55  084C               	movf	_cntOS^(0+256),w
 10778  0E56  0020               	movlb	0	; select bank0
 10779  0E57  00AB               	movwf	?___llmod+4
 10780  0E58  318A  223E  318C   	fcall	___llmod
 10781  0E5B  0020               	movlb	0	; select bank0
 10782  0E5C  082A               	movf	?___llmod+3,w
 10783  0E5D  0429               	iorwf	?___llmod+2,w
 10784  0E5E  0428               	iorwf	?___llmod+1,w
 10785  0E5F  0427               	iorwf	?___llmod,w
 10786  0E60  1D03               	skipz
 10787  0E61  2FFE               	goto	L12
 10788  0E62  0023               	movlb	3	; select bank3
 10789  0E63  08BB               	movf	main@stBlinking^(0+384),f
 10790  0E64  1D03               	skipz
 10791  0E65  2FFE               	goto	L12
 10792                           
 10793                           ;main.c: 515: {
 10794                           ;main.c: 516: Vavr_max = vADCAN9;
 10795  0E66  0020               	movlb	0	; select bank0
 10796  0E67  0861               	movf	main@vADCAN9+1,w
 10797  0E68  0021               	movlb	1	; select bank1
 10798  0E69  01B3               	clrf	(_Vavr_max+1)^(0+128)
 10799  0E6A  07B3               	addwf	(_Vavr_max+1)^(0+128),f
 10800  0E6B  0020               	movlb	0	; select bank0
 10801  0E6C  0860               	movf	main@vADCAN9,w
 10802  0E6D  0021               	movlb	1	; select bank1
 10803  0E6E  01B2               	clrf	_Vavr_max^(0+128)
 10804  0E6F  07B2               	addwf	_Vavr_max^(0+128),f
 10805                           
 10806                           ;main.c: 517: for (char i=-10;i<10;i++)
 10807  0E70  30F6               	movlw	246
 10808  0E71  0020               	movlb	0	; select bank0
 10809  0E72  00C8               	movwf	??_main
 10810  0E73  0848               	movf	??_main,w
 10811  0E74  0023               	movlb	3	; select bank3
 10812  0E75  00BA               	movwf	main@i_341^(0+384)
 10813  0E76  300A               	movlw	10
 10814  0E77  023A               	subwf	main@i_341^(0+384),w
 10815  0E78  1803               	btfsc	3,0
 10816  0E79  2F9E               	goto	l5371
 10817  0E7A                     l5339:	
 10818                           
 10819                           ;main.c: 518: {
 10820                           ;main.c: 519: vPWM= vPWM+i;
 10821  0E7A  083A               	movf	main@i_341^(0+384),w
 10822  0E7B  0020               	movlb	0	; select bank0
 10823  0E7C  0765               	addwf	_vPWM,w
 10824  0E7D  00E5               	movwf	_vPWM
 10825  0E7E  0866               	movf	_vPWM+1,w
 10826  0E7F  1803               	skipnc
 10827  0E80  0A66               	incf	_vPWM+1,w
 10828  0E81  00E6               	movwf	_vPWM+1
 10829                           
 10830                           ;main.c: 520: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
 10831  0E82  0865               	movf	_vPWM,w
 10832  0E83  3E64               	addlw	100
 10833  0E84  00A7               	movwf	?___aldiv
 10834  0E85  3000               	movlw	0
 10835  0E86  3D66               	addwfc	_vPWM+1,w
 10836  0E87  00A8               	movwf	?___aldiv+1
 10837  0E88  01A9               	clrf	?___aldiv+2
 10838  0E89  01AA               	clrf	?___aldiv+3
 10839  0E8A  3003               	movlw	3
 10840  0E8B  00AE               	movwf	?___aldiv+7
 10841  0E8C  30D0               	movlw	208
 10842  0E8D  00AD               	movwf	?___aldiv+6
 10843  0E8E  3090               	movlw	144
 10844  0E8F  00AC               	movwf	?___aldiv+5
 10845  0E90  3000               	movlw	0
 10846  0E91  00AB               	movwf	?___aldiv+4
 10847  0E92  3186  26D4  318C   	fcall	___aldiv
 10848  0E95  0020               	movlb	0	; select bank0
 10849  0E96  0828               	movf	?___aldiv+1,w
 10850  0E97  01B7               	clrf	?_PWMSetPeriod+1
 10851  0E98  07B7               	addwf	?_PWMSetPeriod+1,f
 10852  0E99  0827               	movf	?___aldiv,w
 10853  0E9A  01B6               	clrf	?_PWMSetPeriod
 10854  0E9B  07B6               	addwf	?_PWMSetPeriod,f
 10855  0E9C  3197  27EA  318C   	fcall	_PWMSetPeriod
 10856  0E9F  0020               	movlb	0	; select bank0
 10857  0EA0  0865               	movf	_vPWM,w
 10858  0EA1  3E64               	addlw	100
 10859  0EA2  00A7               	movwf	?___aldiv
 10860  0EA3  3000               	movlw	0
 10861  0EA4  3D66               	addwfc	_vPWM+1,w
 10862  0EA5  00A8               	movwf	?___aldiv+1
 10863  0EA6  01A9               	clrf	?___aldiv+2
 10864  0EA7  01AA               	clrf	?___aldiv+3
 10865  0EA8  3001               	movlw	1
 10866  0EA9  00AE               	movwf	?___aldiv+7
 10867  0EAA  30E8               	movlw	232
 10868  0EAB  00AD               	movwf	?___aldiv+6
 10869  0EAC  3048               	movlw	72
 10870  0EAD  00AC               	movwf	?___aldiv+5
 10871  0EAE  3000               	movlw	0
 10872  0EAF  00AB               	movwf	?___aldiv+4
 10873  0EB0  3186  26D4  318C   	fcall	___aldiv
 10874  0EB3  0020               	movlb	0	; select bank0
 10875  0EB4  0828               	movf	?___aldiv+1,w
 10876  0EB5  01B7               	clrf	?_PWMSetDutyCycle+1
 10877  0EB6  07B7               	addwf	?_PWMSetDutyCycle+1,f
 10878  0EB7  0827               	movf	?___aldiv,w
 10879  0EB8  01B6               	clrf	?_PWMSetDutyCycle
 10880  0EB9  07B6               	addwf	?_PWMSetDutyCycle,f
 10881  0EBA  3187  27F5  318C   	fcall	_PWMSetDutyCycle
 10882  0EBD  3002               	movlw	2
 10883  0EBE  0020               	movlb	0	; select bank0
 10884  0EBF  00CA               	movwf	??_main+2
 10885  0EC0  3004               	movlw	4
 10886  0EC1  00C9               	movwf	??_main+1
 10887  0EC2  30BA               	movlw	186
 10888  0EC3  00C8               	movwf	??_main
 10889  0EC4                     u6777:	
 10890  0EC4  0BC8               	decfsz	??_main,f
 10891  0EC5  2EC4               	goto	u6777
 10892  0EC6  0BC9               	decfsz	??_main+1,f
 10893  0EC7  2EC4               	goto	u6777
 10894  0EC8  0BCA               	decfsz	??_main+2,f
 10895  0EC9  2EC4               	goto	u6777
 10896  0ECA  0000               	nop
 10897                           
 10898                           ;main.c: 521: { Vin = ReadADC(9); for (char i=0; i<8;i++) { Vin8 = Vin7; Vin7 = Vin6; Vi
      +                          n6 = Vin5; Vin5 = Vin4; Vin4 = Vin3; Vin3 = Vin2; Vin2 = Vin; Vin = ReadADC(9); _delay(1
      +                          000); } Vavr = (Vin + Vin2 + Vin3 + Vin4 + Vin5 + Vin6 + Vin7 + Vin8)/8;}
 10899  0ECB  3009               	movlw	9
 10900  0ECC  318A  2200  318C   	fcall	_ReadADC
 10901  0ECF  0020               	movlb	0	; select bank0
 10902  0ED0  0828               	movf	?_ReadADC+1,w
 10903  0ED1  01D7               	clrf	_Vin+1
 10904  0ED2  07D7               	addwf	_Vin+1,f
 10905  0ED3  0827               	movf	?_ReadADC,w
 10906  0ED4  01D6               	clrf	_Vin
 10907  0ED5  07D6               	addwf	_Vin,f
 10908  0ED6  0023               	movlb	3	; select bank3
 10909  0ED7  01B9               	clrf	main@i_342^(0+384)
 10910  0ED8  3008               	movlw	8
 10911  0ED9  0239               	subwf	main@i_342^(0+384),w
 10912  0EDA  1803               	btfsc	3,0
 10913  0EDB  2F28               	goto	l5363
 10914  0EDC                     l5353:	
 10915  0EDC  0021               	movlb	1	; select bank1
 10916  0EDD  083B               	movf	(_Vin7+1)^(0+128),w
 10917  0EDE  01BD               	clrf	(_Vin8+1)^(0+128)
 10918  0EDF  07BD               	addwf	(_Vin8+1)^(0+128),f
 10919  0EE0  083A               	movf	_Vin7^(0+128),w
 10920  0EE1  01BC               	clrf	_Vin8^(0+128)
 10921  0EE2  07BC               	addwf	_Vin8^(0+128),f
 10922  0EE3  0839               	movf	(_Vin6+1)^(0+128),w
 10923  0EE4  01BB               	clrf	(_Vin7+1)^(0+128)
 10924  0EE5  07BB               	addwf	(_Vin7+1)^(0+128),f
 10925  0EE6  0838               	movf	_Vin6^(0+128),w
 10926  0EE7  01BA               	clrf	_Vin7^(0+128)
 10927  0EE8  07BA               	addwf	_Vin7^(0+128),f
 10928  0EE9  0837               	movf	(_Vin5+1)^(0+128),w
 10929  0EEA  01B9               	clrf	(_Vin6+1)^(0+128)
 10930  0EEB  07B9               	addwf	(_Vin6+1)^(0+128),f
 10931  0EEC  0836               	movf	_Vin5^(0+128),w
 10932  0EED  01B8               	clrf	_Vin6^(0+128)
 10933  0EEE  07B8               	addwf	_Vin6^(0+128),f
 10934  0EEF  0020               	movlb	0	; select bank0
 10935  0EF0  085D               	movf	_Vin4+1,w
 10936  0EF1  0021               	movlb	1	; select bank1
 10937  0EF2  01B7               	clrf	(_Vin5+1)^(0+128)
 10938  0EF3  07B7               	addwf	(_Vin5+1)^(0+128),f
 10939  0EF4  0020               	movlb	0	; select bank0
 10940  0EF5  085C               	movf	_Vin4,w
 10941  0EF6  0021               	movlb	1	; select bank1
 10942  0EF7  01B6               	clrf	_Vin5^(0+128)
 10943  0EF8  07B6               	addwf	_Vin5^(0+128),f
 10944  0EF9  0020               	movlb	0	; select bank0
 10945  0EFA  085B               	movf	_Vin3+1,w
 10946  0EFB  01DD               	clrf	_Vin4+1
 10947  0EFC  07DD               	addwf	_Vin4+1,f
 10948  0EFD  085A               	movf	_Vin3,w
 10949  0EFE  01DC               	clrf	_Vin4
 10950  0EFF  07DC               	addwf	_Vin4,f
 10951  0F00  0859               	movf	_Vin2+1,w
 10952  0F01  01DB               	clrf	_Vin3+1
 10953  0F02  07DB               	addwf	_Vin3+1,f
 10954  0F03  0858               	movf	_Vin2,w
 10955  0F04  01DA               	clrf	_Vin3
 10956  0F05  07DA               	addwf	_Vin3,f
 10957  0F06  0857               	movf	_Vin+1,w
 10958  0F07  01D9               	clrf	_Vin2+1
 10959  0F08  07D9               	addwf	_Vin2+1,f
 10960  0F09  0856               	movf	_Vin,w
 10961  0F0A  01D8               	clrf	_Vin2
 10962  0F0B  07D8               	addwf	_Vin2,f
 10963  0F0C  3009               	movlw	9
 10964  0F0D  318A  2200  318C   	fcall	_ReadADC
 10965  0F10  0020               	movlb	0	; select bank0
 10966  0F11  0828               	movf	?_ReadADC+1,w
 10967  0F12  01D7               	clrf	_Vin+1
 10968  0F13  07D7               	addwf	_Vin+1,f
 10969  0F14  0827               	movf	?_ReadADC,w
 10970  0F15  01D6               	clrf	_Vin
 10971  0F16  07D6               	addwf	_Vin,f
 10972  0F17  30F9               	movlw	249
 10973  0F18  00C8               	movwf	??_main
 10974  0F19                     u6787:	
 10975  0F19  0000               	nop
 10976  0F1A  0BC8               	decfsz	??_main,f
 10977  0F1B  2F19               	goto	u6787
 10978  0F1C  2F1D               	nop2	;nop
 10979  0F1D  0000               	nop
 10980  0F1E  3001               	movlw	1
 10981  0F1F  0020               	movlb	0	; select bank0
 10982  0F20  00C8               	movwf	??_main
 10983  0F21  0848               	movf	??_main,w
 10984  0F22  0023               	movlb	3	; select bank3
 10985  0F23  07B9               	addwf	main@i_342^(0+384),f
 10986  0F24  3008               	movlw	8
 10987  0F25  0239               	subwf	main@i_342^(0+384),w
 10988  0F26  1C03               	skipc
 10989  0F27  2EDC               	goto	l5353
 10990  0F28                     l5363:	
 10991  0F28  3008               	movlw	8
 10992  0F29  0020               	movlb	0	; select bank0
 10993  0F2A  00A7               	movwf	?___awdiv
 10994  0F2B  3000               	movlw	0
 10995  0F2C  00A8               	movwf	?___awdiv+1
 10996  0F2D  0858               	movf	_Vin2,w
 10997  0F2E  0756               	addwf	_Vin,w
 10998  0F2F  00C8               	movwf	??_main
 10999  0F30  0859               	movf	_Vin2+1,w
 11000  0F31  3D57               	addwfc	_Vin+1,w
 11001  0F32  00C9               	movwf	??_main+1
 11002  0F33  085A               	movf	_Vin3,w
 11003  0F34  0748               	addwf	??_main,w
 11004  0F35  00CA               	movwf	??_main+2
 11005  0F36  085B               	movf	_Vin3+1,w
 11006  0F37  3D49               	addwfc	??_main+1,w
 11007  0F38  00CB               	movwf	??_main+3
 11008  0F39  085C               	movf	_Vin4,w
 11009  0F3A  074A               	addwf	??_main+2,w
 11010  0F3B  00CC               	movwf	??_main+4
 11011  0F3C  085D               	movf	_Vin4+1,w
 11012  0F3D  3D4B               	addwfc	??_main+3,w
 11013  0F3E  00CD               	movwf	??_main+5
 11014  0F3F  0021               	movlb	1	; select bank1
 11015  0F40  0836               	movf	_Vin5^(0+128),w
 11016  0F41  0020               	movlb	0	; select bank0
 11017  0F42  074C               	addwf	??_main+4,w
 11018  0F43  00CE               	movwf	??_main+6
 11019  0F44  0021               	movlb	1	; select bank1
 11020  0F45  0837               	movf	(_Vin5+1)^(0+128),w
 11021  0F46  0020               	movlb	0	; select bank0
 11022  0F47  3D4D               	addwfc	??_main+5,w
 11023  0F48  00CF               	movwf	??_main+7
 11024  0F49  0021               	movlb	1	; select bank1
 11025  0F4A  0838               	movf	_Vin6^(0+128),w
 11026  0F4B  0020               	movlb	0	; select bank0
 11027  0F4C  074E               	addwf	??_main+6,w
 11028  0F4D  00D0               	movwf	??_main+8
 11029  0F4E  0021               	movlb	1	; select bank1
 11030  0F4F  0839               	movf	(_Vin6+1)^(0+128),w
 11031  0F50  0020               	movlb	0	; select bank0
 11032  0F51  3D4F               	addwfc	??_main+7,w
 11033  0F52  00D1               	movwf	??_main+9
 11034  0F53  0021               	movlb	1	; select bank1
 11035  0F54  083A               	movf	_Vin7^(0+128),w
 11036  0F55  0020               	movlb	0	; select bank0
 11037  0F56  0750               	addwf	??_main+8,w
 11038  0F57  00D2               	movwf	??_main+10
 11039  0F58  0021               	movlb	1	; select bank1
 11040  0F59  083B               	movf	(_Vin7+1)^(0+128),w
 11041  0F5A  0020               	movlb	0	; select bank0
 11042  0F5B  3D51               	addwfc	??_main+9,w
 11043  0F5C  00D3               	movwf	??_main+11
 11044  0F5D  0021               	movlb	1	; select bank1
 11045  0F5E  083C               	movf	_Vin8^(0+128),w
 11046  0F5F  0020               	movlb	0	; select bank0
 11047  0F60  0752               	addwf	??_main+10,w
 11048  0F61  00A9               	movwf	?___awdiv+2
 11049  0F62  0021               	movlb	1	; select bank1
 11050  0F63  083D               	movf	(_Vin8+1)^(0+128),w
 11051  0F64  0020               	movlb	0	; select bank0
 11052  0F65  3D53               	addwfc	??_main+11,w
 11053  0F66  00AA               	movwf	?___awdiv+3
 11054  0F67  318A  2281  318C   	fcall	___awdiv
 11055  0F6A  0020               	movlb	0	; select bank0
 11056  0F6B  0828               	movf	?___awdiv+1,w
 11057  0F6C  01D5               	clrf	_Vavr+1
 11058  0F6D  07D5               	addwf	_Vavr+1,f
 11059  0F6E  0827               	movf	?___awdiv,w
 11060  0F6F  01D4               	clrf	_Vavr
 11061  0F70  07D4               	addwf	_Vavr,f
 11062                           
 11063                           ;main.c: 522: if (Vavr > Vavr_max)
 11064  0F71  0021               	movlb	1	; select bank1
 11065  0F72  0833               	movf	(_Vavr_max+1)^(0+128),w
 11066  0F73  3A80               	xorlw	128
 11067  0F74  0020               	movlb	0	; select bank0
 11068  0F75  00C8               	movwf	??_main
 11069  0F76  0855               	movf	_Vavr+1,w
 11070  0F77  3A80               	xorlw	128
 11071  0F78  0248               	subwf	??_main,w
 11072  0F79  1D03               	skipz
 11073  0F7A  2F7E               	goto	u5735
 11074  0F7B  0854               	movf	_Vavr,w
 11075  0F7C  0021               	movlb	1	; select bank1
 11076  0F7D  0232               	subwf	_Vavr_max^(0+128),w
 11077  0F7E                     u5735:	
 11078  0F7E  1803               	skipnc
 11079  0F7F  2F94               	goto	l508
 11080                           
 11081                           ;main.c: 523: {
 11082                           ;main.c: 524: Vavr_max = Vavr;
 11083  0F80  0020               	movlb	0	; select bank0
 11084  0F81  0855               	movf	_Vavr+1,w
 11085  0F82  0021               	movlb	1	; select bank1
 11086  0F83  01B3               	clrf	(_Vavr_max+1)^(0+128)
 11087  0F84  07B3               	addwf	(_Vavr_max+1)^(0+128),f
 11088  0F85  0020               	movlb	0	; select bank0
 11089  0F86  0854               	movf	_Vavr,w
 11090  0F87  0021               	movlb	1	; select bank1
 11091  0F88  01B2               	clrf	_Vavr_max^(0+128)
 11092  0F89  07B2               	addwf	_Vavr_max^(0+128),f
 11093                           
 11094                           ;main.c: 525: vPWM_old = vPWM;
 11095  0F8A  0020               	movlb	0	; select bank0
 11096  0F8B  0866               	movf	_vPWM+1,w
 11097  0F8C  0021               	movlb	1	; select bank1
 11098  0F8D  01D3               	clrf	(_vPWM_old+1)^(0+128)
 11099  0F8E  07D3               	addwf	(_vPWM_old+1)^(0+128),f
 11100  0F8F  0020               	movlb	0	; select bank0
 11101  0F90  0865               	movf	_vPWM,w
 11102  0F91  0021               	movlb	1	; select bank1
 11103  0F92  01D2               	clrf	_vPWM_old^(0+128)
 11104  0F93  07D2               	addwf	_vPWM_old^(0+128),f
 11105  0F94                     l508:	
 11106  0F94  3001               	movlw	1
 11107  0F95  0020               	movlb	0	; select bank0
 11108  0F96  00C8               	movwf	??_main
 11109  0F97  0848               	movf	??_main,w
 11110  0F98  0023               	movlb	3	; select bank3
 11111  0F99  07BA               	addwf	main@i_341^(0+384),f
 11112  0F9A  300A               	movlw	10
 11113  0F9B  023A               	subwf	main@i_341^(0+384),w
 11114  0F9C  1C03               	skipc
 11115  0F9D  2E7A               	goto	l5339
 11116  0F9E                     l5371:	
 11117                           
 11118                           ;main.c: 526: }
 11119                           ;main.c: 527: }
 11120                           ;main.c: 528: vPWM = vPWM_old;
 11121  0F9E  0021               	movlb	1	; select bank1
 11122  0F9F  0853               	movf	(_vPWM_old+1)^(0+128),w
 11123  0FA0  0020               	movlb	0	; select bank0
 11124  0FA1  01E6               	clrf	_vPWM+1
 11125  0FA2  07E6               	addwf	_vPWM+1,f
 11126  0FA3  0021               	movlb	1	; select bank1
 11127  0FA4  0852               	movf	_vPWM_old^(0+128),w
 11128  0FA5  0020               	movlb	0	; select bank0
 11129  0FA6  01E5               	clrf	_vPWM
 11130  0FA7  07E5               	addwf	_vPWM,f
 11131                           
 11132                           ;main.c: 529: { PWMSetPeriod (64000000/(vPWM+100)); PWMSetDutyCycle(32000000/(vPWM+100))
      +                          ; _delay(200000); }
 11133  0FA8  0865               	movf	_vPWM,w
 11134  0FA9  3E64               	addlw	100
 11135  0FAA  00A7               	movwf	?___aldiv
 11136  0FAB  3000               	movlw	0
 11137  0FAC  3D66               	addwfc	_vPWM+1,w
 11138  0FAD  00A8               	movwf	?___aldiv+1
 11139  0FAE  01A9               	clrf	?___aldiv+2
 11140  0FAF  01AA               	clrf	?___aldiv+3
 11141  0FB0  3003               	movlw	3
 11142  0FB1  00AE               	movwf	?___aldiv+7
 11143  0FB2  30D0               	movlw	208
 11144  0FB3  00AD               	movwf	?___aldiv+6
 11145  0FB4  3090               	movlw	144
 11146  0FB5  00AC               	movwf	?___aldiv+5
 11147  0FB6  3000               	movlw	0
 11148  0FB7  00AB               	movwf	?___aldiv+4
 11149  0FB8  3186  26D4  318C   	fcall	___aldiv
 11150  0FBB  0020               	movlb	0	; select bank0
 11151  0FBC  0828               	movf	?___aldiv+1,w
 11152  0FBD  01B7               	clrf	?_PWMSetPeriod+1
 11153  0FBE  07B7               	addwf	?_PWMSetPeriod+1,f
 11154  0FBF  0827               	movf	?___aldiv,w
 11155  0FC0  01B6               	clrf	?_PWMSetPeriod
 11156  0FC1  07B6               	addwf	?_PWMSetPeriod,f
 11157  0FC2  3197  27EA  318C   	fcall	_PWMSetPeriod
 11158  0FC5  0020               	movlb	0	; select bank0
 11159  0FC6  0865               	movf	_vPWM,w
 11160  0FC7  3E64               	addlw	100
 11161  0FC8  00A7               	movwf	?___aldiv
 11162  0FC9  3000               	movlw	0
 11163  0FCA  3D66               	addwfc	_vPWM+1,w
 11164  0FCB  00A8               	movwf	?___aldiv+1
 11165  0FCC  01A9               	clrf	?___aldiv+2
 11166  0FCD  01AA               	clrf	?___aldiv+3
 11167  0FCE  3001               	movlw	1
 11168  0FCF  00AE               	movwf	?___aldiv+7
 11169  0FD0  30E8               	movlw	232
 11170  0FD1  00AD               	movwf	?___aldiv+6
 11171  0FD2  3048               	movlw	72
 11172  0FD3  00AC               	movwf	?___aldiv+5
 11173  0FD4  3000               	movlw	0
 11174  0FD5  00AB               	movwf	?___aldiv+4
 11175  0FD6  3186  26D4  318C   	fcall	___aldiv
 11176  0FD9  0020               	movlb	0	; select bank0
 11177  0FDA  0828               	movf	?___aldiv+1,w
 11178  0FDB  01B7               	clrf	?_PWMSetDutyCycle+1
 11179  0FDC  07B7               	addwf	?_PWMSetDutyCycle+1,f
 11180  0FDD  0827               	movf	?___aldiv,w
 11181  0FDE  01B6               	clrf	?_PWMSetDutyCycle
 11182  0FDF  07B6               	addwf	?_PWMSetDutyCycle,f
 11183  0FE0  3187  27F5  318C   	fcall	_PWMSetDutyCycle
 11184  0FE3  3002               	movlw	2
 11185  0FE4  0020               	movlb	0	; select bank0
 11186  0FE5  00CA               	movwf	??_main+2
 11187  0FE6  3004               	movlw	4
 11188  0FE7  00C9               	movwf	??_main+1
 11189  0FE8  30BA               	movlw	186
 11190  0FE9  00C8               	movwf	??_main
 11191  0FEA                     u6797:	
 11192  0FEA  0BC8               	decfsz	??_main,f
 11193  0FEB  2FEA               	goto	u6797
 11194  0FEC  0BC9               	decfsz	??_main+1,f
 11195  0FED  2FEA               	goto	u6797
 11196  0FEE  0BCA               	decfsz	??_main+2,f
 11197  0FEF  2FEA               	goto	u6797
 11198  0FF0  0000               	nop
 11199                           
 11200                           ;main.c: 537: vSenOff = Vavr;
 11201  0FF1  0020               	movlb	0	; select bank0
 11202  0FF2  0855               	movf	_Vavr+1,w
 11203  0FF3  0021               	movlb	1	; select bank1
 11204  0FF4  01D7               	clrf	(_vSenOff+1)^(0+128)
 11205  0FF5  07D7               	addwf	(_vSenOff+1)^(0+128),f
 11206  0FF6  0020               	movlb	0	; select bank0
 11207  0FF7  0854               	movf	_Vavr,w
 11208  0FF8  0021               	movlb	1	; select bank1
 11209  0FF9  01D6               	clrf	_vSenOff^(0+128)
 11210  0FFA  07D6               	addwf	_vSenOff^(0+128),f
 11211                           
 11212                           ;main.c: 538: vSenDiff = 0;
 11213  0FFB  0020               	movlb	0	; select bank0
 11214  0FFC  01DE               	clrf	_vSenDiff
 11215  0FFD  01DF               	clrf	_vSenDiff+1
 11216  0FFE                     L12:	
 11217  0FFE  3184  2CCA         	goto	l444
 11218  1000                     __end_of_main:	


Data Sizes:
    Strings     20
    Constant    10
    Data        0
    BSS         192
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     52      72
    BANK1            80      0      79
    BANK2            80      0      74
    BANK3            80      8      28
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___llmod	unsigned long  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?___lmul	unsigned long  size(1) Largest target is 0

    ?___aldiv	long  size(1) Largest target is 0

    ?_ReadADC	int  size(1) Largest target is 0

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_5(CODE[14]), STR_4(CODE[14]), STR_3(CODE[14]), STR_2(CODE[14]), 
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> chBufADC(BANK2[20]), 

    ?_sprintf	int  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S436$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    UARTSend@pData	PTR unsigned char  size(1) Largest target is 20
		 -> chBufADC(BANK2[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_PWMSetPeriod
    _isr->i1_PWMSetDutyCycle
    i1_PWMSetDutyCycle->i1___lmul
    i1_PWMSetPeriod->i1___lmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _PWMSetConfig->_PWMSetDutyCycle
    _PWMSetConfig->_PWMSetPeriod
    _PWMSetPeriod->___aldiv
    _PWMSetDutyCycle->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _isr in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _isr in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _isr in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _isr in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _isr in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _isr in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _isr in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    5629
                                             40 BANK0     12    12      0
                                              0 BANK3      8     8      0
                            _ReadADC
                    _PWMSetDutyCycle
                       _PWMSetPeriod
                           _UARTSend
                _ConfigureOscillator
                            _InitApp
                             _DACSet
                            _sprintf
                       _eeprom_write
                            ___aldiv
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     136
                                              7 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) ___llmod                                             10     2      8     232
                                              7 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     433
                                              7 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     445
                                              7 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     445
                                              7 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         4     3      1      62
                                              7 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    14      5    2629
                                             21 BANK0     19    14      5
                            _isdigit
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     136
                                              7 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     232
                                             15 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     241
                                              7 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     136
                                              7 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DACSet                                               2     2      0      31
                                              7 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     279
                             _ADCIni
                             _PWMIni
                            _UARTIni
                            _DACInit
                             _DioIni
 ---------------------------------------------------------------------------------
 (2) _DioIni                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DACInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UARTIni                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWMIni                                               0     0      0     186
                       _PWMSetConfig
 ---------------------------------------------------------------------------------
 (3) _PWMSetConfig                                         0     0      0     186
                    _PWMSetDutyCycle
                       _PWMSetPeriod
                        _PWMSetPhase
 ---------------------------------------------------------------------------------
 (4) _PWMSetPhase                                          2     0      2      62
                                              7 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _PWMSetPeriod                                         2     0      2      62
                                             22 BANK0      2     0      2
                            ___aldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PWMSetDutyCycle                                      2     0      2      62
                                             22 BANK0      2     0      2
                            ___aldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADCIni                                               3     2      1      93
                                              7 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTSend                                             6     5      1     254
                                              7 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              7     5      2      71
                                              7 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0     592
                                              0 BANK0      7     7      0
                     i1_PWMSetPeriod
                  i1_PWMSetDutyCycle
                           i1___lmul
 ---------------------------------------------------------------------------------
 (6) i1___lmul                                            12     4      8     300
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) i1_PWMSetDutyCycle                                    2     0      2     146
                                             12 COMMON     2     0      2
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) i1_PWMSetPeriod                                       2     0      2     146
                                             12 COMMON     2     0      2
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadADC
   _PWMSetDutyCycle
     ___aldiv (ARG)
     ___lmul (ARG)
   _PWMSetPeriod
     ___aldiv (ARG)
     ___lmul (ARG)
   _UARTSend
   _ConfigureOscillator
   _InitApp
     _ADCIni
     _PWMIni
       _PWMSetConfig
         _PWMSetDutyCycle
           ___aldiv (ARG)
           ___lmul (ARG)
         _PWMSetPeriod
           ___aldiv (ARG)
           ___lmul (ARG)
         _PWMSetPhase
     _UARTIni
     _DACInit
     _DioIni
   _DACSet
   _sprintf
     _isdigit
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
   _eeprom_write
   ___aldiv
   ___awdiv
   ___awmod
   ___llmod
   ___lmul

 _isr (ROOT)
   i1_PWMSetPeriod
     i1___lmul (ARG)
   i1_PWMSetDutyCycle
     i1___lmul (ARG)
   i1___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       8       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      48       5       90.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      8      1C      11       35.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     10B      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     113      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              50      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25              20      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Dec 13 22:02:02 2014

        __size_of_PWMSetPeriod 0009                     ReadADC@ANx 002B            ??i1_PWMSetDutyCycle 007E  
               ___bmul@product 0029                    __CFG_CP$OFF 0000                             l55 0A1B  
                           _GO 04E9                             _RD 0CA8                             _WR 0CA9  
                 ___awdiv@sign 002D            ___wmul@multiplicand 0029                    ReadADC@vADC 002C  
                  main@vADCAN9 0060                            l209 07A5                            l508 0F94  
                          l444 04CA                            l446 054E                            l490 0CDA  
                          l731 08AE                            l478 06CD                            l664 0AFB  
                          l498 0DE4                            l852 06E5                            l689 0BE2  
                          _GIE 005F                            _RC2 0072                            _RA7 0067  
                 __CFG_CPD$OFF 0000                    _PWMSetPhase 0822                            _Vin 0056  
                          _isr 0004                   ___awmod@sign 002D                __end_of_DACInit 0838  
                          wreg 0009                   __CFG_LVP$OFF 0000                           l1175 0897  
                         l5013 028E                           l5005 0227                           l5121 0558  
                         l5041 0378                           l5033 0345                           l5211 06A5  
                         l5203 0689                           l5115 054A                           l5301 0DCC  
                         l5221 06D1                           l5125 0587                           l5045 0381  
                         l5311 0DE5                           l5223 0C95                           l5215 06B9  
                         l5207 0697                           l5151 05E7                           l5135 05A3  
                         l5127 0593                           l5321 0E22                           l5161 060B  
                         l5145 05BB                           l5057 039F                           l5147 05CF  
                         l5091 04C0                           l5067 03EB                           l5261 0CD6  
                         l5229 0CA7                           l5181 064F                           l5173 0631  
                         l5165 0613                           l5157 05FF                           l5077 0456  
                         l5069 0434                           l5093 01C6      __end_ofi1_PWMSetDutyCycle 17E2  
                         l5503 0BEE                           l5423 0B00                           l5255 0CC4  
                         l5247 0CBA                           l5239 0CB0                           l5191 0674  
                         l5167 0614                           l5327 0E3F                           l5087 04A7  
                         l5425 0B08                           l5417 0AF7                           l5353 0EDC  
                         l5273 0CF3                           l5177 0640                           l5507 0C0A  
                         l5363 0F28                           l5371 0F9E                           l5339 0E7A  
                         l5291 0DB1                           l5283 0D40                           l5267 0CE4  
                         l5533 0C4C                           l5517 0C1F                           l5525 0C34  
                         l5509 0C0D                           l5453 0B75                           l5429 0B14  
                         l5437 0B44                           l5285 0D45                           l5615 0845  
                         l5527 0C38                           l5471 0BA7                           l5455 0B86  
                         l5447 0B51                           l5711 07B8                           l5801 09D2  
                         l5545 0C5C                           l5465 0B9C                           l5449 0B73  
                         l5803 09DE                           l5547 0ADB                           l5651 073F  
                         l5723 07C5                           l5715 07BF                           l4941 077E  
                         l5813 09F9                           l5485 0BC9                           l5477 0BAD  
                         l5549 0C8F                           l5637 0706                           l5629 06F6  
                         l5725 07D1                           l5733 07E6                           l4935 075F  
                         l5743 084A                           l5831 0926                           l5655 074D  
                         l5647 0734                           l5639 0714                           _ADIE 048E  
                         _ADIF 008E                           l5809 09F0                           l5825 090E  
                         l5841 0891                           l5489 0BD6                           l5673 0A97  
                         l5737 07EE                           l5729 07DD                           l4939 0773  
                         l5747 0850                           l5827 091A                           l5835 092F  
                         l5691 0ABD                           l5683 0A9F                           l5667 0A8C  
                         l5763 0A47                           ?_isr 0070                           l4949 0780  
                         l4957 07AB                           l5685 0AAB                           l5765 0A55  
                         l5773 0A78                           l5695 0AC6                           l5783 0979  
                         l5769 0A6D                           l5699 0ACE                           l5779 096F  
                         l4995 01DB                           _ADON 04E8                           _CFGS 0CAE  
                         _EEIF 0094                           STR_1 0819                           STR_2 080B  
                         STR_3 080B                           STR_4 080B                           STR_5 080B  
                         _BRGH 0CF2                           _CREN 0CEC                           _DONE 04E9  
                         u5115 0279                           u5205 043E                           u5125 028A  
                         u5305 056B                           u5315 0585                           u5155 0355  
                         u5085 0789                           u5405 062A                           u5325 0591  
                         u5165 0361                           u5415 063B                           u5255 052C  
                         u6145 0709                           u5505 06C3                           u5425 064A  
                         u5265 0538                           u5435 0659                           u5355 05E2  
                         u5275 0544                           _RCIE 048D                           _RCIF 008D  
                         u6165 0715                           u6245 0AA2                           u5445 0665  
                         u5365 05F1                           u6175 0729                           u5615 0D69  
                         u5535 0C9F                           u6185 0735                           u6265 0AAC  
                         u6345 07C8                           u6505 0981                           u5625 0D9B  
                         u6275 0AB6                           u6435 0A4A                           u5475 0693  
                         u5395 061E                           u6605 0911                           u6285 0ABE  
                         u6365 07D7                           u5565 0CCE                           u5485 06A1  
                         u6535 09D5                           u6375 07DE                           u6455 0A63  
                         u5735 0F7E                           u5575 0D21                           u5495 06AF  
                         u4944 099D                           u4945 099C                           u6625 0920  
                         u6465 0A6E                           u5585 0D29                           u4954 09A9  
                         u4955 09A8                           u6555 09DF                           u6635 0927  
                         u5915 0BFD                           u5595 0D39                           u6707 01BF  
                         u4965 09B8                           u6565 09E9                           u5845 0BBF  
                         u6717 0218                   _PWMSetConfig 08D8                           u4975 0A05  
                         u6807 0869                           u6575 09F1                           u6495 097A  
                         u6727 02D5                           u6817 09C4                           u6665 0898  
                         u6737 033B                           u4995 0A26                           u6827 0A16  
                         u6675 089D                           u6747 038A                           u6757 03DC  
                         u6767 049D                           u6777 0EC4                           u6697 01AC  
                         u6787 0F19                           u6797 0FEA                           _TMR0 0015  
                         _SPEN 0CEF                           _TXIE 048C                           _WREN 0CAA  
                         _TXEN 0CF5                           _TXIF 008C                           _SYNC 0CF4  
               ??_eeprom_write 0028                           _Vin2 0058                           _Vin3 005A  
                         _Vin4 005C                           _Vin5 00B6                           _Vin6 00B8  
                         _bFlg 00E4                           _Vin7 00BA                           _Vin8 00BC  
              __end_of_UARTIni 1800                           _Vavr 0054                           _Voff 0064  
                 _PWMSetPeriod 17EA                           _vPWM 0065                           _vAvg 00A8  
                         _main 014D                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           start 0128  
          _flgTurnOnDly_Offset 00EB              ___bmul@multiplier 002A                __end_of_ReadADC 0A3E  
              __end_of_InitApp 088E                          ??_isr 0020                  __CFG_PLLEN$ON 0000  
              __end_of___aldiv 0756                          ?_main 0070                __end_of___awdiv 0AD5  
                        _EEADR 0191                          _BRG16 0CFB                  __CFG_WDTE$OFF 0000  
              __end_of___awmod 07F5                          _CARRY 0018                          _ANSA2 0C62  
                        _ANSA5 0C65                          _ANSA7 0C67                          _EEPGD 0CAF  
              ___awdiv@divisor 0027                __end_of___llmod 0A81                __end_of___lwdiv 0A00  
              __end_of___lwmod 0936                          i1l293 00E1                          i1l294 00DD  
              ___awdiv@counter 002C                          _RCREG 0199                          _TRISA 008C  
                        _TRISB 008D                          _TXREG 019A            _ConfigureOscillator 17CB  
          ___lmul@multiplicand 002B                  __CFG_PWRTE$ON 0000          PWMSetPeriod@cntPeriod 0036  
             __end_of_UARTSend 07AD                          _Sum_e 00A4                   main@stFinish 01B4  
                        _cntOS 014C                __end_of_dpowers 080B                          _stMAX 00EE  
              __end_of_isdigit 0847                          _stLen 00ED                          main@i 01B7  
               __CFG_BOREN$OFF 0000               __end_ofi1___lmul 0966                          status 0003  
                        wtemp0 007E                __end_of_sprintf 0C95                 i1_PWMSetPeriod 17CF  
         ?_ConfigureOscillator 0070                  main@vUART_off 00DE                 __CFG_MCLRE$OFF 0000  
              __initialization 012A                   __end_of_main 1000            i1___lmul@multiplier 0070  
                    ??_DACInit 0027              ??_PWMSetDutyCycle 0038    PWMSetDutyCycle@cntDutyCycle 0036  
                       ??_main 0048                      ADCIni@ANx 0029                      ??_UARTIni 0027  
                       _DAC1EN 08C7                         _ADCON0 009D                         _ADCON1 009E  
                       _ADCON2 009F                         _ADCIni 0996               ___llmod@dividend 002B  
                       _ADRESH 009C                         _ADRESL 009B                         _EEDATA 0193  
                       _CCPR1L 0291                         _EECON1 0195                         _EECON2 0196  
                       _DACSet 0859               ___awdiv@dividend 0029                     _vADCANOld1 00D0  
   __size_ofi1_PWMSetDutyCycle 0007                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E                         i1l4613 093E                         i1l4617 0948  
                       i1l4721 00FC                         i1l4713 00F5                         i1l4651 001F  
                       i1l4645 0016                         i1l4729 0123                         i1l4665 0035  
                       i1l4675 009F                         i1l4669 0096                         i1l4687 00BD  
                       i1l4679 00A8                         _RA7Old 00E2                         _INTCON 000B  
                       u472_25 0949                         u473_25 0950                         _OSCCON 0099  
                       u482_25 0051                         u483_25 0083         __end_ofi1_PWMSetPeriod 17D5  
                       _TMR0IE 005D                         _TMR0IF 005A                         _SPBRGH 019C  
                       _SPBRGL 019B                      DACSet@Val 0028                         _TRISA2 0462  
                       _TRISC0 0470                         _TRISC1 0471                         _TRISA5 0465  
                       _TRISC2 0472                         _TRISA6 0466                         _TRISA7 0467  
                       _TRISC6 0476                         _TRISC7 0477                         _PWMIni 081F  
                    ??_ReadADC 0029                         _DioIni 17E2                      ??_InitApp 0038  
        ??_ConfigureOscillator 0027                         ___bmul 0847                         ___lmul 0966  
                    ??___aldiv 002F                         ___wmul 088E                      ??___awdiv 002B  
                    ??___awmod 002B                         _idxADC 00EC                         _cntPWM 00C4  
                    ??___llmod 002F                         _cntCur 00C0                      ??___lwdiv 002B  
                    ??___lwmod 0033               ___awdiv@quotient 002E                ___awmod@divisor 0027  
         __end_of_eeprom_write 08D8                ___awmod@counter 002C                      ??_isdigit 0027  
                    ??_sprintf 003A        __end_of__initialization 014A                ?i1_PWMSetPeriod 007C  
          ___bmul@multiplicand 0027                 __pcstackCOMMON 0070                      ?_UARTSend 0027  
              main@vADCAN9_Old 00DA                      ?i1___lmul 0070                   ?_PWMSetPhase 0027  
            eeprom_write@value 0027                        ?_ADCIni 0027                        ?_DACSet 0070  
                 sprintf@width 0044                     __pbssBANK0 0054                     __pbssBANK1 00A0  
                   __pbssBANK2 0120                     __pbssBANK3 01A0                        ?_PWMIni 0070  
                      ?_DioIni 0070                     ADCIni@Fosc 0027                     __pmaintext 014D  
                _flgADCAryFull 0338                        ?___bmul 0027                        ?___lmul 0027  
                      ?___wmul 0027                     ??_UARTSend 0028                        _DAC1OE1 08C5  
                   __pintentry 0004                        _DAC1NSS 08C0                        _CCP1CON 0293  
               ___lmul@product 002F                     _flgStepDwn 00EA                        _DACInit 082B  
                   ??i1___lmul 0078                      UARTSend@i 002B                        _P1TPRIE 7504  
                      _P1TPRIF 7500                     _cntStepDwn 00C6           SearchingOffSet@uVout 00A0  
                      _PSMC1LD 748E                        _UARTIni 17F3                      _ADCON0Tmp 00E1  
              __size_of_ADCIni 0033                __size_of_DACSet 0018                     __stringtab 0800  
                      _ReadADC 0A00                __size_of_PWMIni 0003                        _InitApp 0871  
              _PWMSetDutyCycle 07F5                __size_of_DioIni 0008                        _vADCAN0 00CA  
        __size_of_eeprom_write 002C                 main@stBlinking 01BB                        ___aldiv 06D4  
              __size_of___bmul 0012                        ___awdiv 0A81                __size_of___lmul 0030  
                      ___awmod 07AD                __size_of___wmul 001E                        ___llmod 0A3E  
                      ___lwdiv 09C9                        ___lwmod 0907                        _cntBIAS 00BE  
                      _flgPSMC 0339                        _cntDiff 00E5                        _cntPerd 00E6  
                      __ptext1 0966                        __ptext2 0A3E                        __ptext3 07AD  
                      __ptext4 0A81                        __ptext5 06D4                        __ptext6 08AC  
                      __ptext7 0AD5                        __ptext8 088E                        __ptext9 0907  
                      _vSenOff 00D6                        _vSenOld 00D8                        _counter 00C8  
                      _dpowers 0801                        _isdigit 0838                   __size_of_isr 0124  
             ___awmod@dividend 0029               ___aldiv@dividend 002B                        _sprintf 0AD5  
                      clrloop0 17D6         EEPROMWrite@cntOverTime 00E0           end_of_initialization 014A  
                 _eeprom_write 08AC                      _PSMC1STR0 0EAE               ___aldiv@quotient 0032  
          _cntTurnOnDly_Offset 00E7               __CFG_FOSC$INTOSC 0000           __size_of_PWMSetPhase 0009  
             ??i1_PWMSetPeriod 007E    __end_of_ConfigureOscillator 17CF        __end_of_PWMSetDutyCycle 07FF  
               __end_of_ADCIni 09C9                 _UART_cntRxUART 0062                 __end_of_DACSet 0871  
               _UART_cntTxUART 0063                 __end_of_PWMIni 0822                 __end_of_DioIni 17EA  
i1PWMSetDutyCycle@cntDutyCycle 007C                 __end_of___bmul 0859                 __end_of___lmul 0996  
               __end_of___wmul 08AC              __size_of_UARTSend 0057                  __pbitbssBANK0 0338  
             main@vADCAN9_mark 0154          i1___lmul@multiplicand 0074              __size_ofi1___lmul 0030  
          start_initialization 012A                    __end_of_isr 0128                       ??_ADCIni 0028  
                  _ADC_vADCAry 0120                       ??_DACSet 0027                  ?_PWMSetConfig 0070  
                ?_PWMSetPeriod 0036                      _vADCANFlt 00CC                       ??_PWMIni 0038  
                    _vADCANOld 00CE                ___llmod@divisor 0027                ___llmod@counter 0030  
                     ??_DioIni 0027                       ??___bmul 0028                       ??___lmul 002F  
                     ??___wmul 002B                       ?_DACInit 0070                  __pcstackBANK0 0020  
                __pcstackBANK3 01B4            __end_of__stringdata 081F                       ?_UARTIni 0070  
               ??_PWMSetConfig 0038               i1___lmul@product 0078               ?_PWMSetDutyCycle 0036  
               ??_PWMSetPeriod 0038               eeprom_write@addr 002A                    sprintf@_val 003F  
                  sprintf@flag 003E                    _cntUARTSend 00E8                    sprintf@prec 0046  
                     ?_ReadADC 0027                       ?_InitApp 0070                  UARTSend@pData 002A  
             ___lwdiv@dividend 0029                      _flgOffRls 00E9                  UARTSend@stLen 0027  
                    _flgTicTac 033A                       ?___aldiv 0027                       ?___awdiv 0027  
                     ?___awmod 0027                      _cntNoPres 00C2                       ?___llmod 0027  
                     ?___lwdiv 0027                       ?___lwmod 002F                       _DAC1CON0 0118  
                     _DAC1CON1 0119                      __pstrings 0800                       ?_isdigit 0070  
                     _ADC_vADC 00B0               ___lwdiv@quotient 002D                       ?_sprintf 0035  
              ___aldiv@divisor 0027                ___aldiv@counter 0030                 ___wmul@product 002B  
                    clear_ram0 17D5                       _PSMC1DBF 0EAA                       _PSMC1DCH 0EA4  
                     _PSMC1DCL 0EA3                       _PSMC1DBR 0EA9                       _PSMC1CLK 0E94  
                     _PSMC1CON 0E91                       _PSMC1OEN 0E95                       _PSMC1INT 0EA0  
                     _PSMC1PHH 0EA2                       _PSMC1PHL 0EA1                       _PSMC1POL 0E96  
                     _PSMC1PRH 0EA6                       _PSMC1PRL 0EA5                       _UARTSend 0756  
                 _PSMC1DCSbits 0E9B                       i1___lmul 0936                    __stringdata 080B  
                    main@i_341 01BA                      main@i_342 01B9                      main@i_335 01B8  
             __size_of_DACInit 000D              ___wmul@multiplier 0027                   _PSMC1PHSbits 0E9A  
                    main@vUART 00DC       SearchingOffSet@error_old 0148                   _PSMC1PRSbits 0E9C  
            ___lmul@multiplier 0027               __size_of_UARTIni 000D               __size_of_ReadADC 003E  
             __size_of_InitApp 001D                       _Vavr_max 00B2                       _Vavr_old 00B4  
                     _Voff_Old 0150                       _Voff_old 00E3               __size_of___aldiv 0082  
                     _chBufADC 0156           __end_of_PWMSetConfig 0907               __size_of___awdiv 0054  
             __size_of___awmod 0048               __size_of___llmod 0043               __size_of___lwdiv 0037  
             __size_of___lwmod 002F           __end_of_PWMSetPeriod 17F3             __end_of__stringtab 0801  
                  _isdigit$628 0027                  ??_PWMSetPhase 0029                       _vPWM_old 00D2  
             __size_of_isdigit 000F                ___lwdiv@divisor 0027                       _vAvg_Old 00AC  
                     _cntBlink 0152                ___lwdiv@counter 002C                       __ptext10 09C9  
                     __ptext11 0847                       __ptext20 0822                       __ptext12 0838  
                     __ptext21 17EA                       __ptext13 0859                       __ptext30 17CF  
                     __ptext22 07F5                       __ptext14 0871                       __ptext23 0996  
                     __ptext15 17E2                       __ptext24 17CB                       __ptext16 082B  
                     __ptext25 0756                       __ptext17 17F3                       __ptext26 0A00  
                     __ptext18 081F                       __ptext19 08D8                       __ptext28 0936  
                     __ptext29 17DB                       _vPeakVld 00D4                       _vSenDiff 005E  
             __size_of_sprintf 01C0                  __size_of_main 0EB3   __size_of_ConfigureOscillator 0004  
                 _UART_chRxBuf 01A0                   _UART_chTxBuf 0134                       main@temp 01B5  
                     isdigit@c 0028            __end_of_PWMSetPhase 082B                       intlevel1 0000  
                    sprintf@ap 003D                      sprintf@sp 0043            PWMSetPhase@cntPhase 0027  
             ___lwmod@dividend 0031              __CFG_CLKOUTEN$OFF 0000        __size_ofi1_PWMSetPeriod 0006  
                   _OPTION_REG 0095                       sprintf@c 0047                       sprintf@f 0035  
      i1PWMSetPeriod@cntPeriod 007C                ___lwmod@divisor 002F                ___lwmod@counter 0034  
                 ___aldiv@sign 0031                  ?_eeprom_write 0027              i1_PWMSetDutyCycle 17DB  
           ?i1_PWMSetDutyCycle 007C          __size_of_PWMSetConfig 002F       __size_of_PWMSetDutyCycle 000A  
